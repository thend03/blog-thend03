[{"content":"始于2020-01-09，终于2024-11-15\n其实我一直有感觉这一天会到来，只是没想到会这么的突兀。\n再继续下去，可能会影响个人的判断和选择，消耗会大于成长。\n分开，可能会更好的帮助我们回归独立思考，实现自我成长 。\n我觉得此刻分开可能会是一个比较好的机会，我们双方都互相冷静冷静，思考一下，后面的路该怎么走。\n谈恋爱和结婚相比，谈恋爱确实会简单很多，不会考虑那么多家庭啊，现实啊，未来这些方面的东西。\n恋爱么2个人看的对眼，平常生活习惯能过到一起去，2个人互相体谅一下，情感到位，我觉得也就差不多了。\n涉及到婚姻，房子，车子，彩礼，双方家庭条件，婚礼，乃至家庭和个人未来的风险，那是每加上一个，困难都呈指数级增长。\n叠到一起想想都让人头大。\n最终走到分开这一步呢，我是要承担很大的责任呢，我自己是个咸鱼的心态，不是那么充满活力和精力的人，精气神不足，容易悲观，能力上面也不那么突出。\n说到底还是我能力不够，解决不了那么多现实的问题，这个也没办法，只能说我自己个人能力方面还有巨大的提升空间。\n另一个底色偏悲观，2个人都对未来悲观的话，涉及婚姻确实更加的悲观了。\n在恋爱的过程中，我们俩算是互帮互助，搭伙这么久的过来了，这种感觉也挺好的。\n也谢谢她这么些年带给我的改变，之前那些年，由于家庭和性格原因，我在很多方面，尤其是生活方面，很多都是将个烂就的行为和心态。\n这么些年一起生活，我自己在生活行为心态上面，提升了不少，至少对我来说，生活方面是积极向上的，工作上面就乏善可陈了。\n这么些年，她带着我一起看了很多国内的风景，今年还有2次出境的体验，整体来说很不错。\n前一阵子回忆了一下这5年经历过的事情，确实在一起还做了不少的事的，带着我一起去看了祖国的大好河山\n再说回现实问题，以上这些在恋爱过程中都是美好的回忆和体验。\n结婚呢，这些只能说是添头，重点还是要放到工作和家庭上，结婚前要考虑双方家庭实力，要考虑婚后家庭帮助，要考虑婚礼怎么办，要考虑婚后工作怎么样，是否稳定，是否能有匹配年龄增长的挣钱能力，如何花时间提升自己。\n我最近也在思考这些现实问题，有2种，一种要么是父辈能提供帮助，低成本的在城市里安家，没有什么经济压力，一种是我自己能力超强，补足父辈提供不了的帮助，夹在中间会略有点夹生。\n我自己本身又个一个容易悲观的人，叠加当前的社会经济现象，我感觉是蛮难的。\n另一个为了家庭付出时间精力，自己也有借口摆烂不努力，我自己本身就有点懒散，自己努力学习的时间就更少了。\n再一个是对于女性婚姻的困境，我可能想的比较少，感受的也不够深，所以呢在这个时间点，矛盾太多，不可调和。\n我也想给一个安稳的，有希望的，有盼头的婚姻和未来。\n当前我觉得到达一个临界点了，要么突破压力向上，要么只零破碎\n分手后的第一个周末，突然的闲了下来，还有点不适，我开始通过打游戏来缓解无聊和空虚。\n但是其实在我这个年纪，游戏只能说是调剂品，不是必需品，一把一把的打游戏，最终带来的是更大范围的空虚和无聊。\n对我而言，后面要做的是如何避免空虚无聊，以及自己一个人的孤独，然后是想想自己未来的路在哪里，不管感情如何，还是得有自己安身立命的能力。\n对她而言，我觉得还是得想想未来的路怎么走，想要的是什么，该怎么做才能让自己未来更幸福，内心更丰盈和平静。\n虽然分手了，这么多年的感情倒也不是说放就能放的。\n只不过这次，我是觉得是该下狠手让我们双方都放手，冷静一下，深刻的想一想我们自己到底要什么，要怎么做了。\n祝她一切都好，找到自己的节奏和路，避免无意义的焦虑和内耗，能实现内心世界的丰富和平静吧。\n另外一个是反复无常的毛病要改一下，不要反复无常，像今天吃什么这个话题，比如吃冒菜还是牛肉面，抑或韩顺圆还是烧烤，这些都没啥问题。\n涉及婚姻这种大事，我觉得还是要仔细的思考一下，我又不是那种靠婚姻孩子想要栓住一个人的做派，是吧，还是少点随意的决断，毕竟双方父母也会时刻受我们俩的影响，这样不好。\n最后的最后，对于我给不了你安全感，我表示万分抱歉，我会好好思考以后的路该怎么走的。\n祝好，祝兔子公主在接下来的日子里可以幸福快乐健康美满的生活(最后一次使用兔子公主的title了)!\n小龟子-2024-11-17(最后一次使用小龟子的title了)\n","permalink":"https://blog.thend03.com/posts/end-of-relationship/","summary":"\u003cp\u003e始于2020-01-09，终于2024-11-15\u003c/p\u003e\n\u003cp\u003e其实我一直有感觉这一天会到来，只是没想到会这么的突兀。\u003c/p\u003e\n\u003cp\u003e再继续下去，可能会影响个人的判断和选择，消耗会大于成长。\u003c/p\u003e\n\u003cp\u003e分开，可能会更好的帮助我们回归独立思考，实现自我成长 。\u003c/p\u003e\n\u003cp\u003e我觉得此刻分开可能会是一个比较好的机会，我们双方都互相冷静冷静，思考一下，后面的路该怎么走。\u003c/p\u003e","title":"五年,最终落幕"},{"content":"October 东北见闻 国庆去了东北，见到了北国秋天，还不错\nhttps://blog.thend03.com/posts/northeastern-experiences/\n网吧 国庆太累了，后面还要忙，所以趁着十月初，先休息一下，将今年去网吧的额度用掉了\n难得的放松\n备婚 准备结婚了，所以10月底准备在积极备婚。\n首先是四件套+被子，南通家纺比较出名，所以，所以选择南通去南通逛逛\n南通有个微供市场，是个家纺城，里面卖四件套的，卖被子的，卖毯子的，各种都有\n顶着雨逛了一下午，采购了3床蚕丝被，和1床羽绒被，买了6床4件套，战果颇丰。\n周日去虎丘婚纱城，里面各种绣禾，婚纱，敬酒福，晨袍，妈妈装各种各样，很大一片场地。\n里面的价格从600-1500的比较多，挑了一个场馆逛了一下，逛了2，3层就逛累了。\n然后去到婚纱城的背面，有卖绣禾和婚纱的，这里面的货也会拿到婚纱城去卖，换个地方，价格就翻2，3倍了。\n果然门面的作用是挺大的。\nNovember 回家 月初回家，商量结婚细节，我去看场地布置，婚车，家里布置等。 她去联系跟妆摄影摄像等。\n回家还和我们的狗儿子狗闺女来了个合影，参加了她表姐家的婚礼。忙碌中带着充实\n拍婚纱照 11.9号这天是拍婚纱照的日子，拍摄地点是在无锡。\n一共是拍4套: 室内法式，送了几张喜嫁，园林一套，公路一套，山顶一套。\n早晨5:40起床，6点出发，7点钟到店开始选衣服，她选衣服，我去给车充电。\n8点左右选好衣服，到另一个地方化妆，8:30-9:30化妆，9:30-10:00开始搭配衣服\n我趁着这个功夫在那选衣服做搭配。\n我呢前一天头发没剪，趁着功夫赶紧去外面理了个头发，方便做造型，最终我得为我自己点个赞，还好理了头发，不然根本就没法拍。\n10:30左右正式开始拍室内了，1个多小时拍完了室内，也差不多到12点了。\n拍摄效率还是挺高的，摄影师经验丰富，我们也不累，听指挥摆姿势就可以了。\n拍摄过程中化妆师和助理全程陪同，帮忙打光，理衣服，理发型什么的，果然好看的照片拍出来是很费功夫的。\n中午1小时休息，吃午饭。\n下午1点左右开始出外景，第一站是惠山古镇，这个需要买门票，70/张，在里面拍了2个景就结束了。是有点费钱的。\n第2个外景是公路，在太湖边找了个公路拍的，和我们的车做了合影留念。\n第三个景是山顶，在江阴花山拍的，4点出发，5点才到，然后花了1个小时上山拍摄，记录下了山顶美好的一幕。\n六点左右就结束拍摄了，效率确实高，然后返回无锡店里，拿我们的东西，吃晚饭。\n8点多开始选片，要从200多张压缩到50张，还是挺费劲的，要是按照帮我们选片的那个人的选法，至少要多花5000块钱在选片上。\n只能自己下狠手，压缩到了55张，多出了一点，当选片到大半夜的辛苦费。\n10:30开始回苏州，大概要1个小时，最后十分钟，开车开的困死我了，还是尽量不要疲劳驾驶，不安全\n晚上11:30回到苏州，洗漱一下，今天特别的累，至少有16个小时在奔波吧。\n不过效果倒是还可以，辛苦也值得。\n分手 11.9号开心幸福的拍完了婚纱照，11.11号就开始酝酿分手。\n虽然我一直在准备着这一天，我怎么也没想到，会在结婚提上日程，大框架定的差不多的时候，在刚拍完婚纱照不久，彻底的分手了。\n说来说去，还是我自己能力不足，体谅不够，做的不到位吧，有缘无分，希望我们2个后面都能幸福，健康，收获成长。\n祝好\n","permalink":"https://blog.thend03.com/posts/2024-q4-summary/","summary":"\u003ch2 id=\"october\"\u003eOctober\u003c/h2\u003e\n\u003ch3 id=\"东北见闻\"\u003e东北见闻\u003c/h3\u003e\n\u003cp\u003e国庆去了东北，见到了北国秋天，还不错\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://blog.thend03.com/posts/northeastern-experiences/\"\u003ehttps://blog.thend03.com/posts/northeastern-experiences/\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"网吧\"\u003e网吧\u003c/h3\u003e\n\u003cp\u003e国庆太累了，后面还要忙，所以趁着十月初，先休息一下，将今年去网吧的额度用掉了\u003c/p\u003e\n\u003cp\u003e难得的放松\u003c/p\u003e\n\u003ch3 id=\"备婚\"\u003e备婚\u003c/h3\u003e\n\u003cp\u003e准备结婚了，所以10月底准备在积极备婚。\u003c/p\u003e\n\u003cp\u003e首先是四件套+被子，南通家纺比较出名，所以，所以选择南通去南通逛逛\u003c/p\u003e\n\u003cp\u003e南通有个微供市场，是个家纺城，里面卖四件套的，卖被子的，卖毯子的，各种都有\u003c/p\u003e","title":"2024四季度总结"},{"content":"高德地图，东北地区足迹+N。\n国庆原本的计划是去东北看秋天，行程经过反复的放弃，拿起，最终还是去了，东北我们来了。\n前期准备 和往常一样，也准备了一些前置工作，包括路线行程规划，要带哪些东西等\nhttps://docs.qq.com/doc/DWUJjeG9DSVFXbWhM\n准备了2套方案，一套是租车自驾小兴安岭，但是时间就比较紧张。一套是坐高铁飞机等，不自驾，这样就能去更多的地方了。\n由于东北太大，靠飞机出行比较便捷，但是国庆假期前几天，机票价格实在是贵。\n所以本次行程，只提前买了去程的机票，其他的都等到落地东北再决定，主打一个随机应变。\n太灵活有好处也有坏处，下面再说\n出发去大连-东北小香港 交通路线 1号出发，行程就此拉开序幕。\n比来比去，发现的最便宜的一趟航班是南通-大连的。\n和南通机场总有不解之缘， 去年去川渝也是从南通出发南通回的，今年也是，maybe确实是周边最便宜的机场了吧\n但是去年出发的时候，低估了过江的威力，平时2小时的车程，那天早上硬生生4个小时还没过江，最后是放弃了顺风车，坐的汽渡过江的。\n今年吸取了去年的教训，买的高铁票过江，常熟到南通，过江路线就变成了苏州-\u0026gt;常熟-\u0026gt;南通-\u0026gt;机场，通过顺风车+高铁+打车解决了过江堵车的问题。\n坐高铁过江只需十来分钟即可，彻底解决堵车之忧。\n为我们的思路打开点赞。\n在南通市内还抽空看了个电影，果然近些年票房降低是有原因的，让人有看的欲望的电影并不太多。\n最后选择了看浴火之路，刘烨肖央赵丽颖主演，讲拐卖孩子的，前面都还正常，最后一段有点浮夸，总体还行。\n然后就是晚上从南通到大连了，落地大连机场，拉开国庆序幕。\n兔子公主一直觉得1号半天在南通浪费了，但我觉得节奏刚刚好，实际情况也是，大连根本不值得逛那么久，半天中转足够了。\n晚上我们打出租去了定的公寓酒店，这种也就实际过一夜，没啥体验可言，在外住宿的话，凭我的感觉来说，还是优先选择连锁或者高端酒店，旅行体验会好很多。\n大连印象 我们住的是大连的星海广场，像是大连的CBD。\n出租车师傅说大连有东方小香港之称，在夜色里漫步的话，看着星海广场附近，鳞次栉比的高楼，和香港的建筑风格很像，只不过大连的楼比香港的新很多，没有香港那么老旧。\n不仅是写字楼是高楼，住宅大多也都是高楼，密密麻麻的，让人头疼不已。\n房间是公寓楼的房间改的，里面摆了3张床，还是个套房，索性今晚只有我们2人住，还行。\n办理好入住之后，我们就去找夜市吃海鲜烧烤，跟着出租车司机的推荐去了太原街夜市。\n夜市和我期待的不大一样，不是沿路摆摊的热闹的场景，而是一家家的店铺，路上比较冷清，没啥人，都在店里。\n我们浅试了一下海鲜烧烤，味道还不错，价格么就没那么美丽了。\n然后我们就去了星海广场的观景台去看一下了，晚上的大连还是有点冷的，附近有一些年轻人在玩耍，果然也只有年轻人才能扛的住冻。\n晚上看不出啥景，观景台前面就是海，对面是跨海大桥，有一个起飞的雕塑，我们在雕塑的高点拍了些照。\n然后乘着冷风和夜色回去休息了。\n该说不说的，这个公寓楼位置确实不错，能看到整个星海广场\n第2天上午，我们起来去星海广场压马路了，整个星海广场是一个大圆盘，一圈绕一圈的，真的是个体力活。\n在广场上可以看到海鸥子，但是不知道是什么品种，没有拍到和昆明差不多的效果。\n和昨晚同一个位置，打卡了白天的角度\n整体上游客还是挺多的，整个星海广场人声鼎沸的。\n从这个视角看，山下的高楼，确实有点香港的感觉\n绕道了另一面，走了一个圈，结束了在星海广场的city walk。\n本来打算去吃一下喜鼎的海胆水饺的，但是没读懂取号规则，上午的号都放没了，接待能力不足，当然也可能是饥饿营销，没吃上。\n后来休息了一下，去西安路看一下，西安路是个夜市街，可惜没有时间了，只能白天逛一逛了。\n西安路看着像是老城区，很是热闹，我们在地下小吃广场，吃上了不正宗的海胆水饺，10个水饺40块，然后里面是海胆和猪肉的馅料，不是纯正的海胆。\n血亏加体验海胆失败。\n后面我们又找了一家日式鳗鱼饭，鳗鱼饭是酸甜口的，味道还可以，但是酱料的味道比鱼的味道要足，价格也不那么的便宜。\n说是大连的日料比较正宗，确实是大连见到的日料店比其他地方会多一点。\n最后来说一下大连的民风，在大连滞留不到24个小时，发生了2起口角，一起是在半夜12点，在公寓楼，一群人围在那吵吵闹闹的，估计还喝了点酒，有人醉酒。第2起是白天，在路边停车干起来了，不知是个例还是个例还是个例。\n吃完鳗鱼饭，就结束了在大连的旅程，市区到机场的路途还是很近的，打车10来分钟就到了。\n接下来就开启我们的第2段行程，牡丹江。\n牡丹江-北国秋光 牡丹江中转 研究了一下机票，从牡丹江去漠河和抚远，机票和时间比较合适，加之牡丹江籍的朋友推荐，所以我们选择了第2站到牡丹江。\n探访一下牡丹江这座北方城市。\n不得不说，牡丹江是整个旅程中超出预期的存在，给我们不少惊喜。\n感谢谢总的热情，提供了非常专业且全面的攻略\n北国秋天 从大连坐飞机到牡丹江，这2个地方，一个在辽宁的最南方，一个在黑龙江的腹地，不一会就真的跨域了东三省了。\n我们落地了牡丹江的机场，这个一看就是个小机场，机场虽小，却是我们接下来几天的重要中转站。\n机场大巴10元一位，可以去往市区火车站，我们也就坐着机场大巴来到了牡丹江市区里了。\n大巴在路上，停在了一个路口，我向窗外望去，金黄色的树叶映满眼帘，勾起了我那远去的儿时记忆。\n我印象中小时候的秋天也如这般金黄，阳光洒在树叶上，分外安逸，老家小乡村经过发展，确实变得方便现代了，\n但是路边的白杨树都被砍完了，再也没法重现小时候的场景了。\n到达牡丹江火车站，火车站就坐北朝南，屹立在城市的中轴线上，有点霸气的感觉。\n订的酒店就离火车站5分钟，这个倒是感觉和淮南的体验差不多，商业基本上都集中在以火车站为中心的老城区了。\n酒店喜迎国庆假期，也涨价了不少，果然国庆只要出门就得多花点，促进经济消费了，我俩是个大好人。\n牡丹江的美食 办好入住，也差不多是晚上了，天要黑了，我们就准备去觅食了。\n门口有卖这种果的，不知道是啥，有大小2种，有的甜有的酸，整体味道还可以\n得益于有一个牡丹江本地的朋友，我俩本次行程，只能说全靠伸手就解决了，东北爷们和姐们真的太热情了。\n给我们推荐了牡丹江的景点，牡丹江的美食等等等等。\n我们按照他的推荐，去尝一尝牡丹江的当地美食。\n酒店就在东一步行街上，城市的中心，里面人声鼎沸的，大部分的商业我感觉都集中在这一块了\n然后还有出售房产的，见惯了以万为单位的房价，楞一下没算出来单价是多少，计算器算一下是1500/平\n正式进入觅食阶段。\n第一站是粟氏天府，是家烧烤店，看着像是川渝风味的，这个不同于大连的海鲜烧烤，恢复了肉串烧烤的荣光。\n我们浅尝了一下，味道还不错，等我们吃得差不多的时候，店里已经开始排队等坐了，生意好的很，感觉东北小县城的人确实惬意。\n结帐之后就去对面，探索下一家店面，就在同一条街上，也很方便。\n这家叫林福宫，是韩餐，朝鲜族人开的店，牡丹江据说是朝鲜族人比较多的，所以韩餐会比较多。\n上一家已经开始排队了，在林福宫也不能幸免，我们先取号，此时大概是6点，取的号是20号，要等20分钟左右，于是我们打算先去另一个地方。\n另一个推荐的是十六中烤冷面，说是当地的特色，开了不少年了。\n按照导航过去，店里已经排起了长队，一队做堂食，一队做外卖，各种外卖超时，店里排队超时，忙的飞起，真的累。\n我们排了有半小时左右，终于吃上了，价格倒是不贵，不过这个烤冷面应该是加了很多番茄酱，有点橙红色的。\n然后回林福宫继续排队，过号了，然后又重新取号，还是得20分钟左右，然后我们就寻思去朋友之前参与过的咖啡馆看看。\n咖啡馆藏在步行街2边的老街里，不知道的话估计只能靠运气碰见了。\n这个是标准的日咖夜酒，晚上是酒，我们点了2杯酒，名字比较优美，我点了一杯晚婚，味道酸酸甜甜，好喝。\n在东北过上了晚上小酌一杯的日子。\n老板知道了是他的朋友的朋友，给我们送了一份韩式炸鸡，实在是太过热情了，也没吃完，实在是太撑了，打包带走。\n我们又回到了林福宫，今晚势必要吃上这家，还好此时已经8点多了，店里没什么人了，我们顺利的吃上了。\n点了2个菜，冷面粉条和锅包又，每个菜都很大，我的头已经够大了，每个菜盆比我的头还大，实在是吃不完。\n锅包肉和我之前吃过的都不大一样，其他的是金黄色的，而这里是偏白的，酸酸甜甜的，太好吃了，最后实在是吃不下了，放弃。\n今晚历时3个多小时，终于把牡丹江比较有代表色的美食吃了，还可以，没有一个踩雷的。\n路上看到了丰茂烤串，既然开到苏州了，那就到苏州再吃吧\n路边不少的俄货店，估计都来自不同的口岸，比如黑河口岸，绥芬河口岸等，哈尔滨的俄罗斯商店更加的多\n开始下一个环节，澡堂子。\n北方澡堂子 之前一直听说北方的澡堂子如何如何，今天终于有机会见识一下了。\n我们选择的是牡丹江的头牌，夏威夷。\n价格么中规中矩，和在苏州洗的差不多，不过更加精致一点。\n没有那么的惊艳，可能东北澡堂子还有其他花活，以后有机会再体验。\n女澡堂子那边就有点贵了，给南方小土豆上了最高端的套餐，兔子公主直呼上当，阿西。\n整体上和苏州的澡堂子设施流程啥的差不多，初次体验，在澡堂子里休息一下，结束了疲惫的一天。\n横道河子-极致惊喜 横道河子隶属于黑龙江省-牡丹江市-海林市-横道河子镇，有东北小北海道的美称。\n目前秋天风景正胜，比昨天看到的秋景更加的美丽。高铁上都能随时见到美丽的秋景\n亲爱的和我说之前，我完全没听过这个地方，但是这个地方还挺有名的，是我孤陋寡闻了。\n牡丹江有高铁可以直达横道河子，还挺方便的，高铁站出租，5元一位，明码标价，童叟无欺，就可以到虎园，镇里等地方。\n到站之后，入眼都是桦树林，金秋好时节，光照明媚，好看\n我们拼了个车就吭哧吭哧往镇子入口去了，横道河子在老早之前是有俄罗斯的铁路的，至今那个铁路还在运行着，所以俄罗斯风情也是当地特色。\n景点是在公路下面，沿着下坡路一路往里去，就到镇上了。\n从油画村到中东铁路博物馆，再到俄罗斯风情街，看到了俄罗斯+北国秋天的组合。\n俄罗斯在逃公主 俄罗斯风情街有出租俄罗斯公主服的，我为兔子公主挑了一身公主裙，在横道河子里和秋景做了一次深度合影。\n在中东铁路局，和可能是上个世纪的火车站合了影，神奇的是这个火车站还在运行中，还有缓慢的火车驶过。\n期间在老火车站，还被海林市文旅局拍了一下，做了简短的采访，可惜没播出来。\n后又向着群山出发，在老石桥上，在溪流之上，俄罗斯大公主和横道河子的秋一起留下了美好的回忆\n把美好的回忆留在北国，留在横道河子。\n横道河子的美食 横道河子属于小景点，国庆人又多，中午饭点，家家爆满，我们按照推荐名单，走了好几家店，穿过火车底下的隧道，终于找到一个座位，吃个饭太难了。\n点了当地特色，筋饼，感觉像是打薄了的煎饼，另外是干豆腐，就是千张了，还有一个京酱肉丝，这个肉丝略咸，肉质略柴，一份菌菇汤，好大一份，根本喝不完。\n总体来说，还不错，吃上了当地特色\n小老虎玩具 在准备出横道河子的时候，扫街，扫到了一家店，里面有一对老虎玩具非常的不错，然后斥资买下之后，拎着小老虎一路走过了万水千山了属于是。\n不得不说，这个玩具和虎园里老虎的肤色还挺像的。\n从横道河子拎到哈尔滨再回牡丹江，去漠河，闯抚远，到长春，飞南通，回苏州，陪了我们一路了。\n硬核徒步 没想到今年的徒步，被迫在横道河子实现了。\n横道河子美丽是美丽，但是就是个小地方，人一多就爆炸了，国庆前期人尤其的多。\n下午出去的时候，堵车了，交通当场瘫痪，我们打算去东北虎林园参观一下的，总计4公里，然后开车要1个小时20分钟，走路1个小时4分钟。\n考虑到车次的问题，我们又想去看一下东北虎，所以我们开启了艰难的时刻，徒步4公里。\n果然和导航一样，走路比车快，路上有2，3个人也选择了徒步，在逛了一上午之后，还能支撑着我们走4公里的路，就只有那坚定不移的看老虎的信念了吧。\n之前都是坐车，风景一闪而过，现在就有时间慢慢的看风景了，沿路都是山林，分外美丽，咬牙坚持继续走。\n终于，在历经一个小时的磨难后，到达了虎园门口\n东北虎林园 虎园里养着好多的东北虎，好像是东北虎的繁殖培育基地。\n我们买了车票，坐在全副武装的车里，闯进了野生虎的生活圈，看着老虎围着车围观。\n在里面逛了没一会就出来了，外面是圈养的老虎。\n有的笼子设置了喂食口，可以购买食物投喂，老虎还挺聪明的，不会被签子弄伤了。\n东北虎的身材看着老威猛了，不愧是老虎王。\n在参观了一下之后，我们正式结束了横道河子的行程。\n好歹这会交通恢复了，打个出租到高铁站，虽然虎园和高铁站在一起，但是筋疲力尽的我们，唯有打车才能拯救我们。\n林海雪乡 其实横道河子还有一个著名景点，林海雪乡，不过那是冬天的事了，没秋天啥事，或许以后有机会会专门来一趟吧。\n哈尔滨-松花江上游 本来是打算下午到哈尔滨好好逛逛的，结果横道河子堵车，时间赶不及，被迫改签，到哈尔滨都晚上了。\n在路上再次欣赏窗外的秋景\n哈尔滨站的边上就是美丽的松花江，此刻我该吟诗一首: 我的家在东北，松花江上游。\n我们就打算在中央大街浅逛一下了。\n不知道哈尔滨的出租车司机，之前做过什么骚操作，朋友推荐我们不要坐出租，宁愿加钱打滴滴，我: emo\n中央大街 我对中央大街的第一印象是，这条街上起码得有1亿人吧，人潮汹涌，川流不息的。\n南北主干道，每个铺面都是人，还有主路上，那人头攒动，根本数不清。\n尝了一下哈尔滨红肠和格瓦斯，味道还可以。\n再来一根马迭尔雪糕，非常的modern\n我们按照攻略去找吃的，不是没号了，就是没菜了，啥啥都没了，真的是东北量很大，但是吃不上也白搭。\n得，在中央大街上左逛右逛，最终吃了米线，那也是有的吃不是，避免饿肚子。\n在中央大街又逛了接近2个小时，回去睡觉了，中转的体验一点都不得劲。\n酒店往下拍，能看到松花江，不过看的不那么清楚\n红专街早市 第2天早上，有1点时间，我们去早市逛一下，就在中央大街边上，倒是不远。\n要是昨晚中央大街有1亿人的话，此刻的红砖街早市，我感觉有3亿人，人和人挤在狭小的街道上，到处都是人头。\n我们随便看了一下，每个队都是不能排的动，后面找了个沿街的，人不是太多的，简单的吃了点羊汤，快速离开了红砖街。\n我感觉南京的夫子庙，人流和哈尔滨中央大街比起来，还是略差一筹的，我以后再也不黑夫子庙人多了。\n好吧，结束，在哈尔滨感觉啥也没逛到，啥也没吃到，愁人。\n再回牡丹江 一大早的机票经历凌晨航班取消，7点又恢复的，还好没退票，不然行程就被耽搁了，时间上不允许了。\n这次是最后一次回牡丹江中转了，下次再来牡丹江就是在下次了。\n去吃了老邮差麻辣烫，东北的麻辣烫，感觉也偏麻偏辣，有点重口。\n吃完麻辣烫之后，再次回到了咖啡馆，白天是咖啡了，和老板又打了招呼，老板这次送了个冻梨汁，冻+甜，特色。\n谢总摇了当地的朋友，给我们送去了机场，感谢王老师，感谢谢总，感谢谢总准备的牡丹江特产，路上当零食吃。\n感谢成都航空冬季航线，为我们的出行提供便利和便宜的机票。\n从高空往下看，大片的良田，果然东北还是良田多呀\n天气好，高中中有厚厚的云层\n但是我有点不大理解的是，有人从牡丹江买机票到哈尔滨，在漠河中转，这样一趟至少要5小时，百思不得其解，高铁只要1个多小时就到了，也不贵，百思不得其解。\n再见牡丹江，下次再来可能就是下次了。\n漠河-中国最北方 东北来都来了，怎么着也得去中国最北极打个卡了，然后我们就出现在了漠河，还好提前带了羽绒服。\n在机场换好羽绒服，准备出站\n最北点还在更北方，北极村，北红村是比较知名的2个地方。\n北极村到北红村还有100多公里路程，其他的景点离的都很远，如果深度游玩的话，可以选择包车，这样会方便不少。\n机场去北极村，大概80公里，明码标价240，价格还可以了，谈价的话还能适当优惠一点。\n牡丹江还在秋天，漠河已经入冬了，不一样的体验了。\n坐着出租，一路向北，萧瑟的公路两边，松林的叶子都掉的差不多了，一片肃杀之气。\n路上的还没啥人，孤零零的路上只有几辆车，还好是到的早，不然天黑到机场，走夜路简直不敢想。\n驯鹿园 我们一路向北，在司机的推荐下，去了路边的驯鹿园，去喂食，驯鹿长的还怪好看的。\n北极村 一个多小时之后，在天黑之际到了北极村，门票68，啥还没干呢，先交个过路费。\n北极村商业化做的比较好，除了天气冷一点，其他没啥区别。\n入住了里面的酒店，人生求索，岁月流金，寓意非常的好，感觉是我们本次行程酒店的天花板了。\n酒店房间挑高得有4-5米，看着空间感特别足，房间也贼大。\n入住之后我们就进村子里溜达一下了。\n小红薯+实地考察，挑了一家店，便宜是便宜，就是菜的味道一般，那个小鸡炖蘑菇，油腻腻的，鸡肉质也不大行。\n吃完就围着村子逛了起来，最北邮局停业施工。有一个供销社，里面卖着一些生活用品，一些老大爷在里面聊天，巴适吧。\n最北农商行\n再往北走就是没什么路灯的非景区了，我们绕了个圈，走在水泥路上，看着一户户房间，感觉回到了2，30年前小时候的场景了。\n走了一个多小时，绕到了主路上，路边就是黑龙江了，这条江真的叫黑龙江，和省齐名，可惜天太黑了，看不大清楚。\n绕回热闹的地区，有个七星广场，这是重金打造的观景台，上面散发着各种人造污染光源，本来我们是奔着极光来的，可惜天公不做美，只能看到人造光。\n广场边上有一家卖文创的，我们买了点明信片，当作漠河的纪念。\n在这看到了隋唐城遗址植物园，追溯到4月底我们闪现洛阳，追着春天的尾巴，看到了牡丹\n最后的最后，听说下雪了，出来一看啥也没有\n北极村今晚就这么的逛完了，休息，明天再战。\n酒店的自助餐和外面差不多，还不错，吃完了早饭之后，我们就该规划返程了。\n在村口和另一对情侣拼了个车，去漠河县城，看一下漠河舞厅。\n昨晚公路上有一小截下起了雪，这是我们今年第一次见到雪，还挺开心的。\n漠河舞厅 到了漠河舞厅之后，当地说这个舞厅搬迁了好几次，最终落在了现在这个地方。\n我们大概是第一波客户，进去之后，舞厅里循环播放起了各种版本的漠河舞厅，诡异的是没放柳爽的版本，不知道是啥原因。\n待了一会，有人能放开之后，就有人可以在那唱歌了，秒变ktv。\n我和亲爱的兔宝在漠河舞厅里随着歌声跳起了舞，虽然没有舞蹈天分，主打一个氛围，鼓掌。\n森林公园 在里面待了一会后就出来了，整个漠河人口大概2万人左右，在往里走是市政府所在地，边上有一个公园，好像是叫松苑，这个公园有年头了，里面都是参天的松树，是个当地休闲的好去处。\n路边有卖蘑菇和果子的，虽然辛劳，但是这些东西品质没有什么保证，还是少买，容易踩坑。\n再吃一根冰棍，我们就要离开漠河了。\n从机场出发，前往东极-抚远\n抚远-中国东极 漠河属于中国的北极，抚远就是中国的东极了，在黑龙江，逛遍北极和东极。\n从漠河坐飞机到抚远，机场大巴15元一位，离市区也挺近的。\n行程整体上和这个差不多\n我们这次住的是青旅，也是这次行程离的唯一一次民宿。\n店名是最东青年旅社，店里貌似就俩人，一个老板，看着有点严肃，30多岁，和来了几次的一个游客聊了一下，说这个老板来了几次之后，就在这里留下了，开了这家青旅。\n还有一个司机，看着5，60了，叫官叔，我俩猜测是退伍的老兵，官叔给我们的印象挺好的，值得信赖。\n市中心的地势有点高低不平的，往前1，2公里就是江，风景挺好。\n店里提供拼车服务，我们和另一家子拼了个车，青旅的拼车路线规划的挺好。\n所以这种路线还是找个当地的包车服务，会逛的舒心一点，路线规划合理，时间不浪费。\n路线如下：\n当天下午去江边看风景，然后夜幕降临去凤鸣阁看夜景。回去吃饭睡觉，第2天凌晨4点起床去看日出。\n看日出的地点是东极广场，离市中心40公里，没个车还挺费劲的。\n看完日出会去抓吉逛一下最东邮局，还会去东方第一哨参观一下，是个哨所\n看一下赫哲族的民族特色，抓吉吃早饭\n吃完早饭去黑瞎子岛看熊，看熊大概3-4个小时\n最后一站是去看一下抚远的蔓越莓生产基地，数不尽的蔓越莓，漂浮在水面上，红彤彤的\n江边日落 入住的是一个东北大花炕，里面确实有炉子，只不过没有那么冷，所以没开，整体房间就比较一般了，青旅吗，要求就不用那么高了。\n然后官叔开车，带我们去江边看落日，感觉官叔特别能懂游客的心思，一直在介绍哪里拍照好看，哪里光线好，适合拍照，拍照拍照拍照。\n我们在江边拍了一会，去的是个支流，对面就是俄罗斯，不得不说，虽然光线差了一点，但是呈现在眼前的景色真的美。\n一开始不知道为什么4点就去看日落，后来想想，北方，靠东边，确实黑的快，5点就彻底黑了。\n在江边待了一会之后，就出发去下一个地点了，东极阁。\n东极阁 东极阁建在山上，适合看夜景，但是风也太大了，不适合待太久，山也是个小山，上去大概十几分钟吧。\n站在山上，看抚远的万家灯火\n从山上下来之后，天也黑了，该去吃晚饭了，返程回去，结果家家店都爆满，据说前几天人更多，饭点更吃不上饭。\n吃不上的晚饭 我们几家绕来绕去，最终在一家店等到了位置，吃上了抚远特色大马哈鱼，可惜炸出来的鱼，不大好吃，不知道是不是我们吃不惯。\n感觉在东北的晚上，很少能吃上晚饭，东北菜量大是大，排不上趟呀。\n中央小街 吃完去中央小街逛了一下，没错，这条街就是这么的奇怪，感觉在蹭中央大街的热度。\n抚远的夜生活也有点匮乏，有人围在那表演节目，还有俄罗斯人在那卖烤串，20/串的猪肉大串，吃不惯，放弃。\n逛到了另一条街上，买了个来自前哨的西瓜，不大甜，但是便宜，1块/斤，就这样吧\n逛的也差不多了，回去睡觉，9点入睡，真够早的，为早起养精蓄锐。\n东极广场 凌晨3点半准时起床，4点出发，果然还是得摸黑起床啊。\n越往东极阁那边靠，车越来越多，5点左右到达东极广场的时候，广场上已经站了不少人在那挨冻了。\n广场上竖立着一个柱子，东极的地标，江的对岸就是毛子的地盘，住了不少的人。\n今天天气不大好，没看到日出，我们守了一个多小时之后，没守到，就走了。\n​\n出发下一站\n乌苏镇 乌苏镇，没有人口，说是之前因为战争，人都没了，只剩下一块碑，记载着乌苏镇的存在\n东方第一哨 乌苏镇和东方第一哨在一起。\n我们被带着去参观了一下东方第一哨，远东第一哨所，狗看到了官叔都不叫了。\n里面估计有解放军站岗，我们简单参观一下就出来了。\n向解放军致敬\n最东邮局 在最北邮局，没寄出去的明信片，在抚远实现了。\n但是时至今日，我还是没收到我寄回来的信，不知道跑哪去了\n要不是有本地人带着，根本都找不到这个邮局。\n6点多邮局就营业了，我们在邮局挑选了一些明信片，都是盖了章的，一部分明信片通过邮局寄出，寄回家\n截止到目前，还没收到呢，我得去查查，我的明信片走到哪了， 阿门\n最东邮局在抓吉，顺便逛了下抓吉镇，真就去打了个卡就结束了。\n吃早饭的时候据官叔说抓吉镇的人自己把自己的名声做臭了，没人会往抓吉带人了。\n做旅游生意的，还得是诚信经营，做长久生意呀。\n黑瞎子岛 下面就是我们本次行程的重头戏-黑瞎子岛了。\n黑瞎子岛中俄两方共同开发，有一半是属于中国的。\n里面分为3个景点，军队遗址，湿地公园，黑瞎子园。去各个景点都需要坐景区的观光车，里面还是挺大的。\n不管在东北的哪，都得来一个马迭尔雪糕\n军队遗址没啥可逛的，是之前俄军的宿舍，老旧的房子。\n第2个景点是湿地公园，在湿地上架设了木栈桥，适合walk，有个1，2公里的木头栈桥，风景挺好，阳光明媚，令人舒适。\n第三站是东极宝塔，在景区里面搭了个塔，里面都是以传统文化和元素为基调的\n第四站就是重头戏了，来到了我们的目的地，黑瞎子园，里面说是有上百只黑熊。\n照例还是坐全副武装的车进去，里面就是黑熊的生活地带了，黑熊竟然还吃玉米，车上设有多个投喂口，方便游客喂食。\n前半截的黑熊吃的饱极了，游客也多，扔的玉米够他们吃一阵子了，每一个地方都有三三两两的黑熊扒车要吃的。\n中间地带有个观景台，可以看到一些黑熊在下面活动，有些吃的饱饱的，看到吃的也不想动了。\n但是最后一截就比较凄惨了，由于玉米基本在前半截扔完了，所以后面的熊 扒车也扒不到啥吃的，只能吃的玉米粒，太惨了。\n整个黑瞎子岛景区全程逛下来大概要3-4个小时，里面太大了，每次坐观光车都得坐个15-20分钟的。\n逛下来还可以，沿途看到了2，30只圆滚滚的黑熊，有大有小的，不虚此行了。\n蔓越莓基地 最后一站是抚远的蔓越莓生产基地，这里据说是亚洲最大的蔓越莓生产基地了，水面上漂浮着大批的蔓越莓，红彤彤的。\n蔓越莓采摘是大水漫灌，都漂浮在水面上，然后用网筛的，采摘方式还挺别致的。\n蔓越莓的口感是酸的，一点都不甜，怕酸的简直难顶。而且价格也贵，130/斤，一小盒卖30，简直是离谱。\n在抚远起的早，所以感觉时间格外的长，只要你凌晨4点起床，你的早上时间将会多4-6小时，手动狗头。\n铁锅炖 逛完景点之后，回到市区，薅了个和我们一起逛的东北小哥，去吃了铁锅顿，实现了在东北的第一顿铁锅顿，不过不是炖大鹅，而是炖排骨，味道也还可以了。\n感谢东北小伙子凑了一桌。\n摸余咖啡 后面我们又去摸余咖啡喝了个咖啡，没想到我们在假期还得去摸个雨，体验圆满。\n卧铺直达哈尔滨 喝完咖啡之后，就准备返程了，返程是去哈尔滨中转。\n要从抚远坐14个小时到达哈尔滨，卧铺睡一夜。\n一开始还纳闷为什么这班这么难买，上车才发现都是眼神清澈的大学生，原来学生们也该返校开学了。\n从抚远开到哈尔滨，十几个站，看着那些大学生，年轻真好。\n我们在车上薅了几个男大一起打牌，掼蛋还没打完就熄灯了，没打到翻山，10点就熄灯了，作息规律真好。\n不得不说，硬卧是真的难受，分为上中下铺，每个铺抬头都困难，只能平躺了，还是得感谢高铁。\n第2天7点多到哈尔滨，可惜也没时间在哈尔滨逛了，即将离开哈尔滨，去往下一站了。\n长春中转 哈尔滨坐高铁去长春中转，车上也有不少拎着箱子的，到处都是开学的。\n高铁到长春也方便，我们到长春之后，找了朋友推荐的地方，吃上了酸菜排骨和五花肉，味道确实不错，不枉跑了老远。\n最后在长春又洗了一次东北澡堂子，和牡丹江差不多。\n我们在休息区点上了外卖，吃的不亦乐乎的，这里外卖能送上来，确实不错，在长春的澡堂子简单的 休息了一下。\n下午时间到了，准备去机场回去了。\n返程 长春有一个不好的地方就是，机场离市区太远了，临时打车太贵了，去机场得有40公里，临时坐机场大巴又来不及了，血亏。\n其他的城市，哈尔滨不清楚，大连，牡丹江，漠河，抚远机场离市区都挺近的。\n时间倒是卡的准准的，到达机场，飞南通，南通打个顺风车回去，折腾了一点，不过价格倒是便宜了不少，最终在凌晨12点之前到家了。\n本次东北之旅告一段落，开始收心，继续坐牛马了，加油，新的一周。\n足迹 使用高德地图，简单做了个足迹，展示了国庆在东北的路线\n在路上 从第一天出门开始，就想找个角度凹一个我们出发的记录，凹了一路，从未放弃\n小区的电梯\n机场里\n登记通道里\n酒店全身镜\n旅行小tips 机票 关于机票，一个是出发的地点和落地的地点，一个是买的时机。\n像国庆五一这种热门假期，很多人行程都规划好了，所以机票前1，2周都是比平时贵不少的。\n但是近2年有1个现象就是你提前花高价买票，但是临近出行，是有可能价格下降一大截的，没看到还好，看到了就会很糟心。\n所以我们这次也没有提前把去程和返程都买了，只买了去程，路途中间路线和返程机票都是在假期中随机应变的。\n有个好处就是可以随意变更行程，坏处就是不买返程，可能就回不来了，还好我们这次运气好，还能买到回来的票。\n去程我们买的时候比较便宜的，但是临近的时候反倒涨了一点，所以买票的时机要看准，前期比较便宜了，且行程不变，就入手，就算机票降价也不会难受的那种就先下手为强。\n另一种是觉得高了，就每天一刷，看看有没有降价，有降价就赶紧入手，我们买返程机票的时候就是这样操作的，每天盯着，4号的时候价格最低，想等看看能不能再便宜，结果5号上午就涨了300块钱，5号中午又涨了80块钱，这找谁说理去。\n另一个是起飞点和落地点的选择，我们人在苏州，苏州的一大特色就是梅友机场，我们看机票一般会想到无锡和上海，但是经过我们几次的观察，南通飞的话价格会便宜一点。\n我们看机票的时候，要去东北，但是东北太大了，于是组合看了一下，到哈尔滨/长春/沈阳/大连的机票，发现大连机票还可以，就先去了大连，到大连之后再选择飞机/高铁出行。\n一次性用品 这次出门，买了很多的一次性的内裤袜子，由于假期比较长，所以准备了大量的一次性内裤袜子，日抛，不用担心洗和携带的问题，长途旅行必备佳品。\n其他的一次性四件套太占地方了没带，一次性马桶颠和一次性毛巾带了一些，以备不时之需。\n水杯 长途旅行一个水杯是要的，可以接点热水备着。我们基本上是在机场/火车站里接热水，沿路喝，倒也方便。\n背包 这2个包是我们之前去云南的时候买的，那个时候箱子去虎跳峡徒步，所以买了这2个包，后面23年去了武功山徒步，也是背着这两个包， 今年出行又派上用场了。\n背个包，说走就走，一个是整理方便，另一个是不用托运，不用手提，比较方便，就是背着久了会累一点，不过这个就当负重锻炼了。\n羽绒服 虽然是秋天，但是抚远和漠河太远了，必须得备着羽绒服，尤其是抚远，风太大了，冻死了，羽绒服救我们于冷风中。\n租车 国庆期间啥啥都贵，都想伸一刀，本来想自驾小兴安岭的，结果国庆期间租车3天起步，每天光车费就得千把块，最终我们还是选择了公共交通，这租车的水实在是太深了点。\n整体印象 大连的高楼大厦太多了，我个人是不大喜欢的，本来就是从城市里出去的，高楼太多就和原本的预期不大相符了，当然了大连的经济发展的确实好，在北方属于头部城市了。\n对牡丹江的印象不错，有朋友的热心的攻略和推荐，而且人不多，北方小城市，不拥挤，适合游客，生活节奏也平缓，景色也优美，值得推荐。\n横道河子也不错，有俄罗斯风情，秋景也美丽，漫山遍野的桦树林，金黄色的树叶映入眼帘，美不胜收，值得去。\n漠河我们逛的不够深入，只是有一个打卡意义，北极村网红属性拉满，沿街其实和外面没什么大的区别，只是人口少一点，而且也没到冬天，没下雪，没那么的壮观。\n漠河县城也只有那么大，在漠河舞厅里回忆一下之前的热闹足矣。\n抚远也不错，遇到了个热心值得信赖的大叔，整体的体验挺好，路线时间规划的都挺合理的，看了那么多的黑熊，不虚此行，最后还买了黑熊玩偶带回来了，又是跨月了几千公里带回来的。\n哈尔滨就是人太多了，北方的省会城市，学校也多，学生也多，人就更多了，俄罗斯元素比较齐全，就是时间比较紧张，没有好好逛逛。\n长春作为省会，也还可以，整个城市挺大的，不得不吐槽的是，机场为什么那么偏远。\n另一个值得吐槽的点，感觉每天吃晚饭都很困难，排队排到怀疑人生，东西卖完的如此之快，都说东北菜量大，吃不上也白搭呀\n最后不得不感慨，东北的土地真的肥沃，坐火车或者飞机，朝窗外看，经常能看到大片的黑土地，一块块的，纵横交错，都是良田呀\n总结 整体来说，这次的行程比较紧张，虽说东北三省是一家，但毕竟是太大了，7天逛3个省，听着都累，每天都是极限特种兵。\n下次旅行，还是找个轻松点的路线，不然天天当空中飞人，也有点费劲的。\n好了，期待我和兔宝的下一段旅途。\n","permalink":"https://blog.thend03.com/posts/northeastern-experiences/","summary":"\u003cp\u003e高德地图，东北地区足迹+N。\u003c/p\u003e\n\u003cp\u003e国庆原本的计划是去东北看秋天，行程经过反复的放弃，拿起，最终还是去了，东北我们来了。\u003c/p\u003e\n\u003ch2 id=\"前期准备\"\u003e前期准备\u003c/h2\u003e\n\u003cp\u003e和往常一样，也准备了一些前置工作，包括路线行程规划，要带哪些东西等\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.qq.com/doc/DWUJjeG9DSVFXbWhM\"\u003ehttps://docs.qq.com/doc/DWUJjeG9DSVFXbWhM\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e准备了2套方案，一套是租车自驾小兴安岭，但是时间就比较紧张。一套是坐高铁飞机等，不自驾，这样就能去更多的地方了。\u003c/p\u003e","title":"东北见闻"},{"content":"","permalink":"https://blog.thend03.com/posts/%E5%88%9B%E4%B8%9A%E6%9C%AA%E5%8D%8A%E5%85%88%E4%BA%8F850/","summary":"","title":"创业未半先亏850"},{"content":"前言 最近看dubbo的时候，看到了讲spi的部分，其中提到了@Adaptive注解生成了代理类\n我后面去debug了一下，打了断点，发现在运行时，只是显示了class的名称，由于RegistryFactory$Adaptive 是动态生成的，所以没有class文件结构可以看，而文章里贴了class文件。\n所以比较好奇，如何拿到class文件。\n经过一番搜索验证之后，有了如下的文章\nJava生成代理类的方式 首先呢, java生成代理类有如下几种方式。\n在了解了动态代理的生成方式之后，可以分情况讨论如何拿到代理类的class文件\nJDK动态代理 这个是java自身支持的代理方式，自带的，无需引入额外组件，但是只能代理接口。\n因为生成的代理类需要继承Proxy类，java是单继承的，所以只能代理接口。\nCGLIB动态代理 cglib可以为class创建代理类，类不必是接口，采用的是继承委托类的方式，因此不能代理final类，只能代理所有非final的public/protected类型的方法定义。\ncglib是采用的asm字节码拼接技术，继承一个类，子类对方法进行拦截，织入横切逻辑。\nJavassist 使用javassist可以直接操纵字节码，生成代理类。\ndubbo的代理类就是使用javassist拼接出来的\nASM asm相比javassist，更加的细粒度，且实现更加的复杂。\nDubbo相关代理类的class文件 具体到dubbo的话，@Adaptive会生成相关的代理类，Dubbo的代理类是用javaasist生成的。\n再延伸到调用过程，consumer调provider，生成的代理类是jdk动态代理\nprovider端调用过程中，会有一个warpper代理类，生成的代理类是使用javassist生成的，然后通过Warpper0.invokeMethod()根据具体的调用信息调用到具体的实现类。\n本次使用的dubbo版本是3.2.0\n去年写了一篇关于dubbo spi的文章，感兴趣的可以看一下，介绍了spi的相关实现方式，以及如何使用\n具体到Adaptive代理类，使用如下的测试代码(完整的过程可以参考上面的文章地址)\npublic class DubboSpi { public static void main(String[] args) { ExtensionLoader\u0026lt;SimpleExt\u0026gt; extensionLoader = ExtensionLoader.getExtensionLoader(SimpleExt.class); // SimpleExt defaultExtension = extensionLoader.getDefaultExtension(); // SimpleExt dog = extensionLoader.getExtension(\u0026#34;dog\u0026#34;); // SimpleExt dog2 = extensionLoader.getExtension(\u0026#34;dog\u0026#34;, true); // SimpleExt cat = extensionLoader.getExtension(\u0026#34;cat\u0026#34;); // dog.yell(null, \u0026#34;dogdog\u0026#34;); // SimpleExt dog1 = extensionLoader.getExtension(\u0026#34;dog\u0026#34;); // dog1.yell(null, \u0026#34;dog1\u0026#34;); SimpleExt adaptiveExtension = extensionLoader.getAdaptiveExtension(); URLAddress urlAddress = new URLAddress(\u0026#34;127.0.0.1\u0026#34;, 20880); URLParam parse = URLParam.parse(new HashMap\u0026lt;\u0026gt;()); adaptiveExtension.echo(new URL(urlAddress, parse), \u0026#34;dogs\u0026#34;); adaptiveExtension.bang(new URL(urlAddress, parse),0); } } 定位到如下生成代理类的方法,代码在org.apache.dubbo.common.extension.ExtensionLoader#createAdaptiveExtensionClass\nprivate Class\u0026lt;?\u0026gt; createAdaptiveExtensionClass() { // Adaptive Classes\u0026#39; ClassLoader should be the same with Real SPI interface classes\u0026#39; ClassLoader ClassLoader classLoader = type.getClassLoader(); try { if (NativeUtils.isNative()) { return classLoader.loadClass(type.getName() + \u0026#34;$Adaptive\u0026#34;); } } catch (Throwable ignore) { } //这里生成class文件 String code = new AdaptiveClassCodeGenerator(type, cachedDefaultName).generate(); org.apache.dubbo.common.compiler.Compiler compiler = extensionDirector.getExtensionLoader( org.apache.dubbo.common.compiler.Compiler.class).getAdaptiveExtension(); return compiler.compile(type, code, classLoader); } 我们debug看一下生成的code, 看类名，是SimpleExt$Adaptive, 通过手动拼接的方式，生成了adaptive代理类。\n调用AdaptiveCompiler，最终compileer的类型为JavassistCompiler，即通过javassist生成的adaptive代理类\n那么回归到我一开始的问题，如何查看动态生成的class的内容，在String code = new AdaptiveClassCodeGenerator(type, cachedDefaultName).generate();这一行通过debug就可以拿到具体的class内容了\n生成的代理类如下所示, 对接口的方法进行了拦截\npackage com.fc.rpc.dubbo; import org.apache.dubbo.rpc.model.ScopeModel; import org.apache.dubbo.rpc.model.ScopeModelUtil; public class SimpleExt$Adaptive implements com.fc.rpc.dubbo.SimpleExt { public java.lang.String yell(org.apache.dubbo.common.URL arg0, java.lang.String arg1) { if (arg0 == null) throw new IllegalArgumentException(\u0026#34;url == null\u0026#34;); org.apache.dubbo.common.URL url = arg0; String extName = url.getParameter(\u0026#34;key1\u0026#34;, url.getParameter(\u0026#34;key2\u0026#34;, \u0026#34;dog\u0026#34;)); if (extName == null) throw new IllegalStateException(\u0026#34;Failed to get extension (com.fc.rpc.dubbo.SimpleExt) name from url (\u0026#34; + url.toString() + \u0026#34;) use keys([key1, key2])\u0026#34;); ScopeModel scopeModel = ScopeModelUtil.getOrDefault(url.getScopeModel(), com.fc.rpc.dubbo.SimpleExt.class); com.fc.rpc.dubbo.SimpleExt extension = (com.fc.rpc.dubbo.SimpleExt) scopeModel.getExtensionLoader(com.fc.rpc.dubbo.SimpleExt.class).getExtension(extName); return extension.yell(arg0, arg1); } public java.lang.String echo(org.apache.dubbo.common.URL arg0, java.lang.String arg1) { if (arg0 == null) throw new IllegalArgumentException(\u0026#34;url == null\u0026#34;); org.apache.dubbo.common.URL url = arg0; String extName = url.getParameter(\u0026#34;simple.ext\u0026#34;, \u0026#34;dog\u0026#34;); if (extName == null) throw new IllegalStateException(\u0026#34;Failed to get extension (com.fc.rpc.dubbo.SimpleExt) name from url (\u0026#34; + url.toString() + \u0026#34;) use keys([simple.ext])\u0026#34;); ScopeModel scopeModel = ScopeModelUtil.getOrDefault(url.getScopeModel(), com.fc.rpc.dubbo.SimpleExt.class); com.fc.rpc.dubbo.SimpleExt extension = (com.fc.rpc.dubbo.SimpleExt) scopeModel.getExtensionLoader(com.fc.rpc.dubbo.SimpleExt.class).getExtension(extName); return extension.echo(arg0, arg1); } public java.lang.String bang(org.apache.dubbo.common.URL arg0, int arg1) { throw new UnsupportedOperationException(\u0026#34;The method public abstract java.lang.String com.fc.rpc.dubbo.SimpleExt.bang(org.apache.dubbo.common.URL,int) of interface com.fc.rpc.dubbo.SimpleExt is not adaptive method!\u0026#34;); } } 另外debug级别的话，生成的class会输出到日志\nJDK动态代理的class文件 回归到jdk的动态代理，如何查看jdk动态代理生成的class文件\n这里主要讲一下如何查看动态代理的class文件，动态代理的原理啥的不深入。\n设置参数 在调用之前，添加System.getProperties().put(\u0026quot;sun.misc.ProxyGenerator.saveGeneratedFiles\u0026quot;,\u0026quot;true\u0026quot;);\n这个只适用于jdk动态代理\n准备一下测试类\n这是调用入口\npublic class DynamicProxyMain { public static void main(String[] args) { //动态代理时生成class文件 System.getProperties().put(\u0026#34;sun.misc.ProxyGenerator.saveGeneratedFiles\u0026#34;,\u0026#34;true\u0026#34;); DynamicProxy dynamicProxy = new DynamicProxy(new HumenImpl()); Humen humenProxy = dynamicProxy.getProxy(); humenProxy.eat(\u0026#34;rice\u0026#34;); } } DynamicProxy实现了InvocationHandler，用于生成代理类\nimport java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; public class DynamicProxy implements InvocationHandler { private Object target; public DynamicProxy(Object target) { this.target = target; } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { this.before(); Object result = method.invoke(target, args); this.after(); return result; } private void before() { System.out.println(\u0026#34;吃东西之前先热身\u0026#34;); } private void after() { System.out.println(\u0026#34;吃完饭休息一下\u0026#34;); } public \u0026lt;T\u0026gt; T getProxy() { return (T) Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),this); } } 测试用的接口\n/** * 人类迷惑行为大赏 **/ public interface Humen { /** * 吃东西 * * @param food 食物 */ void eat(String food); } 测试接口的实现类\n/** * 人类迷惑行为大赏具体案例 **/ public class HumenImpl implements Humen { @Override public void eat(String food) { System.out.println(\u0026#34;人类开始行为艺术表演：吃食物 \u0026#34;+food); } } 那么主要看一下这个配置System.getProperties().put(\u0026quot;sun.misc.ProxyGenerator.saveGeneratedFiles\u0026quot;,\u0026quot;true\u0026quot;);这个配置是用于保存生成的class的。\n缺点是这个参数只适用于jdk动态代理\n加上这个参数运行一下，会发现代理类保存到了项目路径(classpath)下\n看一下$Proxy0的详细内容, 代理类继承了Proxy, 所以jdk动态代理只能代理接口，因为Java是单继承的\n// // Source code recreated from a .class file by IntelliJ IDEA // (powered by FernFlower decompiler) // package com.sun.proxy; import com.fc.se.proxy.Humen; import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; import java.lang.reflect.UndeclaredThrowableException; public final class $Proxy0 extends Proxy implements Humen { private static Method m1; private static Method m2; private static Method m3; private static Method m0; public $Proxy0(InvocationHandler var1) throws { super(var1); } public final boolean equals(Object var1) throws { try { return (Boolean)super.h.invoke(this, m1, new Object[]{var1}); } catch (RuntimeException | Error var3) { throw var3; } catch (Throwable var4) { throw new UndeclaredThrowableException(var4); } } public final String toString() throws { try { return (String)super.h.invoke(this, m2, (Object[])null); } catch (RuntimeException | Error var2) { throw var2; } catch (Throwable var3) { throw new UndeclaredThrowableException(var3); } } public final void eat(String var1) throws { try { super.h.invoke(this, m3, new Object[]{var1}); } catch (RuntimeException | Error var3) { throw var3; } catch (Throwable var4) { throw new UndeclaredThrowableException(var4); } } public final int hashCode() throws { try { return (Integer)super.h.invoke(this, m0, (Object[])null); } catch (RuntimeException | Error var2) { throw var2; } catch (Throwable var3) { throw new UndeclaredThrowableException(var3); } } static { try { m1 = Class.forName(\u0026#34;java.lang.Object\u0026#34;).getMethod(\u0026#34;equals\u0026#34;, Class.forName(\u0026#34;java.lang.Object\u0026#34;)); m2 = Class.forName(\u0026#34;java.lang.Object\u0026#34;).getMethod(\u0026#34;toString\u0026#34;); m3 = Class.forName(\u0026#34;com.fc.se.proxy.Humen\u0026#34;).getMethod(\u0026#34;eat\u0026#34;, Class.forName(\u0026#34;java.lang.String\u0026#34;)); m0 = Class.forName(\u0026#34;java.lang.Object\u0026#34;).getMethod(\u0026#34;hashCode\u0026#34;); } catch (NoSuchMethodException var2) { throw new NoSuchMethodError(var2.getMessage()); } catch (ClassNotFoundException var3) { throw new NoClassDefFoundError(var3.getMessage()); } } } 构造函数传入了InvocationHandler，赋值给了成员变量h，所以方法的调用都是走的InvocationHandler。\n本次示例中为DynamicProxy\npublic $Proxy0(InvocationHandler var1) throws { super(var1); } 在静态代码块中生成了对应的方法，类通用的hashCode()、toString()、equals(), 以及需要代理的方法eat()。\n$Proxy0调用eat方法，然后执行到了com.fc.se.proxy.DynamicProxy#invoke,\nmethod.invoke(target, args)调用具体的实现类执行方法。\n输出到文件 上一步中我们知道了生成的代理类的类名是$Proxy0, debug的时候也能看到类名，我们可以调用方法将这个类打印到文件里。\n更新后的测试类入口如下\nimport sun.misc.ProxyGenerator; import java.io.FileOutputStream; import java.io.IOException; public class DynamicProxyMain { public static void main(String[] args) { //动态代理时生成class文件 System.getProperties().put(\u0026#34;sun.misc.ProxyGenerator.saveGeneratedFiles\u0026#34;,\u0026#34;true\u0026#34;); DynamicProxy dynamicProxy = new DynamicProxy(new HumenImpl()); Humen humenProxy = dynamicProxy.getProxy(); humenProxy.eat(\u0026#34;rice\u0026#34;); //保存$Proxy0到文件 saveProxyFile(); } private static void saveProxyFile() { FileOutputStream out = null; try { byte[] classFile = ProxyGenerator.generateProxyClass(\u0026#34;$Proxy0\u0026#34;, HumenImpl.class.getInterfaces()); out = new FileOutputStream(\u0026#34;/Users/since/git/vamei/out/class/\u0026#34; + \u0026#34;$Proxy0.class\u0026#34;); out.write(classFile); } catch (Exception e) { e.printStackTrace(); } finally { try { if (out != null) { out.flush(); out.close(); } } catch (IOException e) { e.printStackTrace(); } } } } 执行之后可以发现已经生成了$Proxy0.class\n所以知道类名，就可以以这种方式输出到文件里\nhsdb 另一种是hsdb\n我这边使用hsdb失败了，具体是命令行执行的, attach process失败了，搜了一下，感觉执行起来挺麻烦的，就没深究。感兴趣的可以自行试下\n打开hsdb有2种方式\n一种是执行$JAVA_HOME/lib/sa-jdi.jar，命令行执行java -classpath sa-jdi.jar \u0026quot;sun.jvm.hotspot.HSDB\u0026quot;\n另一种是使用jhsdb hsdb命令打开ui, 有的jdk版本没有sa-jdi.jar，只能使用$JAVA_HOME/bin/jhsdb命令\nCGLIB代理的class文件 另一种常用的动态生成代理类的方式是使用cglib库，底层是基于ASM的\ncglib代理输出class文件，需要指定参数\n// 指定 CGLIB 将动态生成的代理类保存至指定的磁盘路径下 System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, \u0026#34;/Users/since/git/vamei/out/cglib\u0026#34;); 我们准备一个测试方法来测试一下，cglib依赖如下\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;cglib\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;cglib\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.3.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 一个main函数用于执行，生成代理类，Enhancer对象的superClass设置为CglibBaseBean, CglibBaseBean为要代理的目标对象，然后使用enhancer.create()创建代理对象\npublic class CglibProxy { public static void main(String[] args) { // 指定 CGLIB 将动态生成的代理类保存至指定的磁盘路径下 System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, \u0026#34;/Users/since/git/vamei/out/cglib\u0026#34;); Enhancer enhancer = new Enhancer(); enhancer.setSuperclass(CglibBaseBean.class); enhancer.setCallback(new CglibCustomizedMethodInterceptor()); CglibBaseBean baseBean = (CglibBaseBean) enhancer.create(); baseBean.say(); } } 需要一个实现了MethodInterceptor的类，这个和InvocationHandler比较相似。\n在MethodInterceptor里添加拦截的逻辑\nimport net.sf.cglib.proxy.MethodInterceptor; import net.sf.cglib.proxy.MethodProxy; import java.lang.reflect.Method; /** * cglib CustomizedMethodInterceptor * * @author since * @date 2024-09-19 13:25 */ public class CglibCustomizedMethodInterceptor implements MethodInterceptor { @Override public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable { System.out.println(\u0026#34;invoke \u0026#34; + method.getName() + \u0026#34; before ! \u0026#34;); Object result = methodProxy.invokeSuper(o, objects); System.out.println(\u0026#34;invoke \u0026#34; + method.getName() + \u0026#34; after ! \u0026#34;); return result; } } 代理类持有了CglibCustomizedMethodInterceptor，真正执行的时候是通过CglibCustomizedMethodInterceptor的intercept方法执行到了被代理的目标类的。\n然后看一下class文件输出结果，生成了3个代理类\nCglibBaseBean$$EnhancerByCGLIB$$bf21c123.class是生成的代理类，其他2个是索引类\n代理类class具体内容如下\n// // Source code recreated from a .class file by IntelliJ IDEA // (powered by FernFlower decompiler) // package com.fc.se.proxy.cglib; import java.lang.reflect.Method; import net.sf.cglib.core.ReflectUtils; import net.sf.cglib.core.Signature; import net.sf.cglib.proxy.Callback; import net.sf.cglib.proxy.Factory; import net.sf.cglib.proxy.MethodInterceptor; import net.sf.cglib.proxy.MethodProxy; public class CglibBaseBean$$EnhancerByCGLIB$$bf21c123 extends CglibBaseBean implements Factory { private boolean CGLIB$BOUND; public static Object CGLIB$FACTORY_DATA; private static final ThreadLocal CGLIB$THREAD_CALLBACKS; private static final Callback[] CGLIB$STATIC_CALLBACKS; private MethodInterceptor CGLIB$CALLBACK_0; private static Object CGLIB$CALLBACK_FILTER; private static final Method CGLIB$say$0$Method; private static final MethodProxy CGLIB$say$0$Proxy; private static final Object[] CGLIB$emptyArgs; private static final Method CGLIB$equals$1$Method; private static final MethodProxy CGLIB$equals$1$Proxy; private static final Method CGLIB$toString$2$Method; private static final MethodProxy CGLIB$toString$2$Proxy; private static final Method CGLIB$hashCode$3$Method; private static final MethodProxy CGLIB$hashCode$3$Proxy; private static final Method CGLIB$clone$4$Method; private static final MethodProxy CGLIB$clone$4$Proxy; static void CGLIB$STATICHOOK1() { CGLIB$THREAD_CALLBACKS = new ThreadLocal(); CGLIB$emptyArgs = new Object[0]; Class var0 = Class.forName(\u0026#34;com.fc.se.proxy.cglib.CglibBaseBean$$EnhancerByCGLIB$$bf21c123\u0026#34;); Class var1; Method[] var10000 = ReflectUtils.findMethods(new String[]{\u0026#34;equals\u0026#34;, \u0026#34;(Ljava/lang/Object;)Z\u0026#34;, \u0026#34;toString\u0026#34;, \u0026#34;()Ljava/lang/String;\u0026#34;, \u0026#34;hashCode\u0026#34;, \u0026#34;()I\u0026#34;, \u0026#34;clone\u0026#34;, \u0026#34;()Ljava/lang/Object;\u0026#34;}, (var1 = Class.forName(\u0026#34;java.lang.Object\u0026#34;)).getDeclaredMethods()); CGLIB$equals$1$Method = var10000[0]; CGLIB$equals$1$Proxy = MethodProxy.create(var1, var0, \u0026#34;(Ljava/lang/Object;)Z\u0026#34;, \u0026#34;equals\u0026#34;, \u0026#34;CGLIB$equals$1\u0026#34;); CGLIB$toString$2$Method = var10000[1]; CGLIB$toString$2$Proxy = MethodProxy.create(var1, var0, \u0026#34;()Ljava/lang/String;\u0026#34;, \u0026#34;toString\u0026#34;, \u0026#34;CGLIB$toString$2\u0026#34;); CGLIB$hashCode$3$Method = var10000[2]; CGLIB$hashCode$3$Proxy = MethodProxy.create(var1, var0, \u0026#34;()I\u0026#34;, \u0026#34;hashCode\u0026#34;, \u0026#34;CGLIB$hashCode$3\u0026#34;); CGLIB$clone$4$Method = var10000[3]; CGLIB$clone$4$Proxy = MethodProxy.create(var1, var0, \u0026#34;()Ljava/lang/Object;\u0026#34;, \u0026#34;clone\u0026#34;, \u0026#34;CGLIB$clone$4\u0026#34;); CGLIB$say$0$Method = ReflectUtils.findMethods(new String[]{\u0026#34;say\u0026#34;, \u0026#34;()V\u0026#34;}, (var1 = Class.forName(\u0026#34;com.fc.se.proxy.cglib.CglibBaseBean\u0026#34;)).getDeclaredMethods())[0]; CGLIB$say$0$Proxy = MethodProxy.create(var1, var0, \u0026#34;()V\u0026#34;, \u0026#34;say\u0026#34;, \u0026#34;CGLIB$say$0\u0026#34;); } final void CGLIB$say$0() { super.say(); } public final void say() { MethodInterceptor var10000 = this.CGLIB$CALLBACK_0; if (var10000 == null) { CGLIB$BIND_CALLBACKS(this); var10000 = this.CGLIB$CALLBACK_0; } if (var10000 != null) { var10000.intercept(this, CGLIB$say$0$Method, CGLIB$emptyArgs, CGLIB$say$0$Proxy); } else { super.say(); } } final boolean CGLIB$equals$1(Object var1) { return super.equals(var1); } public final boolean equals(Object var1) { MethodInterceptor var10000 = this.CGLIB$CALLBACK_0; if (var10000 == null) { CGLIB$BIND_CALLBACKS(this); var10000 = this.CGLIB$CALLBACK_0; } if (var10000 != null) { Object var2 = var10000.intercept(this, CGLIB$equals$1$Method, new Object[]{var1}, CGLIB$equals$1$Proxy); return var2 == null ? false : (Boolean)var2; } else { return super.equals(var1); } } final String CGLIB$toString$2() { return super.toString(); } public final String toString() { MethodInterceptor var10000 = this.CGLIB$CALLBACK_0; if (var10000 == null) { CGLIB$BIND_CALLBACKS(this); var10000 = this.CGLIB$CALLBACK_0; } return var10000 != null ? (String)var10000.intercept(this, CGLIB$toString$2$Method, CGLIB$emptyArgs, CGLIB$toString$2$Proxy) : super.toString(); } final int CGLIB$hashCode$3() { return super.hashCode(); } public final int hashCode() { MethodInterceptor var10000 = this.CGLIB$CALLBACK_0; if (var10000 == null) { CGLIB$BIND_CALLBACKS(this); var10000 = this.CGLIB$CALLBACK_0; } if (var10000 != null) { Object var1 = var10000.intercept(this, CGLIB$hashCode$3$Method, CGLIB$emptyArgs, CGLIB$hashCode$3$Proxy); return var1 == null ? 0 : ((Number)var1).intValue(); } else { return super.hashCode(); } } final Object CGLIB$clone$4() throws CloneNotSupportedException { return super.clone(); } protected final Object clone() throws CloneNotSupportedException { MethodInterceptor var10000 = this.CGLIB$CALLBACK_0; if (var10000 == null) { CGLIB$BIND_CALLBACKS(this); var10000 = this.CGLIB$CALLBACK_0; } return var10000 != null ? var10000.intercept(this, CGLIB$clone$4$Method, CGLIB$emptyArgs, CGLIB$clone$4$Proxy) : super.clone(); } public static MethodProxy CGLIB$findMethodProxy(Signature var0) { String var10000 = var0.toString(); switch (var10000.hashCode()) { case -909388886: if (var10000.equals(\u0026#34;say()V\u0026#34;)) { return CGLIB$say$0$Proxy; } break; case -508378822: if (var10000.equals(\u0026#34;clone()Ljava/lang/Object;\u0026#34;)) { return CGLIB$clone$4$Proxy; } break; case 1826985398: if (var10000.equals(\u0026#34;equals(Ljava/lang/Object;)Z\u0026#34;)) { return CGLIB$equals$1$Proxy; } break; case 1913648695: if (var10000.equals(\u0026#34;toString()Ljava/lang/String;\u0026#34;)) { return CGLIB$toString$2$Proxy; } break; case 1984935277: if (var10000.equals(\u0026#34;hashCode()I\u0026#34;)) { return CGLIB$hashCode$3$Proxy; } } return null; } public CglibBaseBean$$EnhancerByCGLIB$$bf21c123() { CGLIB$BIND_CALLBACKS(this); } public static void CGLIB$SET_THREAD_CALLBACKS(Callback[] var0) { CGLIB$THREAD_CALLBACKS.set(var0); } public static void CGLIB$SET_STATIC_CALLBACKS(Callback[] var0) { CGLIB$STATIC_CALLBACKS = var0; } private static final void CGLIB$BIND_CALLBACKS(Object var0) { CglibBaseBean$$EnhancerByCGLIB$$bf21c123 var1 = (CglibBaseBean$$EnhancerByCGLIB$$bf21c123)var0; if (!var1.CGLIB$BOUND) { var1.CGLIB$BOUND = true; Object var10000 = CGLIB$THREAD_CALLBACKS.get(); if (var10000 == null) { var10000 = CGLIB$STATIC_CALLBACKS; if (var10000 == null) { return; } } var1.CGLIB$CALLBACK_0 = (MethodInterceptor)((Callback[])var10000)[0]; } } public Object newInstance(Callback[] var1) { CGLIB$SET_THREAD_CALLBACKS(var1); CglibBaseBean$$EnhancerByCGLIB$$bf21c123 var10000 = new CglibBaseBean$$EnhancerByCGLIB$$bf21c123(); CGLIB$SET_THREAD_CALLBACKS((Callback[])null); return var10000; } public Object newInstance(Callback var1) { CGLIB$SET_THREAD_CALLBACKS(new Callback[]{var1}); CglibBaseBean$$EnhancerByCGLIB$$bf21c123 var10000 = new CglibBaseBean$$EnhancerByCGLIB$$bf21c123(); CGLIB$SET_THREAD_CALLBACKS((Callback[])null); return var10000; } public Object newInstance(Class[] var1, Object[] var2, Callback[] var3) { CGLIB$SET_THREAD_CALLBACKS(var3); CglibBaseBean$$EnhancerByCGLIB$$bf21c123 var10000 = new CglibBaseBean$$EnhancerByCGLIB$$bf21c123; switch (var1.length) { case 0: var10000.\u0026lt;init\u0026gt;(); CGLIB$SET_THREAD_CALLBACKS((Callback[])null); return var10000; default: throw new IllegalArgumentException(\u0026#34;Constructor not found\u0026#34;); } } public Callback getCallback(int var1) { CGLIB$BIND_CALLBACKS(this); MethodInterceptor var10000; switch (var1) { case 0: var10000 = this.CGLIB$CALLBACK_0; break; default: var10000 = null; } return var10000; } public void setCallback(int var1, Callback var2) { switch (var1) { case 0: this.CGLIB$CALLBACK_0 = (MethodInterceptor)var2; default: } } public Callback[] getCallbacks() { CGLIB$BIND_CALLBACKS(this); return new Callback[]{this.CGLIB$CALLBACK_0}; } public void setCallbacks(Callback[] var1) { this.CGLIB$CALLBACK_0 = (MethodInterceptor)var1[0]; } static { CGLIB$STATICHOOK1(); } } 从上面的class文件可以看出，生成的代理类继承了CglibBaseBean，所以cglib相比于jdk动态代理，被代理类可以不用非得是接口\n使用Agent输出class文件 再一种方式就是使用Instrument, 这是jdk5提供的能力。\n关于instrument机制的介绍，可以看一下这一篇文章https://cnkirito.moe/instrument/\n如何搭建一个demo进行测试，可以参考上面的文章，测试的代码可以在git仓库查看\ngit clone之后，执行mvn clean package生成agent.jar， 在目标进程添加jvm参数-javaagent:/Users/since/git/agent/target/agent.jar=-d=/Users/since/test/;-f=com/alibaba/dubbo/registry\n即可输出动态代理类的内容\n-javaagent:/Users/since/git/agent/target/agent.jar 这个是agent的文件路径\n-d=/Users/since/test/是结果的输出路径\n-f=com/alibaba/dubbo/registry是要打印的类的前缀包路径\n下面来简单说一下如何编写agent代码，实现class dump\nagent项目结构如下\n首先是要在META-INF下添加一个MANIFEST.MF，里面指定版本号，主类，是否可以重建类等属性\n指定的premain-class是com.fc.agent.GreetingAgent，所以agent的入口就是GreetingAgent了。\n来看一下GreetingAgent\n类里有一个premain方法，和main方法比较像，options是传入的参数，以上面为例，运行时options为-d=/Users/since/test/;-f=com/alibaba/dubbo/registry。\nInstrumentation 便是 JAVA5 的 Instrument 机制的核心，它负责为类添加 ClassFileTransformer 的实现，从而对类进行装配增强修改\n注意 premain 和它的两个参数不能随意修改， 规定是这样，不要修改。\n我们为ins添加了一个ClazzDumpCustomTransformer， 对options进行解析，解析出文件输出路径，以及要输出的包的路径。\n这里我想观察dubbo的adaptive代理，所以-f传的是dubbo的包路径\nimport java.lang.instrument.Instrumentation; /** * * * @author since * @date 2024-08-21 13:43 */ public class GreetingAgent { public static void premain(String options, Instrumentation ins) { if (options != null) { System.out.printf(\u0026#34;I\u0026#39;ve been called with options: \\\u0026#34;%s\\\u0026#34;\\n\u0026#34;, options); } else { System.out.println(\u0026#34;I\u0026#39;ve been called with no options.\u0026#34;); } ClazzDumpCustomTransformer transformer = getTransformer(options); //更换不同的transformer ins.addTransformer(transformer); } public static ClazzDumpCustomTransformer getTransformer(String options) { String exportDir = null; String filterStr = null; boolean recursiveDir = false; if (options != null) { if (options.contains(\u0026#34;;\u0026#34;)) { String[] args = options.split(\u0026#34;;\u0026#34;); for (String param1 : args) { String[] kv = param1.split(\u0026#34;=\u0026#34;); if (\u0026#34;-d\u0026#34;.equalsIgnoreCase(kv[0])) { exportDir = kv[1]; } else if (\u0026#34;-f\u0026#34;.equalsIgnoreCase(kv[0])) { filterStr = kv[1]; } else if (\u0026#34;-r\u0026#34;.equalsIgnoreCase(kv[0])) { recursiveDir = true; } } } else { filterStr = options; } } System.out.println(\u0026#34;getTransformer, exportDir: \u0026#34; + exportDir + \u0026#34;, filterStr: \u0026#34; + filterStr + \u0026#34;, recursiveDir: \u0026#34; + recursiveDir); return new ClazzDumpCustomTransformer(exportDir, filterStr, recursiveDir); } } ClazzDumpCustomTransformer负责dump class，对符合条件的class，获取文件内容，输出到指定目录下\nimport java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import java.lang.instrument.ClassFileTransformer; import java.lang.instrument.IllegalClassFormatException; import java.security.ProtectionDomain; import java.util.Arrays; /** * class dump * * @author since * @date 2024-09-10 13:36 */ public class ClazzDumpCustomTransformer implements ClassFileTransformer { /** * 导出过滤表达式，此处为类名前缀， 以 -f 参数指定 */ private String filterStr; /** * 导出文件目录根目录, 以 -d 参数指定 */ private String exportBaseDir = \u0026#34;/tmp/\u0026#34;; /** * 是否创建多级目录, 以 -r 参数指定 */ private boolean packageRecursive; public ClazzDumpCustomTransformer(String exportBaseDir, String filterStr) { this(exportBaseDir, filterStr, false); } public ClazzDumpCustomTransformer(String exportBaseDir, String filterStr, boolean packageRecursive) { if (exportBaseDir != null) { this.exportBaseDir = exportBaseDir; } this.packageRecursive = packageRecursive; this.filterStr = filterStr; } @Override public byte[] transform(ClassLoader loader, String className, Class\u0026lt;?\u0026gt; classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException { if (needExportClass(className)) { System.out.println(\u0026#34;needExportClass: \u0026#34; + className); int lastSeparatorIndex = className.lastIndexOf(\u0026#34;/\u0026#34;) + 1; String fileName = className.substring(lastSeparatorIndex) + \u0026#34;.class\u0026#34;; String exportDir = exportBaseDir; if (packageRecursive) { exportDir += className.substring(0, lastSeparatorIndex); } exportClazzToFile(exportDir, fileName, classfileBuffer); //\u0026#34;D:/server-tool/tmp/bytecode/exported/\u0026#34; System.out.println(className + \u0026#34; --\u0026gt; EXPORTED\u0026#34;); } return classfileBuffer; } /** * 检测是否需要进行文件导出 * * @param className class名,如 com.xx.abc.AooMock * @return y/n */ private boolean needExportClass(String className) { if (filterStr != null) { return className.startsWith(filterStr); } return !className.startsWith(\u0026#34;java\u0026#34;) \u0026amp;\u0026amp; !className.startsWith(\u0026#34;sun\u0026#34;); } /** * 执行文件导出写入 * * @param dirPath 导出目录 * @param fileName 导出文件名 * @param data 字节流 */ private void exportClazzToFile(String dirPath, String fileName, byte[] data) { try { File dir = new File(dirPath); if (!dir.isDirectory()) { dir.mkdirs(); } File file = new File(dirPath + fileName); if (!file.exists()) { System.out.println(dirPath + fileName + \u0026#34; is not exist, creating...\u0026#34;); file.createNewFile(); } else { // String os = System.getProperty(\u0026#34;os.name\u0026#34;); // 主要针对windows文件不区分大小写问题 // if(os.toLowerCase().startsWith(\u0026#34;win\u0026#34;)){ // // it\u0026#39;s win // } try { int maxLoop = 9999; int renameSuffixId = 2; String[] cc = fileName.split(\u0026#34;\\\\.\u0026#34;); do { long fileLen = file.length(); byte[] fileContent = new byte[(int) fileLen]; FileInputStream in = new FileInputStream(file); in.read(fileContent); in.close(); if (!Arrays.equals(fileContent, data)) { fileName = cc[0] + \u0026#34;_\u0026#34; + renameSuffixId + \u0026#34;.\u0026#34; + cc[1]; file = new File(dirPath + fileName); if (!file.exists()) { System.out.println(\u0026#34;new create file: \u0026#34; + dirPath + fileName); file.createNewFile(); break; } } else { break; } renameSuffixId++; maxLoop--; } while (maxLoop \u0026gt; 0); } catch (Exception e) { System.err.println(\u0026#34;exception in read class file..., path: \u0026#34; + dirPath + fileName); e.printStackTrace(); } } FileOutputStream fos = new FileOutputStream(file); fos.write(data); fos.close(); } catch (Exception e) { System.err.println(\u0026#34;exception occur while export class.\u0026#34;); e.printStackTrace(); } } } 执行mvn clean package打包之后，添加到目标进程，添加启动参数，查看执行结果，在控制台输出了要打印的class\n进入输出路径，查看发现都生成了对应的class\n将class文件拖进idea可以查看具体内容\n从url里取相应的协议，注册默认是dubbo协议\n使用arthas输出class文件 提到agent，那就不得不说到arthas了，arthas在运行时排障非常的好用，点个赞。\n动态代理 当使用 arthas-boot 启动 Arthas 时，它会使用 Java 的 Attach API 来将自身动态注入到目标 JVM 进程中。通过附加 agentmain 方法，Arthas 可以对 JVM 进程进行监控和修改\n那么我们就拿arthas来看一下，如何打印运行时的class文件，主要是使用jad命令\narthas的安装使用相关内容参考官方文档: https://arthas.aliyun.com/doc/\n修改一下动态代理的测试类\npublic class DynamicProxyMain { public static void main(String[] args) throws InterruptedException { //动态代理时生成class文件 System.getProperties().put(\u0026#34;sun.misc.ProxyGenerator.saveGeneratedFiles\u0026#34;,\u0026#34;true\u0026#34;); DynamicProxy dynamicProxy = new DynamicProxy(new HumenImpl()); Humen humenProxy = dynamicProxy.getProxy(); humenProxy.eat(\u0026#34;rice\u0026#34;); Thread.sleep(100*24*60*60*1000L); //保存$Proxy0到文件 // saveProxyFile(); } 让进程挂在这，然后启动arthas，选择这个进程进行attach\n使用sc命令搜索动态代理生成的类: sc *Proxy0*, 得到了代理类的全路径，然后使用jad命令反编译class，得到动态生成的代理类的文件内容\n再来看一下dubbo的示例，看看javassist生成的代理类如何\npublic class DubboSpi { public static void main(String[] args) throws InterruptedException { ExtensionLoader\u0026lt;SimpleExt\u0026gt; extensionLoader = ExtensionLoader.getExtensionLoader(SimpleExt.class); // SimpleExt defaultExtension = extensionLoader.getDefaultExtension(); // SimpleExt dog = extensionLoader.getExtension(\u0026#34;dog\u0026#34;); // SimpleExt dog2 = extensionLoader.getExtension(\u0026#34;dog\u0026#34;, true); // SimpleExt cat = extensionLoader.getExtension(\u0026#34;cat\u0026#34;); // dog.yell(null, \u0026#34;dogdog\u0026#34;); // SimpleExt dog1 = extensionLoader.getExtension(\u0026#34;dog\u0026#34;); // dog1.yell(null, \u0026#34;dog1\u0026#34;); SimpleExt adaptiveExtension = extensionLoader.getAdaptiveExtension(); Thread.sleep(100*24*60*60*1000L); URLAddress urlAddress = new URLAddress(\u0026#34;127.0.0.1\u0026#34;, 20880); URLParam parse = URLParam.parse(new HashMap\u0026lt;\u0026gt;()); adaptiveExtension.echo(new URL(urlAddress, parse), \u0026#34;dogs\u0026#34;); adaptiveExtension.bang(new URL(urlAddress, parse),0); } } javassist 仍然让进程挂在那，重新启动arthas进行attach\n使用jad反编译class，正常\ncglib 让进程空跑，使用arthas进行attach\nimport com.alibaba.excel.support.cglib.core.DebuggingClassWriter; import net.sf.cglib.proxy.Enhancer; /** * cglib proxy * * @author since * @date 2024-09-19 13:24 */ public class CglibProxy { public static void main(String[] args) throws InterruptedException { // 指定 CGLIB 将动态生成的代理类保存至指定的磁盘路径下 System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, \u0026#34;/Users/since/git/vamei/out/cglib\u0026#34;); Enhancer enhancer = new Enhancer(); enhancer.setSuperclass(CglibBaseBean.class); enhancer.setCallback(new CglibCustomizedMethodInterceptor()); CglibBaseBean baseBean = (CglibBaseBean) enhancer.create(); baseBean.say(); Thread.sleep(100*24*60*60*1000L); } } 使用sc搜索相关的代理类，然后使用jad反编译, 也正常输出了\n总结 本文介绍了一下java生成动态代理类的方式，像jdk动态代理，cglib动态代理，javassist在项目中都有广泛的应用。\n对于查看动态代理class的内容，介绍了相关的方法进行查看，但是不够通用。\n通过写agent，了解了agent的一些知识，如何使用instrument机制在启动时和运行时增加class\n但是相比于自己写agent，还是arthas更加的方便通用一点，不用打agent包，也不用添加启动参数去重启进程。\narthas直接attach到目标进程上，可以模糊查询类，然后使用jad进行反编译，非常的方便。\narthas作为一个生产排障工具，还有其他更多强大的功能，值得去了解学习\n","permalink":"https://blog.thend03.com/posts/view-jvm-dynamic-class-detail/","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e最近看dubbo的时候，看到了讲spi的部分，其中提到了@Adaptive注解生成了代理类\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/thend03/mdPic/picGo/202409111608009.png\" alt=\"image-20240911160843943\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e我后面去debug了一下，打了断点，发现在运行时，只是显示了class的名称，由于\u003cstrong\u003eRegistryFactory$Adaptive\u003c/strong\u003e 是动态生成的，所以没有class文件结构可以看，而文章里贴了class文件。\u003c/p\u003e","title":"如何查看jvm运行时生成的动态代理class文件"},{"content":"July 6月底是个周末，那个周末2天经历了许多\n周六上午上海医院复查 周六下午去20公里外的木渎吃了麻辣烫 周六晚上去淮海街逛了一下，一条街7，8个辅警 周日上午看了皮肤科 周日中午吃了不那么正宗的烧鹅饭 周日下午去看了去年10月交付的小区，地库+房间能毒死个人 周日下午梅雨，暴雨把小区门口的路给淹了，过家门入不了 6月再配合澳门+香港+回家，简直是各种buff、体验拉满\n收拾一下回家 梅雨季过后，哪哪都发霉了，真的糟心。\n中午去吴中吃了烧鹅饭，然后逛了下原宿，下午请了个阿姨来打扫一下，平台价格2小时130，时薪60好像还行，但是去掉分成，阿姨估计能拿个60-80？\n3个人打扫的效率确实高，把发霉的地方全部都擦了一遍，又恢复了一丢丢的整洁。\n然后我们在晚上就回家去了，和狗儿子和狗闺女一起玩耍了一下\n狗儿子和狗闺女长的越来越长，越来越胖了\n南京\u0026amp;苏州 我表弟要做手术，去南京陪护了一下，扁桃体虽然不显眼，一旦生病要切割，那是真的麻烦，另外医院要找好的，医生的医德和态度也很重要。\n上海路那个地方，老城区，挤了很多的医院学校在那，老房子非常的有年代感。\n趁着亲爱的复查的机会，和她一起出去逛了一下，去了某个商场做了个看着比较高端，但是实际效果看不大出来的修眉，给了张隔壁理发店的优惠券，果然定价是真的高。\n然后第2天回苏州，看了房子，这次打算在湖东整租个2室，果然2室都得贵，事后来看的话，还是2室生活上会方便一点。\n但是湖东的高层实在太多了，各种33层的高楼，整个湖东塞了好多的人进去\n![image-20240829210908040](/Users/since/Library/Application Support/typora-user-images/image-20240829210908040.png)\n另外甭管什么样的房子，一楼居住体验都不大行，潮湿，潮湿，潮湿。\n刚好被我们遇着下雨天，洋房的一楼也很潮湿，且小区感觉停个车废老劲了。\n搬家 上次看了一次就下决定了，一方面是确实中介催的比较急，心软加上差不多，就签了。\n但是签约下定的过程还是有一点点的坑，首先是没和房东见过，就只凭中介巴拉巴拉，就信了中介的鬼话。\n中介说房东当天就把我们提的不干净的地方重新打扫了一遍，其实房东啥也没干。\n另外是这个小区楼栋不能直达地库，地库在小区中间的位置，需要从地面走下去，下雨天实在是不大行。\n另外我们是要养狗的，中介让我们偷偷养，仿佛是2头在骗。\n不过签合同的时候，还是较为专业的，而且说给的返现也给了，没有拖拉。\n还好这是租房，买房一定一定要把所有能想到的点都过一遍，再下手。\n接下来就是搬家了，搬家找了我弟来帮忙，我亲爱的自己开车运了几趟，只能说还好有车运了3趟，不然感觉一趟都不一定能运的完。\n这次找了个货拉拉的师傅，非常的懂塞东西，把东西塞的满满当当的，而且非常的麻利，搬到新家那的过程是比较快的。\n这里我不得不再次吐槽一下那个傻逼无量二房东，地库二层装个灯吧，害的我脚崴了，加手破了皮。\n搬过来之后，我们这一栋，由于顶楼失火了，导致2部电梯都坏了，后面紧急修好了一部。\n高层还是危险，房龄久了之后各种问题都有可能出现，而且逃生啥的都有点费劲的。\n有一户怕失火，就从高层搬到了附近的2楼，而我们却往里搬，感觉就有点那啥。\n我们把货架和狗笼子留那了，为了在那边生活，安装了一个300块的晾衣架，也没用多久，货架由于运输麻烦，这边收纳也够，所以留下了。\n狗笼子等找到卖家，再过去卖走好了，然后我们就离开了在那住了大概4个月的地方，阿门。\n在愉景湾和建发，总计住了有10个月吧，反正我自己是有点糟心的，真难受呀。\n详细看我写的尹山湖居住吐槽\nhttps://blog.thend03.com/posts/yin-shanhu-not-good-memories/\n见了多年未见的老朋友 7月底，和我的多年未见的老朋友凡总见了一面，20年我俩双双离职之后，年年说南京见一面，这都3年过去了，也没见上，在这个7月底的日子，终于是见上了。\n凡总还是一如当年的帅气，吃个饭，坐一会，然后就散了，下次南京再聚。\n回家 然后周六和凡总见完之后，我俩又回家了，7月回家了2次，见了2次狗儿子和狗闺女，充实。\nAugust 见雷少 雷少离职之后，也好久没见了，在市区吃了烧烤，只能说不愧是雷少\n在家做饭 8月第1个周末，主打一个养精蓄锐，自己买菜自己做，确实会节省一点，也健康，唯一就是太耗时间了\n和基督教徒打交道 有一天晚上上课，打了八段锦，这种古代的健身操又悠闲强度也不大，适合老年人锻炼\n下课之后去散步了，遇到了一个e人，是个基督徒，非常的热情，周末约了吃饭，就看着那个e人疯狂的向我俩推销圣经、主之类的，连说3个小时不停歇的，我真的佩服。\n另外宗教信仰真的强大，远离宗教信仰，做个纯粹的无宗教主义者。\n生病 这几年生病大概都是因为新冠了，新冠按理睡说扛一周过去就好了，但是我这次我感觉足足被折磨了3周。\n第一周是嗓子痒+打喷嚏+流鼻涕+头疼，但是量了体温，不发烧，所以在硬扛，耳鼻喉科说扁桃体发炎，开了点颗粒。\n第二周是嗓子沙哑无法说话+流浓鼻涕+头疼+发烧+全身无力，第2周连着烧了有3天\n周末实在扛不住了，去医院呼吸科看了一下，诊断是呼吸道感染，看血常规指标是细菌感染。\n然后挂了3天的水，头孢+左氧氟沙星+其他的药，消炎+抗病毒。\n复查血常规，炎症指标下降，给开了左氧氟沙星的口服的，第三周目前好了一点了。\n整个8月都废了，每天上班都有些无精打采的。\n虽然但是8月中间的2个周末，还是抽了最后一丝力气外出了。\n看星星 8月10号是七夕，我在叮咚买菜买了小花和水果，亲爱的不满意，然后积攒了许久的看星星的热情终于在这一天爆发了。\n下午在那疯狂的搜寻看星星的绝佳地点，经过一番思想斗争，吃完晚饭之后，我们就披星戴月的出发去看星星了。\n去的地方是下汰村观景台，看星星的绝佳位置，不得不说，那里的星星确实好。\n这个地方在黄山下面的歙县的村里，离杭州临安区很近，从苏州过去要开4个小时，20:30出发，到那都快凌晨1点了。\n那里的路就是靠山挖出来的，靠山的一侧还有排水渠，加上走夜路，debuff拉满了，驾驶难度极大。\n最后2公里爬山的路，是很窄的水泥路，小p走这种路真的难为小p了，本来我们上了一点点准备撤了，被一个比亚迪女司机忽悠了继续往上走。\n结果底盘磕了一下，最终走了一半，停车，走上去了。\n路上遇到了一只可爱的小狗，陪着我们一路走了夜路+山路，到了山顶，感恩可爱的小狗，和我家的狗儿子和狗闺女一样可爱。\n山上有不少的车和人，不少人在那准备了帐篷，准备连夜拍摄和过夜。\n我们俩只是临时起义，所以没有过夜的打算。\n偶尔天边有1，2颗流星划过，照亮了我俩的脸庞。再以数不清的繁星为底，分外的美丽。\n长大之后能看这么多，这么密的星星的机会很少了，这里还能看到小时候那么多那么密的星，不是星星消失了，而是星星被密密麻麻的城市盖住了。\n远离城市才能找到小时候的淳朴吧。\n下山我们开始返程，找了个服务区充电+休息，等待天一亮再返程。\n如此癫狂的事，大概是我俩能做出来的吧。\n茅山 在我周六挂完水的间隙，不烧了，体力也恢复了。\n我俩又开始周末征程了。\n这次选的是茅山，夏天去避暑试一试。\n我们过去大概2个半小时，本来打算夜爬茅山的，但是到了金坛之后就开始下雨了，我们就打算在金坛住一晚上。\n一开始选的酒店，味道有点重，于是退了重新找，逛了晨风集团的工厂店，价格没便宜多少，质量看着也不大行，不如优衣库。\n后来换了个金坛国际大酒店，稍微升级了一点，住上了一室一厅的房间，只要215块，要啥自行车，收获了2台电视，和一个客厅，空间贼大。\n建议以后其他酒店的那个空间和价格，都朝金坛国际大酒店看齐。\n第2天就出发前往茅山景区了，到达景区停车场之后，有旅游车送上去，还是挺方便的。\n上边主要就2个宫殿+2个纪念馆。我俩主要逛了2个宫殿。\n2个宫殿叫顶宫和万宁宫，供奉了不同的道家人物，其中财神殿人气最旺，捐香火的人也多。\n全程车上车下，我俩除了宫殿楼梯，一个也没爬，这种旅游体验还是蛮爽的。\n茅山风景还可以的，在句容和金坛都有山头，山上树多，也凉快，也有大片的水域。\n![image-20240829221147805](/Users/since/Library/Application Support/typora-user-images/image-20240829221147805.png)\n![image-20240829221236791](/Users/since/Library/Application Support/typora-user-images/image-20240829221236791.png)\n我俩逛完两个宫殿之后，就结束了茅山旅途。\n下去找个农家乐吃了个午饭，味道还可以的样子，返程路上买了点水果，也比较甜，没有踩坑。\n总体上茅山旅途还是比较悠闲的，周末就该这么过。\n重元寺 喊了那么久的荷花，终于安排上了，我们到的时候是下午，天已经比较热了，荷花这会有些已经谢了，剩下的下午的时候也闭起了荷叶。\n整个重元寺还是很大的，有一个很大的莲国，底座是莲花形状，里面有一座观音像，非常的巨大，大概有3，4层楼高，外围由水池和荷花包裹，非常的壮观。\n如来像的院子里，养了很多的鸽子，非常的有生机。\n整个寺庙预计1个小时可以逛完，下午还是太热了，还是早上和傍晚逛会舒服一点。\n去启东看望老父亲 这次选了个周末去启东看看我爸，启东那个地方和沭阳感觉很像，小县城，不过启东靠海，离崇明很近，承接了一些上海的产业。\n从崇明走长江隧道，大概一个小时车程就到启东了，还是挺近的。\n我以及亲爱的与我爸一起吃了午饭，启东的河鲜是真的贵，随便点一点都要300块了。\n然后去海边看了海，那个海水浑浊不愧，2，30公里外就是恒大海上威尼斯，让我想起了去年被图片骗了的住宿环境，里面连瓶水都没有，好想回去给差评。\n海边光线刺眼，但是风挺大的，要是晚上去应该会凉快一些。\n我爸一个人在那，还是略显孤独了些，以后有时间多去看看吧。\n做饭 月末又开始做饭了，自己买菜，我，我弟，我的亲爱的，一起做饭吃饭，美滋滋。\n义乌 月末了，我们安排了一场世界的尽头的旅行，去义乌，义乌国际商贸城，闻名遐迩，但是一直没去过，去义乌看看，逛逛，看看义乌是怎么做生意的。\n下面是分割线分割线\n9月4日更新，去了义乌，感受没有那么的好。\n周六中午到了之后吃了个阿拉伯餐厅，感觉在吃新疆菜，和新疆菜系极像。\n![image-20240905165531915](/Users/since/Library/Application Support/typora-user-images/image-20240905165531915.png)\n吃完去国际商贸城开逛。\n那个小商品城确实很大，1区很热闹，2，3，4，5区人气稍微差一点。\n1区卖玩具和饰品的，人很多很热闹，各种饰品配件，看着非常的大。\n从1区走到5区，走马观花的话怎么着也得走2个小时，真的太磨人了。\n里面有一条通道，2楼通道，联通了1到5区，大热天的，从外面走可能得热死。\n这个倒不是太值得吐槽的，主要是里面基本全是批发的生意，不零售，逛起来也没啥意思，我们属于没有任何准备硬逛的人。\n只能走马观花的看了一轮，看了饰品配件，箱包，电子家电，文具，鞋袜，婚庆，进出口商品等。\n看完之后毫无收获，只是收获了日行2万步罢了。\n车停路边，喜提浙G贴条一张，挪到另一个地方，又喜提短信提醒，浙G这交警服务可真棒呀，最终扣0分罚款0元，还行吧。\n6点多上住了酒店，晚饭就吃了酒店的自助餐，然后白嫖了酒店的停车和9点之后的夜宵，这2个感觉还可以。\n![image-20240905165548117](/Users/since/Library/Application Support/typora-user-images/image-20240905165548117.png)\n睡了个下午觉，吃了饭，恢复了一点精力，可以夜里逛起来了。\n我们去了鸡鸣阁夜爬，鸡鸣阁在鸡鸣山上，是义乌市区自然高点。\n![image-20240905170131074](/Users/since/Library/Application Support/typora-user-images/image-20240905170131074.png)\n![image-20240905170258720](/Users/since/Library/Application Support/typora-user-images/image-20240905170258720.png)\n晚上爬鸡鸣阁也不热，而且在灯光的映照下非常的美丽，而且也不高，15-20分钟就能爬完，非常的推荐。\n![image-20240905170144290](/Users/since/Library/Application Support/typora-user-images/image-20240905170144290.png)\n![image-20240905165801360](/Users/since/Library/Application Support/typora-user-images/image-20240905165801360.png)\n存在黑子，记录黑点\n![image-20240905165828329](/Users/since/Library/Application Support/typora-user-images/image-20240905165828329.png)\n![image-20240905170117413](/Users/since/Library/Application Support/typora-user-images/image-20240905170117413.png)\n![image-20240905170153922](/Users/since/Library/Application Support/typora-user-images/image-20240905170153922.png)\n![image-20240905170201185](/Users/since/Library/Application Support/typora-user-images/image-20240905170201185.png)\n![image-20240905170210095](/Users/since/Library/Application Support/typora-user-images/image-20240905170210095.png)\n![image-20240905170214816](/Users/since/Library/Application Support/typora-user-images/image-20240905170214816.png)\n![image-20240905170221580](/Users/since/Library/Application Support/typora-user-images/image-20240905170221580.png)\n![image-20240905170231436](/Users/since/Library/Application Support/typora-user-images/image-20240905170231436.png)\n![image-20240905170239088](/Users/since/Library/Application Support/typora-user-images/image-20240905170239088.png)\n这个是梦华录东京不夜城的取景地，也算是一个不错的打卡地了。\n逛完鸡鸣阁去逛了宾王夜市，这个夜市就比较一般了，虽然很长很热闹，但是没啥购买的欲望，贴了个膜就结束了。\n回程睡觉了。\n这个酒店再拿出来吐槽一下，房间格局差、空间小也就罢了，隔音还不好，在cbd不是隔音不好的理由不是。\n第2天睡了迟迟不想起床，太累了，熬到了10点多起床找吃的。\n第2天的吃的还可以，吃了一份面和鸡爪，面和鸡爪的味道都还不错，最终点了7个鸡爪，鸡爪真香。\n然后小红薯找了个义乌本地的餐厅，说是开了20多年，在居民楼里，点了酸菜鱼和醋炒鸡。\n![image-20240905170322880](/Users/since/Library/Application Support/typora-user-images/image-20240905170322880.png)\n酸菜鱼用红薯粉洗过，有点滑，那个醋炒鸡实在是太酸了。\n总体还可以，但是不大符合我们的口味。\n车充电，8:00-11:00是1.3/1.4/1.5, 11:00-13:00就变0.7了，还好看了一下，省了不少电费，不然就至少亏个几十块钱了。\n给义乌来个总结，去批发做生意的可以去，要是闲逛的话其实没啥意思，不够有趣。\nSeptember 9月整体还是在忙碌中度过\n找房子 今年为了狗，搬了好几次，趁着我弟搬家，想着能不能找个房子，把狗从老家接回来，然后经过了一天的高强度看房子，从石湖东路周边看了一圈，到相城附近， 到青剑湖，到姑苏，整个一个疲惫。\n最后还是放弃了，真的难，在城市里养狗，我感觉至少得独栋起步才能好好养狗\n中秋回家 中秋又回家了，看了下狗儿子和狗闺女，在家又变胖了\n","permalink":"https://blog.thend03.com/posts/2024-q3-summary/","summary":"\u003ch1 id=\"july\"\u003eJuly\u003c/h1\u003e\n\u003cp\u003e6月底是个周末，那个周末2天经历了许多\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e周六上午上海医院复查\u003c/li\u003e\n\u003cli\u003e周六下午去20公里外的木渎吃了麻辣烫\u003c/li\u003e\n\u003cli\u003e周六晚上去淮海街逛了一下，一条街7，8个辅警\u003c/li\u003e\n\u003cli\u003e周日上午看了皮肤科\u003c/li\u003e\n\u003cli\u003e周日中午吃了不那么正宗的烧鹅饭\u003c/li\u003e\n\u003cli\u003e周日下午去看了去年10月交付的小区，地库+房间能毒死个人\u003c/li\u003e\n\u003cli\u003e周日下午梅雨，暴雨把小区门口的路给淹了，过家门入不了\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e6月再配合澳门+香港+回家，简直是各种buff、体验拉满\u003c/p\u003e","title":"2024三季度总结"},{"content":"去年9月底，刚搬到尹山湖的时候，那个搬家的周末损失惨重，当时想写一篇文章，结果写了个大纲不想写了，太让我伤心了\nhttps://blog.thend03.com/posts/disastrous-weekend/\n那么一年后，我们俩在尹山湖又搬了一次家，最终没住满一年，撤离了尹山湖。\n差不多时隔一年了，再来盘一盘在尹山湖的这10个月\n居住体验 首先是居住体验吧，这个怎么说呢，老是觉得有点不得劲。\n先来看看尹山湖的位置，尹山湖是属于郭巷街道，在独墅湖的西边，有一个小湖，那个湖是尹山湖。\n由于位置离独墅湖高教区很近，所以很多人住尹山湖，在独墅湖上班。\n我们俩这10个月住的是上图红框中的地方，这个地方有2个小区，靠近运河和独墅湖，有一个公园，离地铁大大概2公里的地方。\n去年刚搬到尹山湖这边的时候，是住的里面的那个小区，租了个下叠(叠加别墅)一楼的单间，每个月2500，电费好像是1块。\n整个小区是由小高和别墅(叠加/独栋)组成的，而且小区大门很偏，所以整个小区相对来说环境会安静一点，比较有私密性。\n私密导致的就是出行比较困难，附近商铺不多，没那么热闹。\n另一个问题就是离地铁站会很远，大概有2公里，走路的话会很麻烦，要30-40分钟才能到地铁站，电驴的话下雨和冬天冷，简直折磨，打车由于地方偏，短途很难打到车，所以住那至少得有一辆车，出门才没那么困难。\n这个小区开车还有一点对于新手司机来说，非常的困难。\n那个地库入口设计的歪歪扭扭的，新手司机很难把握，地库到处都是柱子，得转好些个弯，而且车位画的非常的窄，车宽一点就得担心是否会碰到边上的豪车。\n购物的话2，3公里外有个歌林公园，再远一点，4，5公里左右有个长申，然后大的就没了。\n总体来说，第一个地方有这么几个优点\n房租不那么贵 环境相对较好，私密安静 适合养狗 那么对于我来说，缺点有那么几个\n交通不便，最好开车，地铁离的远，打车不方便 地库设计对新手司机不友好 生活购物没那么方便，不大喜欢歌林公园，长申好一点但不多 地块问题，小区和路都不大方正(个人喜欢问题, 轻喷) 二房东改的单间，可能存在健康问题 这是第1个小区，今年3月因为养狗问题，又搬到了隔壁小区，隔壁小区和之前住的就隔了一条河。\n这次换到了隔壁联排一楼的单间，还是一楼，灾难的延续。\n相比于上一个小区，这里多了如下几点提升\n离地铁站近了一点，走路努努力15分钟可达，坐地铁体验提升了一点点 地库没那么拥挤，地库出入口相对正常了一点点(对新手司机而言) 小区环境绿化又好了一点，植被很茂密 离公园又近了一点，更适合养狗了 但是夏天一楼又多了几个不能忍受的缺点\n梅雨季什么地方都发霉了，气死 一楼蚊虫很多，怕虫星人灾难 一楼容易反臭 其他的生活购物还是有问题，底商不丰富，想买点早饭啊菜啥的要么外卖，要么去隔壁的双湾买。\n最近新开了个生活超市，买菜啥的可能会方便一点了\n那么总结下来，这2个小区由于位置一样，优点如下\n房租不那么贵 小区环境好，干净整洁 私密性比较好，由于别墅比较多，居住的人口比较少 有公园，能养狗且适合养狗 但是，相比于如上几点，缺点也有很多\n别墅区搬家不方便，这个下面说 二房东改造的别墅单间，估计存在材料垃圾，影响健康的问题 一楼采光/通风垃圾，基本上享受不到太阳和流通的空气 室内布局不合理，空间使用局促 没有获得什么家居的体验 交通不便，坐地铁/打车很费劲 地库设计对新手来说太过折磨 生活不便利，只能外卖+小便利店，商超没啥可逛的 想吃的东西很少，想偷懒不做饭的时候有选择困难症 上班开车要过隧道，早高峰/下雨天简直折磨 总体而言，在这边生活的10个月时间，痛苦大于折磨，感觉很难融入进去那边的生活，仅就我俩的生活体感而言，不喜勿喷。\n槽点 上面介绍了一下整体的居住体验，居住体验就是没有体验。\n下面再详细回忆一下我们这一年的遭遇，难受的点\n搬家麻烦 由于我们这2次住的都是别墅，那边又是新小区，所以做了人车分流。\n车是没法从地面开到楼栋的，且地库限高2.2米。\n我们去年搬过来的时候，没有考虑人车分流这一点，找的货车超过2米2了，没法下地库，只能停在高层和别墅区的中间停车位。\n货车卸下行李就走了，然后我和我弟只能人肉搬箱子，因为没有准备小推车。\n从红框的位置，走人行道搬到楼栋前。结果搬着搬着下雨了，只能冒雨搬，搬了有2个小时，相当惨烈。\n用车从地库运一点行李，车后备箱还撞了，搬个家损失也太惨烈了。\n那天真的气死我了，这辈子都没这么艰难过。\n3月份搬到另一个小区的时候，由于离的很近，所以没有叫货车，买了个小推车，一趟一趟拉的\n由于东西比较零散，且比较多，周五晚上拉了2个多小时，周六上午拉了一上午，3，4个小时。\n这次还好，就是趟数多了一点，从1楼到1楼，没有用车，人行道就能解决，时间久了一点，其他没那么痛苦\n对于我来说，获得了如下几条经验教训\n搬家要提前踩点，看看有没有限高，货车不让进之类的 如果人车分流，需要走地库，需要看看地库限高 如果人车未分流，没有地库，只能走地面，需要评估一下地面到楼栋之间的距离 有没有电梯，需不需要走楼梯 如果要自己搬的话，最好自备一个小推车 如果有钱享受日式搬家，上面几条作废 最后一个让我痛恨的来了，从尹山湖搬走的时候，我们3月搬进的是一个联排，联排是没有电梯的，叠墅有。\n地库有2层，无良缺德二房东，只在一层安装了灯，第2层乌漆嘛黑的，之前每次走都很难受，得手机打电筒。\n搬走的时候，要搬东西到地库，最后一趟拿的东西有点多，楼梯转弯处没灯，黑布龙洞的，没走稳，导致我一脚踩空了\n左脚扭伤了，疼的我发出杀猪般的惨叫，左手胳膊破皮了，到现在还没好，还好我脚没骨折，疼几天就好了。\n要是我扭伤严重，我真的祝福那个二房东一辈子\n居住体验较差 由于是别墅的一楼客厅改的，所以户型都是歪七扭八的\n空间不够，没有什么收纳的地方，桌子没有抽屉，导致收纳空间严重不足，只能在桌子上摆着，又没啥利用空间\n厨房灶台很小，难以施展厨艺，加上懒，所以做饭也比较少\n叠加由于是一楼，窗户是小窗户，不是落地窗，所以采光不通透，通风也不大行，冬天外面阳光明媚，屋里昏暗无比\n联排一楼是2间房，为了和另一户隔断，院子里砌了一道水泥墙，绿化又太好，屋里的采光也没那么好，虽然是大落地窗。\n因为有墙所以通风也不大行。\n另外这2个小区投资别墅的较多，所以有很多空置的别墅，二房东租过来简单的装修，然后改成群租房，别墅上上下下都改成单间了。\n所以这2个小区可能没那么值得购买。\n另外二房东为了成本，装修的用料可能都很便宜，可能是串串房，材料有毒物质超标，有健康隐患，要慎重。\n我后面搬进来的这个房间，这个洗衣机是我用过的最差劲的洗衣机了，简直离谱，经常性的启动十几次都没法运行。\n我家20年前的洗衣机都没有这么拉胯，这辈子就没受过洗衣机这么多的气。\n另外那个灶台，高低不平，水槽里的水会往灶台那流，每次用那个水槽都要在台面上留一摊子水，气人+1.\n夏天卫生间和洗澡间各种臭味，各种虫子，真的是服了，气人+2.\n还有梅雨季，绿化好，叠加1楼，叠加梅雨，所有的东西都发霉了，包括行李箱，墙壁，柜子，冰箱，收纳盒里的衣服，\n全部全部全部都发霉了，长这么大没有霉这么严重过，气人+3.\n另外二房东改的，电费收费都贼贵，1块1度，夏天开空调，没一会充的钱就没了。冬天开取暖器，也是耗电大户。\n算一下，一个月电费得用个2，300，支出upup。\n只能说，我感觉我俩在尹山湖不是过日子去了，而是渡劫去了，各种各样的生活劫难。\n交通不方便 如前文所说，打车由于藏的深，早高峰基本很难打到车，步行要30-40分钟，电驴的话夏天防晒，冬天防冻，防雨雪也是个问题，开车的话地库真的折磨新手，太难了。\n还有上班开车过隧道，早高峰呼啦啦全是人，一个隧道要十几二十分钟的。\n虽然很近，但是交通麻烦。\n生活不便利 周边人气，商超，底商啥的都不那么热闹，便利，我俩间歇性的会去园区邻里中心逛一下，买东西，购物啥的。\n那边的歌林公园实在是没啥可逛的。\n优点 唯一的优点就是在愉景湾的时候，得到了我们俩的可爱小狗儿子和小狗闺女，地库偶遇的。\n现在已经快一岁了，虽然养起来颇费了些事，但是我们还是爱我们的狗儿子和狗闺女的。\n另外就是借机考察了一下附近的房地产，发现实在是没啥值得买的。\n总结 这样看来我俩在尹山湖南双湖过的日子不舒心的比较多。\n那边别墅区多的是刚装修完就拿出来出租的房子\n得到了如下的经验教训\n租房尽量不要租别墅 别墅容易搬家麻烦 别墅一楼采光通风效果不好 别墅改的单间户型空间真的垃圾 单间可能存在有毒物质毒害身体健康 网红装修风格一言难尽 租房尽量不要住一楼 一楼梅雨季真的让人崩溃 一楼的采光通风太差 一楼私密不好，楼上的人要上楼 群租房要避免串串房 二房东装的单间，很有可能毒害身体 尤其这种别墅区qun 交通要考虑好 看实际开车还是坐地铁 能上预算租2室最好 2室各种体验都上来了 虽然空间局促，但是各种设施都有了，小而全 最重要的一条，还得是多挣钱，住big house，阿门。\n","permalink":"https://blog.thend03.com/posts/yin-shanhu-not-good-memories/","summary":"\u003cp\u003e去年9月底，刚搬到尹山湖的时候，那个搬家的周末损失惨重，当时想写一篇文章，结果写了个大纲不想写了，太让我伤心了\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://blog.thend03.com/posts/disastrous-weekend/\"\u003ehttps://blog.thend03.com/posts/disastrous-weekend/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e那么一年后，我们俩在尹山湖又搬了一次家，最终没住满一年，撤离了尹山湖。\u003c/p\u003e\n\u003cp\u003e差不多时隔一年了，再来盘一盘在尹山湖的这10个月\u003c/p\u003e\n\u003ch1 id=\"居住体验\"\u003e居住体验\u003c/h1\u003e\n\u003cp\u003e首先是居住体验吧，这个怎么说呢，老是觉得有点不得劲。\u003c/p\u003e\n\u003cp\u003e先来看看尹山湖的位置，尹山湖是属于郭巷街道，在独墅湖的西边，有一个小湖，那个湖是尹山湖。\u003c/p\u003e","title":"尹山湖生活不那么美好的回忆"},{"content":"前言 上篇文章写了如何实现一个小报童的分销站。\n上一篇文章介绍了运行java代码，生成json，然后贴到前端项目里，生成最终的专栏列表，提交代码，进行部署，然后就更新成功了。\n那么经过这段时间的捣鼓，实现了自动化部署，自动生成json，自动生成最终的专栏列表，自动部署，减少了人工操作的步骤。\nAll in one的git地址在下方, fork之后添加自己的refer_code \u0026amp; domain，即可使用github actions进行自动部署\nhttps://github.com/gloaming123/moon-web-start\nworkflow预览 workflow详情如下，文件地址在项目的.github/workflows/github-pages.yml里\n# Sample workflow for building and deploying a Jekyll site to GitHub Pages name: Deploy moon-web-start with GitHub Pages dependencies preinstalled on: # Runs on pushes targeting the default branch push: branches: [master] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: pages cancel-in-progress: false jobs: # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 # - uses: npm/action-setup@v2 # with: # version: 6.32.9 - name: Set up Node uses: actions/setup-node@v3 with: node-version: 20 cache: npm # java - name: Checkout Java project run: git clone https://github.com/thend03/xiaobot-spider.git - name: Set up JDK uses: actions/setup-java@v2 with: java-version: \u0026#39;11\u0026#39; distribution: zulu - name: Build and run xiaobot-spider run: | cd xiaobot-spider mvn clean package # 或者使用 `mvn package`，具体取决于你的项目 java -jar target/xiaobot-spider-1.0-SNAPSHOT-jar-with-dependencies.jar # 运行你的主方法，生成 detail.json # mv target/detail.json ../detail.json - name: Copy detail.json to Vue project run: | pwd rm -f ./detail.json #删掉当前的，重新生成一个 cp /tmp/detail.json ./detail.json # setup npm - name: do npm install run: npm install - name: Run dispose base run: | echo \u0026#34;REFER_CODE=${{ secrets.REFER_CODE }}\u0026#34; \u0026gt; .env echo \u0026#34;print env\u0026#34; rm -f CNAME if [ -n \u0026#34;${{ secrets.CNAME }}\u0026#34; ]; then echo \u0026#34;${{ secrets.CNAME }}\u0026#34; \u0026gt; CNAME fi cat .env node disposebase.js echo \u0026#34;print preset.json\u0026#34; cat src/preset.json - name: Build env: # 设置环境变量,pages自定义域名了，显式设置为空 # REPOSITORY: ${{ github.repository }} REPOSITORY: \u0026#39;\u0026#39; run: npm run build - name: Setup Pages uses: actions/configure-pages@v3 - name: Upload artifact uses: actions/upload-pages-artifact@v1 with: # Upload dist repository path: ./dist - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v1 这个workflow会在master分支有变化的时候，自动执行workflow\nworkflow本质上是起了个linux的pod，运行了你代码的构建包\n这个workflow分为以下部分\n执行java代码生成专栏的信息,格式为json字符串 安装npm环境 执行disposebase生成专栏列表 读取secrets.REFER_CODE设置到.env里 打包生成dist，上传 生成网站 这里有几个要注意的点是，首先是需要把java代码拉到前端项目里，然后执行mvn clean package\n然后会执行main方法生成json，有个问题就是java生成的json的目录，不能用相对目录，可能会被目录折磨。\n所以我直接写到了/tmp目录，前端项目读也从/tmp读，这样就避免了烦人的目录问题。\n然后自己fork之后，记得修改自己仓库的配置项secrets.REFER_CODE\n假如需要自定义域名的话，记得再添加一个secrets.CNAME\n这个配置是你个人的分销码，不修改的话那就无法进行分销了。\n设置方式如下\n首先打开你自己仓库的settings, 点击左侧的secrets and variables,新建仓库的secret\n","permalink":"https://blog.thend03.com/posts/automatic-for-xiaobot-nav/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e上篇文章写了如何实现一个小报童的分销站。\u003c/p\u003e\n\u003cp\u003e上一篇文章介绍了运行java代码，生成json，然后贴到前端项目里，生成最终的专栏列表，提交代码，进行部署，然后就更新成功了。\u003c/p\u003e\n\u003cp\u003e那么经过这段时间的捣鼓，实现了自动化部署，自动生成json，自动生成最终的专栏列表，自动部署，减少了人工操作的步骤。\u003c/p\u003e\n\u003cp\u003eAll in one的git地址在下方, fork之后添加自己的refer_code \u0026amp; domain，即可使用github actions进行自动部署\u003c/p\u003e","title":"实现小报童分销站的自动化"},{"content":"问题 最近在debug的时候，莫名奇妙的会遇到java.util.ConcurrentModificationException问题。\n根据我的历史经验，发生这种问题肯定是for循环里调了remove或者add。\n但是看了一圈代码，没发现此类操作，有点蒙圈，这是为啥。。。\n根因分析 平常遇到的java.util.ConcurrentModificationException大多是下面的第一种，迭代器遍历和集合类的add/remove方法同时调用了。\n像增强for循环底层也属于迭代器遍历，所以这种错误是比较常见的。\n我这次遇到的就真的是多线程场景下的并发修改错误。\n并发修改错误原因分析 java.util.ArrayList.Itr是ArrayList的内部类，expectedModCount是属于Itr的成员变量。\nmodCount是java.util.AbstractList的成员变量。\n首先看一下Itr类的定义\n/** * An optimized version of AbstractList.Itr */ private class Itr implements Iterator\u0026lt;E\u0026gt; { int cursor; // index of next element to return int lastRet = -1; // index of last element returned; -1 if no such int expectedModCount = modCount; Itr() {} public boolean hasNext() { return cursor != size; } //省略其他代码 } 在生成迭代器Itr的时候，expectedModCount相当于是拿的当前ArrayList的modCount的值。\n后续list.add()或者list.remove()只会修改modCount，expectedModCount是不会受list.add()或者list.remove()影响的。\n再进行迭代器遍历的时候就会抛出java.util.ConcurrentModificationException。\n迭代器和集合类方法同时使用 java的集合类有如下2个字段, 翻译过来就是expectedModCount!=modCount的时候，会抛出并发异常。\n期望是修改的数量和期望值相同的，不同的时候肯定是有问题了。\n/** * The modCount value that the iterator believes that the backing * List should have. If this expectation is violated, the iterator * has detected concurrent modification. */ int expectedModCount = modCount; 像如下这种写法，肯定会抛出java.util.ConcurrentModificationException异常的。\n因为for循环底层是使用的迭代器,这种情况就会导致并发修改错误。\npublic static void main(String[] args) { List\u0026lt;String\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); list.add(\u0026#34;a\u0026#34;); list.add(\u0026#34;b\u0026#34;); list.add(\u0026#34;c\u0026#34;); list.add(\u0026#34;d\u0026#34;); list.add(\u0026#34;e\u0026#34;); for (String a : list) { System.out.println(a); list.remove(0); } } 这段代码编译为class，结果如下, 可以看到for循环变成了iterator迭代遍历。\n遍历是使用的iterator，但是remove方法是集合类的自己的方法。\npublic static void main(String[] args) { List\u0026lt;String\u0026gt; list = new ArrayList(); list.add(\u0026#34;a\u0026#34;); list.add(\u0026#34;b\u0026#34;); list.add(\u0026#34;c\u0026#34;); list.add(\u0026#34;d\u0026#34;); list.add(\u0026#34;e\u0026#34;); Iterator var2 = list.iterator(); while(var2.hasNext()) { String a = (String)var2.next(); System.out.println(a); list.remove(0); } } java.util.ArrayList.Itr#next迭代器的next会先校验modCount != expectedModCount, 2个值不相等就抛出异常\n@SuppressWarnings(\u0026#34;unchecked\u0026#34;) public E next() { checkForComodification(); int i = cursor; if (i \u0026gt;= size) throw new NoSuchElementException(); Object[] elementData = ArrayList.this.elementData; if (i \u0026gt;= elementData.length) throw new ConcurrentModificationException(); cursor = i + 1; return (E) elementData[lastRet = i]; } final void checkForComodification() { if (modCount != expectedModCount) throw new ConcurrentModificationException(); } 正常使用迭代器的话modCount == expectedModCount，这种情况是不会抛异常的。\n但是list.remove(0)，会修改modCount，而不修expectedModCount,导致下一次迭代报错\npublic E remove(int index) { rangeCheck(index); modCount++; E oldValue = elementData(index); int numMoved = size - index - 1; if (numMoved \u0026gt; 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--size] = null; // clear to let GC do its work return oldValue; } 总结一下就是:\n迭代器遍历不能和集合类自身的add/remove方法一起调用，这样会导致modCount和expectedModCount不相等，从而抛出java.util.ConcurrentModificationException。\nadd/remove都是集合类自身的方法，都只修改modCount而不修改expectedModCount\n并发修改导致的异常 之前遇到的都是上面一种导致的异常，这次真的就遇到多线程场景下的java.util.ConcurrentModificationException了。\n看一下下面的代码\npublic static void main(String[] args) { List\u0026lt;String\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); list.add(\u0026#34;a\u0026#34;); list.add(\u0026#34;b\u0026#34;); list.add(\u0026#34;c\u0026#34;); list.add(\u0026#34;d\u0026#34;); list.add(\u0026#34;e\u0026#34;); Thread thread = new Thread(() -\u0026gt; list.forEach(a -\u0026gt; { System.out.println(a); })); thread.start(); Thread thread1 = new Thread(() -\u0026gt; list.sort((o1, o2) -\u0026gt; o2.length() - o1.length())); thread1.start(); } 这段代码直接执行是没有问题的，可以正常结束，但是稍微修改一下，加点延迟，就会有问题了\npublic static void main(String[] args) { List\u0026lt;String\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); list.add(\u0026#34;a\u0026#34;); list.add(\u0026#34;b\u0026#34;); list.add(\u0026#34;c\u0026#34;); list.add(\u0026#34;d\u0026#34;); list.add(\u0026#34;e\u0026#34;); Thread thread = new Thread(() -\u0026gt; list.forEach(a -\u0026gt; { try { Thread.sleep(50); } catch (InterruptedException e) { throw new RuntimeException(e); } System.out.println(a); })); thread.start(); Thread thread1 = new Thread(() -\u0026gt; list.sort((o1, o2) -\u0026gt; o2.length() - o1.length())); thread1.start(); } //运行异常 Exception in thread \u0026#34;Thread-0\u0026#34; java.util.ConcurrentModificationException at java.util.ArrayList.forEach(ArrayList.java:1262) at com.fc.se.list.ListTest.lambda$main$1(ListTest.java:23) at java.lang.Thread.run(Thread.java:750) 看异常堆栈是java.util.ArrayList#forEach方法, 会校验modCount != expectedModCount，不符合预期就报错\n@Override public void forEach(Consumer\u0026lt;? super E\u0026gt; action) { Objects.requireNonNull(action); final int expectedModCount = modCount; @SuppressWarnings(\u0026#34;unchecked\u0026#34;) final E[] elementData = (E[]) this.elementData; final int size = this.size; for (int i=0; modCount == expectedModCount \u0026amp;\u0026amp; i \u0026lt; size; i++) { action.accept(elementData[i]); } if (modCount != expectedModCount) { throw new ConcurrentModificationException(); } } 现在这个场景变成了在2个线程里对同一个list进行遍历和sort操作.\n看下sort操作\n@Override @SuppressWarnings(\u0026#34;unchecked\u0026#34;) public void sort(Comparator\u0026lt;? super E\u0026gt; c) { final int expectedModCount = modCount; Arrays.sort((E[]) elementData, 0, size, c); if (modCount != expectedModCount) { throw new ConcurrentModificationException(); } modCount++; } 这2个代码放一起比较一下就可以看出端倪了，sort()会修改modeCount, 但是不会修改expectedModCount。\n再次进行list.foreach()时，由于modCount != expectedModCount，就会抛出ConcurrentModificationException。\n如果不加Thread.sleep(50);，thread会迅速执行完成，相当于2个线程串行执行，所以不会有并发修改问题。\n加了Thread.sleep(50);，2个线程会并发执行，就会抛异常了。\n解决方式 第一种，避免在迭代器里执行add/remove操作，如果需要在遍历的过程中修改集合，记得使用迭代器进行操作\n第二种也可以归类为迭代器和集合的操作，这种首先也需要避免迭代器和遍历一起操作, 另外多线程需要确保线程安全，按实际情况加锁。\nFail-Fast 上面的栗子就是fail-fast的一种场景，不符合预期，直接报错。\n什么是fail-fast 首先我们看下维基百科中关于fail-fast的解释：\nIn systems design, a fail-fast system is one which immediately reports at its interface any condition that is likely to indicate a failure. Fail-fast systems are usually designed to stop normal operation rather than attempt to continue a possibly flawed process. Such designs often check the system\u0026rsquo;s state at several points in an operation, so any failures can be detected early. The responsibility of a fail-fast module is detecting errors, then letting the next-highest level of the system handle them.\n大概意思是：在系统设计中，快速失效系统一种可以立即报告任何可能表明故障的情况的系统。\n快速失效系统通常设计用于停止正常操作，而不是试图继续可能存在缺陷的过程。\n这种设计通常会在操作中的多个点检查系统的状态，因此可以及早检测到任何故障。\n快速失败模块的职责是检测错误，然后让系统的下一个最高级别处理错误。\n其实，这是一种理念，说白了就是在做系统设计的时候先考虑异常情况，一旦发生异常，直接停止并上报。\nFail-Safe 与之相对的还有fail-safe，这是一种并发安全机制。\n为了避免触发fail-fast机制，导致异常，我们可以使用Java中提供的一些采用了fail-safe机制的集合类。\n这样的集合容器在遍历时不是直接在集合内容上访问的，而是先复制原有集合内容，在拷贝的集合上进行遍历。\njava.util.concurrent包下的容器都是fail-safe的，可以在多线程下并发使用，并发修改。同时也可以在foreach中进行add/remove 。\n参考文章 一不小心就踩坑的fail-fast是个什么鬼?\n","permalink":"https://blog.thend03.com/posts/how-to-fix-java.util.concurrentmodificationexception/","summary":"\u003ch2 id=\"问题\"\u003e问题\u003c/h2\u003e\n\u003cp\u003e最近在debug的时候，莫名奇妙的会遇到\u003ccode\u003ejava.util.ConcurrentModificationException\u003c/code\u003e问题。\u003c/p\u003e\n\u003cp\u003e根据我的历史经验，发生这种问题肯定是for循环里调了remove或者add。\u003c/p\u003e\n\u003cp\u003e但是看了一圈代码，没发现此类操作，有点蒙圈，这是为啥。。。\u003c/p\u003e\n\u003ch2 id=\"根因分析\"\u003e根因分析\u003c/h2\u003e\n\u003cp\u003e平常遇到的\u003ccode\u003ejava.util.ConcurrentModificationException\u003c/code\u003e大多是下面的第一种，迭代器遍历和集合类的add/remove方法同时调用了。\u003c/p\u003e","title":"如何解决java.util.ConcurrentModificationException问题"},{"content":"小报童精选导航站成果展示:\nhttps://re.gloaming.top/\nhttps://xiaobot.thend03.com/\n0x0 导航站的详细实操，讲了专栏来源的选择，如何整理获取专栏列表详情，前端样式怎么做，如何部署并生成最终的导航站等。\n由于前端能力实在有限，所以本篇文章的重点是在如何获取精选的专栏列表上。\n导航站使用一个开源项目改造而来。\n小报童简介 小报童是个去中心化的课程平台。\n创作者可以在小报童体面而用心的创作，专注创作，不搞套路。\n而且专栏的价格大部分都比较便宜。\n小报童官方不做社群，不做广告变现，不做算法推荐。\n因为小报童是去中心化的，所以官网没有所有的专栏列表，只能通过专栏作者自发性的传播，或者小报童官方的推荐才能找到专栏地址。\n所以有人就做了小报童的导航站，用来推荐专栏。\n而且小报童这个不需要买专栏，就可以获得分销链接。所以理论上小报童的所有专栏都可以免费获得分销链接。\n另外大声的吐槽一下，这样的专栏都是谁在买。\n别人通过你的链接买了之后，你就可以获得分销收入。\n但是吧，分销站这个东西，可能确实得有点私域流量才行，在pyq发分销的二维码，或者公众号发文章，或者自己的社群里发一下进行推荐。\n单纯靠seo的话，目前排名比较靠前的seo做的都挺好的，新站感觉得做持久化运营搜索引擎排名才能上的去。\n单搜小报童，官网占了整整一屏，下面的就是一些分销站了。\n回到分销站，该如何从01到1做一个分销站出来。\n我努力搜索，都没有搜索出一个可用的分销导航模板出来，有点点难。\n数据源 做导航站首先要拿到数据，由于小报童的特殊性(去中心化)，所以没法从官网得到所有专栏的数据。\n可以选择从以下的几种渠道拿到数据\n小报童精选公众号，里面会有一些精选专栏的推荐。 pyq各种散落的专栏推荐 别人整理好的专栏列表 爬当前已有的小报童导航站的数据 小报童精选 小报童精选是小报童官方的公众号。\n虽然是去中心化，但是一点入口都看不到，专栏的推广确实是会受阻。\n所以有了小报童精选这个事。\n精选文章每期会推荐一些有价值的专栏。所以精选是个获取专栏列表的路子。但是精选只能拿到一部分的专栏。\npyq pyq加的一些人，会去推荐专栏，他们买了之后，会发他们自己的专属分销海报。\n有时候我也会去通过他们的链接买一点，但是这种就是随缘，数量也不会太多。\n别人整理好的专栏列表 我在网上冲浪的时候，发现了别人有一份整理好的专栏列表，但是这个可能会有时效性的问题，作者更新不及时，就拿不到增量的专栏列表。\n下面这个就是一个民间的版本，上次更新还是在2年前。\nhttps://github.com/qianguyihao/xiaobot-list?tab=readme-ov-file\n爬当前已有的导航站的数据 这条路我感觉是最好的，多选几个导航站，把他们的专栏列表都爬一遍，然后去个重，就得到了最新最全的专栏列表了。\n数据源的选择 上面介绍了几种数据来源，我这边选择的是爬小报童精选的推荐列表。其实更好的是去爬已有导航站的数据。\n不过就精选专栏而言，官方的其实更好，毕竟官方已经做过一轮筛选了，能上推荐的肯定有其优点。\n数据整理分类 选择好之后，我们就需要对推荐列表进行分类，订阅号里有目前所有的专栏推荐列表。截止到现在一共有26期。\n对推荐列表进行整理就有2种方法。\n人工整理 爬虫分类 26期的话，点开26条公众号文章，收集下所有的推荐专栏的二维码，倒也还好。\n但是作为一个资深crud boy，能写代码就写代码。不能写代码，就让chatgpt帮我们写代码。\n语言选择的是Java(资深java crud仔)。\n选择的框架有如下几个\nJsoup, 用于解析html Fastjson2，用于字符串转json处理 Hutool，http\u0026amp;二维码识别 selenium, 用于浏览器模拟，一些异步加载的页面需要用到这个 commons-io，文件操作 下面就是实操了\n如何拿到专栏推荐列表 首先是进入小报童精选 公众号的聊天页面，左下角有个往期回顾，这里就是推荐专栏的合集页面。\n然后点击右上角，选择复制链接，或者选择使用默认浏览器打开，就可以拿到订阅列表的url\n下面就是页面分析了，通过滑动页面猜测这个列表是分页加载的。\n可以在控制台看网络请求，也可以看的出来。\nuri中有一个关键的key，appmsgalbum， 这个看着像是列表的请求。经过测验，这个确实是分页参数。\n浏览器地址栏的链接访问只能访问到第一页的页面。下面就要靠分页查询拿数据了。\n下面的分页请求返回的是json数据，第一页是html数据。\n分页参数有2个比较关键的key，begin_msgid和begin_itemidx，这个一个是分页参数，一个是消息id，传入页数和id，查询下面的消息\n这样的话就可以拿到所有的推荐文章的详细链接了。每一篇文章有一个专题推荐，包含数个专栏的推荐\n经过页面元素审查以及debug，得到了如下获取订阅列表每篇文章地址的方法\n常量类如下\npublic class Constants { public static final String XIAOBOT_WECHAT_SUBSCRIBE_LIST_URL = \u0026#34;https://mp.weixin.qq.com/mp/appmsgalbum?action=getalbum\u0026amp;__biz=Mzg4MTc0MDcyOA==\u0026amp;scene=1\u0026amp;album_id=2262723582487429130\u0026amp;count=100\u0026amp;uin=\u0026amp;key=\u0026amp;devicetype=iMac+MacBookPro18%2C1+OSX+OSX+14.5+build(23F79)\u0026amp;version=13080811\u0026amp;lang=zh_CN\u0026amp;nettype=WIFI\u0026amp;ascene=0\u0026amp;fontScale=100\u0026#34;; public static final String LOCAL_CHROME_DRIVER_PATH = \u0026#34;/Users/since/Downloads/chromedriver-mac-arm64/chromedriver\u0026#34;; public static final String LIST_NEXT_URL_FORMAT = \u0026#34;https://mp.weixin.qq.com/mp/appmsgalbum?action=getalbum\u0026amp;__biz=Mzg4MTc0MDcyOA==\u0026amp;album_id=2262723582487429130\u0026amp;count=100\u0026amp;begin_msgid=%s\u0026amp;begin_itemidx=%s\u0026amp;uin=\u0026amp;key=\u0026amp;pass_ticket=\u0026amp;wxtoken=\u0026amp;devicetype=iMac\u0026amp;nbsp;MacBookPro18,1\u0026amp;nbsp;OSX\u0026amp;nbsp;OSX\u0026amp;nbsp;14.5\u0026amp;nbsp;build(23F79)\u0026amp;clientversion=13080811\u0026amp;__biz=Mzg4MTc0MDcyOA==\u0026amp;appmsg_token=\u0026amp;x5=0\u0026amp;f=json\u0026#34;; } 获取订阅列表方法\nimport cn.hutool.http.HttpUtil; import com.alibaba.fastjson2.JSON; import com.alibaba.fastjson2.JSONArray; import com.alibaba.fastjson2.JSONObject; import com.thend03.xiaobot.spider.constants.Constants; import com.thend03.xiaobot.spider.model.ArticleDetail; import com.thend03.xiaobot.spider.model.WechatModel; import org.apache.commons.collections4.CollectionUtils; import org.apache.commons.lang3.StringUtils; import org.jsoup.Jsoup; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.select.Elements; import java.net.MalformedURLException; import java.nio.charset.StandardCharsets; import java.util.ArrayList; import java.util.List; import java.util.Objects; import java.util.stream.Collectors; /** * 小报童专栏精选订阅号列表解析服务 * * @author since * @date 2024-07-17 08:12 */ public class WechatSubscribeListService { public static List\u0026lt;ArticleDetail\u0026gt; parseArticleList() { String content = HttpUtil.downloadString(Constants.XIAOBOT_WECHAT_SUBSCRIBE_LIST_URL, StandardCharsets.UTF_8); Document parse = Jsoup.parse(content); Elements albumListItem = parse.getElementsByClass(\u0026#34;album__list-item\u0026#34;); System.out.println(1); List\u0026lt;WechatModel\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); boolean hasNext = true; for (Element element : albumListItem) { Attributes attributes = element.attributes(); System.out.println(2); if (attributes.isEmpty()) { continue; } String s = attributes.get(\u0026#34;data-msgid\u0026#34;); String s1 = attributes.get(\u0026#34;data-itemidx\u0026#34;); String s2 = attributes.get(\u0026#34;data-link\u0026#34;); String s3 = attributes.get(\u0026#34;data-title\u0026#34;); String s4 = attributes.get(\u0026#34;data-pos_num\u0026#34;); WechatModel wechatModel = new WechatModel(); wechatModel.setDataMsgId(parseLong(s)); wechatModel.setDataItemIndex(parseInt(s1)); wechatModel.setDataLink(s2); wechatModel.setDataTitle(s3); wechatModel.setDataPosNum(parseInt(s4)); list.add(wechatModel); if (wechatModel.getDataPosNum() == 1) { hasNext = false; } } while (hasNext) { List\u0026lt;WechatModel\u0026gt; list1 = nextParse(list.get(list.size() - 1)); if (CollectionUtils.isNotEmpty(list1)) { list.addAll(list1); } if (list1.get(list1.size() - 1).getDataPosNum() == 1) { hasNext = false; } } List\u0026lt;String\u0026gt; urlList = new ArrayList\u0026lt;\u0026gt;(); list.stream().filter(Objects::nonNull).forEach(s -\u0026gt; { List\u0026lt;String\u0026gt; urlList1 = WechatDetailService.getUrlList(s.getDataLink()); if (CollectionUtils.isNotEmpty(urlList1)) { urlList.addAll(urlList1); } }); List\u0026lt;String\u0026gt; collect = urlList.stream().filter(StringUtils::isNotBlank).filter(s -\u0026gt; s.contains(\u0026#34;http\u0026#34;) \u0026amp;\u0026amp; s.contains(\u0026#34;xiaobot.net/p\u0026#34;)).map(s -\u0026gt; { String[] split = s.split(\u0026#34;\\\\?\u0026#34;); return split[0]; }).distinct().collect(Collectors.toList()); List\u0026lt;ArticleDetail\u0026gt; collect1 = collect.stream().filter(Objects::nonNull).map(url -\u0026gt; { String host = null; String uniqueId = null; try { host = WechatDetailService.getHost(url); } catch (MalformedURLException e) { } try { uniqueId = WechatDetailService.getArticleUniqueId(url); } catch (MalformedURLException e) { throw new RuntimeException(e); } return WechatDetailService.getArticleDetail(host, uniqueId); }).collect(Collectors.toList()); return collect1; } public static long parseLong(String dataMsgId) { try { return Long.parseLong(dataMsgId); } catch (Exception e) { e.printStackTrace(); } return -1; } public static int parseInt(String itemIndex) { try { return Integer.parseInt(itemIndex); } catch (Exception e) { e.printStackTrace(); } return -1; } public static List\u0026lt;WechatModel\u0026gt; nextParse(WechatModel wechatModel) { List\u0026lt;WechatModel\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); String format = String.format(Constants.LIST_NEXT_URL_FORMAT, wechatModel.getDataMsgId(), wechatModel.getDataItemIndex()); String content = HttpUtil.downloadString(format, StandardCharsets.UTF_8); JSONObject jsonObject = JSON.parseObject(content); JSONObject getalbumResp = jsonObject.getJSONObject(\u0026#34;getalbum_resp\u0026#34;); JSONArray articleList = getalbumResp.getJSONArray(\u0026#34;article_list\u0026#34;); for (int i = 0; i \u0026lt; articleList.size(); i++) { Object o = articleList.get(i); if (o instanceof JSONObject) { JSONObject json = (JSONObject) o; long msgid = json.getLongValue(\u0026#34;msgid\u0026#34;); int itemidx = json.getIntValue(\u0026#34;itemidx\u0026#34;); int posNum = json.getIntValue(\u0026#34;pos_num\u0026#34;); String title = json.getString(\u0026#34;title\u0026#34;); String link = json.getString(\u0026#34;url\u0026#34;); WechatModel nextWechatModel = new WechatModel(); nextWechatModel.setDataMsgId(msgid); nextWechatModel.setDataItemIndex(itemidx); nextWechatModel.setDataLink(link); nextWechatModel.setDataTitle(title); nextWechatModel.setDataPosNum(posNum); list.add(nextWechatModel); } } return list; } } 如何拿到专栏地址 在上一步 我们拿到了26篇精选推荐的文章地址列表，这一步我们需要解析每一篇文章详情，拿到这一批推荐的专栏合集。\n每一篇文章里都会推荐1~N篇文章，数量不等。\n我拿几篇文章分析了一下，每篇文章的专栏没有特定的标签，但是由于是公众号文章，所以专栏都是以图片二维码的形式提供的。\n即能拿到所有的专栏二维码图片即可。\n以序号26的这篇文章为例\n推荐的专栏以文字介绍+二维码的图片格式提供出来。\n这篇文章一共推荐了4个专栏，理论上我们拿到这4个专栏的图片二维码就可以了。\n打开浏览器的控制台，进行元素审查，在img标签里的data-src字段可以拿到图片地址\n现在的获取图片地址的方法过于生硬了，需要从script里解析变量重重硬解析才能拿到图片地址\nList\u0026lt;String\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); String content = HttpUtil.downloadString(wechatUrl, StandardCharsets.UTF_8); Document parse = Jsoup.parse(content); Elements scripts = parse.getElementsByTag(\u0026#34;script\u0026#34;); for (Element script : scripts) { List\u0026lt;Node\u0026gt; nodes = script.childNodes(); for (Node node : nodes) { if (node instanceof DataNode) { DataNode dataNode = (DataNode) node; String wholeData = dataNode.getWholeData(); if (wholeData.contains(\u0026#34;cdn_url\u0026#34;)) { String[] split = wholeData.split(\u0026#34;var\u0026#34;); for (int i = 0; i \u0026lt; split.length; i++) { String s = split[i]; if (s.contains(\u0026#34;picturePageInfoList\u0026#34;) \u0026amp;\u0026amp; s.contains(\u0026#34;http\u0026#34;)) { String[] split1 = s.split(\u0026#34;picturePageInfoList\u0026#34;); String cdnUrl = split1[1]; String s1 = cdnUrl.replaceAll(\u0026#34;\\\\[\u0026#34;, \u0026#34;\u0026#34;) .replaceAll(\u0026#34;]\u0026#34;, \u0026#34;\u0026#34;) .replaceAll(\u0026#34;\\\\{\u0026#34;, \u0026#34;\u0026#34;) .replaceAll(\u0026#34;}\u0026#34;, \u0026#34;\u0026#34;) .replaceAll(\u0026#34;\u0026#39;\u0026#34;, \u0026#34;\u0026#34;) .replaceAll(\u0026#34;\\\u0026#34;\u0026#34;, \u0026#34;\u0026#34;); String[] split2 = s1.split(\u0026#34;,\u0026#34;); for (int j = 0; j \u0026lt; split2.length; j++) { if (split2[j].contains(\u0026#34;cdn_url\u0026#34;)) { String[] split3 = split2[j].split(\u0026#34;cdn_url:\u0026#34;); result.add(split3[1]); } } } } } } } } 其实换个方法，一句话就可以提取所有图片地址了, 使用select方法，标签+属性即可。\n拿到图片地址之后，使用hutool进行二维码识别，报错了就忽略异常，有二维码的能成功解析，能正常解析的就是二维码地址了。\npublic static String hutoolOcr(String imageUrl) throws IOException, URISyntaxException { String finalUrl = \u0026#34;\u0026#34;; File file = HttpUtil.downloadFileFromUrl(imageUrl, \u0026#34;static/\u0026#34; + COUNT.getAndIncrement() + \u0026#34;.png\u0026#34;); try { finalUrl = QrCodeUtil.decode(file); } catch (Exception e) { e.printStackTrace(); } return finalUrl; } 这样就拿到每期精选的所有的推荐专栏列表了\n如何获取专栏的详情 拿到专栏地址之后，就是去处理专栏了，我们上一步拿到的只是专栏的地址，专栏标题、作者、专栏头像、专栏介绍、专栏的已购数、文章数，都需要从专栏里获取。\n打开控制台，这几个接口把所有的数据都返回了，且返回的是json数据，所以看着很美好。\n但是这几个接口都是要签名的，整个页面是异步加载的，无法使用jsoup进行解析。而且也不知道签名规则，所以这条路行不通。\n后来经过一番搜索，可以使用selenium模拟浏览器，等待页面异步加载完成，这样就可以使用jsoup解析页面了。\n使用selenium需要在下载chrome驱动到本地，chrome驱动需要和自己的chrome浏览器版本相等或相近，版本不要差太多。\n114之前的版本在https://chromedriver.storage.googleapis.com/index.html下载\n127之后的版本在https://googlechromelabs.github.io/chrome-for-testing/下载\n115-126的暂时没找到，随着时间推移，这个最新的版本也可能会发生变化\n记得是下载chromedriver\n拿到driver之后，就可以使用代码模拟浏览器的页面异步加载过程，得到完整的页面了，然后就可以使用jsoup解析页面元素\npublic static String getArticleFullPage(String url) { // 设置 ChromeDriver 路径 System.setProperty(\u0026#34;webdriver.chrome.driver\u0026#34;, Constants.LOCAL_CHROME_DRIVER_PATH); // 设置 Chrome 选项 ChromeOptions options = new ChromeOptions(); options.addArguments(\u0026#34;--headless\u0026#34;); // 无头模式 // 启动 Chrome 浏览器 WebDriver driver = new ChromeDriver(options); // 访问目标网页 driver.get(url); String pageContent = null; // 等待网页加载完成（根据需要调整等待时间） try { Thread.sleep(2000); // 获取网页内容 pageContent = driver.getPageSource(); // 打印网页内容 System.out.println(pageContent); } catch (InterruptedException e) { e.printStackTrace(); } finally { driver.quit(); } return pageContent; } 整体解析文章详情的方法如下\npublic static ArticleDetail getArticleDetail(String host, String uniqueId) { String url = \u0026#34;https://\u0026#34; + host + \u0026#34;/p/\u0026#34; + uniqueId; String articleFullPage = getArticleFullPage(url); Document document = Jsoup.parse(articleFullPage); Elements title = document.getElementsByTag(\u0026#34;title\u0026#34;); Elements intro = document.getElementsByClass(\u0026#34;intro\u0026#34;); Elements description = document.getElementsByClass(\u0026#34;description\u0026#34;); Elements posts = document.getElementsByClass(\u0026#34;posts\u0026#34;); Elements elementsByClass = document.getElementsByClass(\u0026#34;paper\u0026#34;); Elements num = document.getElementsByClass(\u0026#34;num\u0026#34;); Elements avatar = document.getElementsByClass(\u0026#34;avatar\u0026#34;); String articleTitle = getArticleTitle(title); String articleDescription = getArticleDescription(description); String articleIntro = getArticleIntro(intro); Map\u0026lt;String, Integer\u0026gt; articleNum = getArticleNum(num); String articleAvatar = getArticleAvatar(avatar); ArticleDetail articleDetail = new ArticleDetail(); articleDetail.setAvatarBase64(articleAvatar); // articleDetail.setGmtCreate(createdAt); articleDetail.setIntroduction(articleIntro); // articleDetail.setFreePostCount(freePostCount); articleDetail.setPostCount(articleNum.get(\u0026#34;post\u0026#34;)); articleDetail.setTitle(articleTitle); articleDetail.setSubscriberCount(articleNum.get(\u0026#34;reader\u0026#34;)); articleDetail.setUrl(url); System.out.println(1); return articleDetail; } public static String getHost(String articleUrl) throws MalformedURLException { java.net.URL url = new URL(articleUrl); return url.getHost(); } public static String getArticleUniqueId(String articleUrl) throws MalformedURLException { java.net.URL url = new URL(articleUrl); String path = url.getPath(); return path.replaceAll(\u0026#34;/p/\u0026#34;, \u0026#34;\u0026#34;); } public static String getArticleFullPage(String url) { // 设置 ChromeDriver 路径 System.setProperty(\u0026#34;webdriver.chrome.driver\u0026#34;, Constants.LOCAL_CHROME_DRIVER_PATH); // 设置 Chrome 选项 ChromeOptions options = new ChromeOptions(); options.addArguments(\u0026#34;--headless\u0026#34;); // 无头模式 // 启动 Chrome 浏览器 WebDriver driver = new ChromeDriver(options); // 访问目标网页 driver.get(url); String pageContent = null; // 等待网页加载完成（根据需要调整等待时间） try { Thread.sleep(2000); // 获取网页内容 pageContent = driver.getPageSource(); // 打印网页内容 System.out.println(pageContent); } catch (InterruptedException e) { e.printStackTrace(); } finally { driver.quit(); } return pageContent; } /** * 专栏的标题 * @param title title element * @return title */ public static String getArticleTitle(Elements title) { if (Objects.isNull(title)) { return null; } if (title.isEmpty()) { return null; } List\u0026lt;String\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); for (Element element : title) { List\u0026lt;Node\u0026gt; nodes = element.childNodes(); if (CollectionUtils.isEmpty(nodes)) { continue; } List\u0026lt;String\u0026gt; collect = nodes.stream().filter(Objects::nonNull).map(node -\u0026gt; { if (node instanceof TextNode) { return ((TextNode) node).text(); } return null; }).collect(Collectors.toList()); result.addAll(collect); } return StringUtils.join(result, \u0026#34;,\u0026#34;); } public static String getArticleDescription(Elements description) { if (Objects.isNull(description)) { return null; } if (description.isEmpty()) { return null; } List\u0026lt;String\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); Iterator\u0026lt;Element\u0026gt; iterator = description.iterator(); while (iterator.hasNext()) { Element next = iterator.next(); List\u0026lt;String\u0026gt; list = parseNode(next); result.add(StringUtils.join(list, \u0026#34;\u0026#34;)); } String join = StringUtils.join(result, \u0026#34;\u0026#34;); return join.replaceAll(\u0026#34;\u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;\u0026#34;, \u0026#34;\\r\\n\\n\u0026#34;); } public static String getArticleIntro(Elements intro) { if (Objects.isNull(intro)) { return null; } if (intro.isEmpty()) { return null; } List\u0026lt;String\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); for (Element next : intro) { List\u0026lt;String\u0026gt; list = parseNode(next); result.add(StringUtils.join(list, \u0026#34;\u0026#34;)); } String join = StringUtils.join(result, \u0026#34;\u0026#34;); return join.replaceAll(\u0026#34;\u0026lt;br\u0026gt;\u0026#34;, \u0026#34;\\r\\n\u0026#34;); } public static Map\u0026lt;String, Integer\u0026gt; getArticleNum(Elements num) { if (Objects.isNull(num)) { return Collections.emptyMap(); } if (num.isEmpty()) { return Collections.emptyMap(); } Element reader = num.get(0); Element post = num.get(1); TextNode node = (TextNode) reader.childNodes().get(0); String text = node.text(); TextNode postNode = (TextNode) post.childNodes().get(0); String text1 = postNode.text(); Map\u0026lt;String, Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(4); map.put(\u0026#34;reader\u0026#34;, Integer.parseInt(text)); map.put(\u0026#34;post\u0026#34;, Integer.parseInt(text1)); return map; } public static String getArticleAvatar(Elements avatar) { if (Objects.isNull(avatar)) { return null; } if (avatar.isEmpty()) { return null; } Element element = avatar.get(0); String avatarUrl = element.attributes().get(\u0026#34;src\u0026#34;); byte[] bytes = HttpUtil.downloadBytes(avatarUrl); return \u0026#34;data:image/jpeg;base64,\u0026#34; + Base64.getEncoder().encodeToString(bytes); } /** * 解析node详情，需要递归，text node/element * @param element element * @return list */ public static List\u0026lt;String\u0026gt; parseNode(Element element) { if (Objects.isNull(element)) { return null; } List\u0026lt;Node\u0026gt; nodes = element.childNodes(); if (CollectionUtils.isEmpty(nodes)) { return null; } List\u0026lt;String\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); for (Node node : nodes) { List\u0026lt;Node\u0026gt; textNodeList = node.childNodes(); if (CollectionUtils.isEmpty(textNodeList)) { if (node instanceof TextNode) { result.add(((TextNode) node).text()); } else { result.add(node.toString()); } continue; } List\u0026lt;String\u0026gt; subList = new ArrayList\u0026lt;\u0026gt;(); for (Node text : textNodeList) { if (Objects.isNull(text)) { continue; } if (text instanceof TextNode) { subList.add(((TextNode) text).text()); } else if (text instanceof Element) { List\u0026lt;String\u0026gt; list = parseNode((Element) text); if (CollectionUtils.isNotEmpty(list)) { subList.add(StringUtils.join(list, \u0026#34;\u0026#34;)); } } else { subList.add(text.toString()); } } result.add(StringUtils.join(subList, \u0026#34;\u0026#34;)); } return result; } 前端页面展示 由于我是前端废，找了个开源的导航项目当模板，找我的前端朋友改了一下。\n开源项目地址如下: https://github.com/jic999/moon-web-start\n经过修改的前端项目地址如下: https://github.com/gloaming123/moon-web-start\n后端代码项目地址如下: https://github.com/thend03/xiaobot-spider\n这个导航项目自动github pages部署，可以直接在仓库的actions点击运行，可以在job的运行日志里得到页面访问地址。\n为了优化加载速度，我这边生成的详情，将专栏的头像转成了base64，前端再将base64转成本地图片，优化了加载速度。\n总结 经过一系列的勾兑，就拿到了专栏的详情。\n总得来说，后端就是使用了http+jsoup解析了页面，没有什么难的。对api熟悉的话速度会更快一点。\n没有涉及大规模的爬虫，算是一次简单的尝试吧。\n对我来说难的果然还是前端呀，需要我的前端合伙人持续发力，实现前端页面了。\n前端地址，那个专属分销码需要自己替换，由于我不懂前端，没法给出详细的使用说明，我自己的分销码是我的前端朋友帮我专门写到一个分支里了。\n另外爬精选列表，只能拿到部分上推荐的专栏，其他不在推荐里的，要么去其他的导航站爬，要么靠其他散落的地方传播了。\n小报童的专栏价格都不大贵，适合当知识付费的小册来购买，有的可以来点启发我觉得就能值回票价了。\n","permalink":"https://blog.thend03.com/posts/how-to-make-a-xiaobot-nav/","summary":"\u003cp\u003e小报童精选导航站成果展示:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://re.gloaming.top/\"\u003ehttps://re.gloaming.top/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://xiaobot.thend03.com/\"\u003ehttps://xiaobot.thend03.com/\u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"0x0\"\u003e0x0\u003c/h1\u003e\n\u003cp\u003e导航站的详细实操，讲了专栏来源的选择，如何整理获取专栏列表详情，前端样式怎么做，如何部署并生成最终的导航站等。\u003c/p\u003e\n\u003cp\u003e由于前端能力实在有限，所以本篇文章的重点是在如何获取精选的专栏列表上。\u003c/p\u003e\n\u003cp\u003e导航站使用一个开源项目改造而来。\u003c/p\u003e\n\u003ch1 id=\"小报童简介\"\u003e小报童简介\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://xiaobot.net/home.html\"\u003e小报童\u003c/a\u003e是个去中心化的课程平台。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e创作者可以在小报童体面而用心的创作，专注创作，不搞套路。\u003c/p\u003e","title":"如何做一个小报童分销导航"},{"content":"背景 最近在跑jenkins任务，有一段脚本使用了如下的语句，统计文件中某一字符串出现的次数\ndef result = sh(script: \u0026#34;grep -c \u0026#39;Uploading successfully\u0026#39; result.txt\u0026#34;, returnStdout: true).trim() 这个命令返回文本中包含Uploading successfully字符串的数量。\n看似很简单的一个grep命令，好像也没什么问题。\n但是一直行就失败，失败的我很难受。\n缺陷扫描异常:hudson.AbortException: script returned exit code 1 而且jenkins执行一次要一个小时，多次打日志定位错误，折磨，折磨，折磨！！！\n原因 shell语句执行会有状态码，0代表执行成功，其他值代表执行失败，返回1代表执行失败，jenkins script会异常退出，导致无法执行正常逻辑\n在grep这个场景下，no match return 1。按常理来说，grep没有匹配到值直接返回状态0, 结果0就好，不知道为啥状态会返回1\n在命令行下使用示例复现一下，echo $?会打印上个shell命令的状态\n#匹配不上  ~/ echo aabcd| grep -c x 0  ~/ echo $? 1 #匹配得上  ~/ echo aabcd| grep -c a 1  ~/ echo $? 0 可以看到，匹配得上的执行echo $?返回了0，即正常退出， 匹配不上的返回了1，即异常退出。\n至于匹配的上的，但是count返回了1，可以看下下面的文档解释，按行匹配的，有1行匹配，count+1\n解决方案 可以在grep命令之后追加 ||:或者||true这2种方式，让grep命令正常返回。\n问了下gpt，gpt更推进使用||:，所以使用||:实现在没有匹配行的情况下返回0。\n以下是修改后的执行示例\n#匹配不上  ~/ echo aaabcd| grep -c x||: 0  ~/ echo $? 0 #匹配得上  ~/ echo aaabcd| grep -c a||: 1  ~/ echo $? 0 修改后的命令不论是否有匹配，都是返回的0，即正常退出而不是异常退出\n","permalink":"https://blog.thend03.com/posts/incorrect-use-of-grep/","summary":"\u003ch1 id=\"背景\"\u003e背景\u003c/h1\u003e\n\u003cp\u003e最近在跑jenkins任务，有一段脚本使用了如下的语句，统计文件中某一字符串出现的次数\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edef result \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e sh\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003escript: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;grep -c \u0026#39;Uploading successfully\u0026#39; result.txt\u0026#34;\u003c/span\u003e, returnStdout: true\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e.trim\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个命令返回文本中包含\u003ccode\u003eUploading successfully\u003c/code\u003e字符串的数量。\u003c/p\u003e\n\u003cp\u003e看似很简单的一个grep命令，好像也没什么问题。\u003c/p\u003e\n\u003cp\u003e但是一直行就失败，失败的我很难受。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e缺陷扫描异常:hudson.AbortException: script returned exit code \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e而且jenkins执行一次要一个小时，多次打日志定位错误，折磨，折磨，折磨！！！\u003c/p\u003e","title":"grep使用不当引起的惨案"},{"content":" 又是一次极限奔波，目标直指香港\n在6月初我们探索了澳门之后，我们在6月变得越来越充实了，回家，安吉，然后就是本周的香港，起立，敬礼。\n澳门见闻参见: https://blog.thend03.com/posts/city-walk-at-macau/\n照例做了一个香港的攻略，和澳门攻略大差不差的。 https://docs.qq.com/doc/DWWJjRnprV1ZUSmdt\n香港简介 香港感官上比澳门大多了，也分为几个部分\n香港岛\n香港岛对岸的油尖旺区\n离岛区\n靠近深圳的一大片岛\n看着地图还是蛮大的，但是香港市中心的密密麻麻的高楼，老房子，看着相当的压抑和魔幻，房价折合人民币大概22万/平米\n我们本次香港行程大概2天1晚，路线按照下图的一横一竖的路线(感谢来自小红薯冷三岁的攻略)，开始了我们的hong kong city walk。\n一竖 一竖就是下图的Day1行程, 主要是在油尖旺地区，在旺角逛了香港的义乌，吃了午饭，去油麻地打卡了油麻地警署，在百老汇电影中心看了芬兰的文艺片「落叶」，在尖沙咀吃了晚饭，打卡了星光大道，看到了香港的夜景。\n坐地铁游香港 周六到深圳之后，从宝安机场坐地铁去福田口岸，准备从福田口岸过关。\n福田口岸是有地铁到旺角或者尖沙咀的。宝安机场到福田口岸，坐地铁大概1个小时左右就到了。\n福田口岸对应的地铁起点是落马洲站，从这里可以一路坐地铁到香港的大部分地区。\n我和亲爱的因为没提前兑港币，整个早上都不美好了，结果福田口岸就有窗口可以兑港币，支持微信支付宝等支付，实时汇率，没有手续费，这个体验还蛮好的。刷的不到一分钟就兑好了500港币。\n香港大部分能刷pos机的店，都可以支持微信支付宝支付，实时汇率，消费还蛮方便的。大部分不支持刷pos机的店，只能用现金。\n现金现在人民币和港币都收的，不过人民币兑港币会高一点，大概在1:1.08，用人民币支付会亏一点汇率，所以还是建议备少量港币现金，500港币差不多够了。\n香港地铁支持云闪付、支付宝、微信的乘车码，所以坐地铁也挺方便的。香港坐地铁基本上可以去到很多热门的景点了。\n不过香港地铁价格有点小贵，我们从落马洲坐到旺角东下，花了40多hkd.\n旺角 我们第一站是在旺角下的，那会实在太饿了，于是我们就在旺角东下了，打算走去旺角站。\n路上进了第一家店，我们各点了一份牛腩饭和牛腩面，味道还挺好的，比我们在澳门吃的第一顿好多了。加8块可以加一杯冻柠茶，冻柠茶在香港貌似是标配，会给一根签子，按着柠檬喝。\n吃完之后继续出发，闲逛之后发现很多摆摊的，攻略上没有做到，后来补了下课，这个地方可以称之为香港的义乌，好几条街都是摆摊的，各种仿包，衣服的，三宅一生受伤害最大，1个20，6个100，可真便宜。\n打卡了佳佳甜品，但是我总感觉味道怪怪的。\n吃了一份咖喱车仔面，配上一杯冻柠茶，挺好的，这家店明确写了房租高，单人最低消费22hkd，看看房租对小本生意的压力\n香港的水果市场，价格看着倒是蛮贵的，台湾水果居多\n另外在旺角就感受到了香港地产的魔幻，各种破旧的老房子，还是很多高楼拼在一起的，看外立面，很多小格子窗户，住着估计会相当的压抑。\n油麻地 在旺角浅逛了一会， 我和亲爱的的就出发前往油麻地了，仍然是在大热天步行过去的。\n香港感觉和澳门有点像，景点和景点之间都不远，就那么1，2公里，打车又贼贵，不打车步行起步15，20分钟的，而且地势有起伏，老难走。\n到了油麻地警署之后，开放了一个门，卖文创，门口很多小姐姐在那拍照打卡，我和亲爱的在那也陪着凹了个造型.\n不过得益于我的不那么精湛的拍照技术，给亲爱的拍的不是很好。\n浅浅打了一个卡之后，我们就去对面的金拱门买了杯喝的，坐下休息了下。和我们抱着相同想法的人比较多，大家基本都点了个喝的坐那歇歇，凉快一下。\n亲爱的聪明的小脑袋瓜子在吹了空调之后，又变得灵活了起来。金拱门外面就是百老汇电影中心。\n于是我俩就吭哧吭哧过去了，打算在那看个「九龙城寨」。没想到呀，人家电影院主打的是文艺片。\n当下热播的电影是「汪汪梦里人」。\n然后我和亲爱的就选择了店员一问三不知，只知道即将播出的电影「落叶」。这恐怕是我俩第一次看电影只知道电影名字，不知道任何其他信息了。\n不过最终看下来还好，比较平淡的电影，芬兰导演拍的，抨击了一下俄乌战争，打击了酒鬼，展现了芬兰人的生活(貌似????)。\n收获了我和亲爱的一致好评。\n在大陆基本上很难看到有文艺片的排片的，好歹在hk文艺了一把，看了个文艺片。\n路上吃了一个不知道什么的面，不能坐着，只能站着，味道不知道该怎么形容，有点怪怪的。\n尖沙咀 电影看完了，时间也差不多了，我和亲爱的就准备去往尖沙咀了。\n我们的房间定在了尖沙咀。尖沙咀更加的繁华一点，离海比较近，晚上可以看海景，去尖沙咀码头坐天星小轮，去星光大道看夜景，大概都是15-20分钟的步行路程。\n要么说香港地产牛逼呢。10平的小房间，就叫舒适大床房。里面只有一张床，床头挡板隔着洗漱台和马桶。\n这么小一点，一晚上是375hkd(周六现定是450hkd，还涨价了)。想起了淮南火车站200块的环宇皇宫酒店，怀念。\n而且这个房间还很不干净，我家亲爱的宝都被整的得荨麻疹了，这还是带了一次性用品的情况下，不过这也怪我，包塞不下，所以一次性用品复用了。\n以后出门还是要做好卫生防范，多带点一次性用品，尤其是住宿条件差的时候，切记切记。\n在房间里睡了一会，补充了点体力，我们就出门去尖沙咀去了。\n尖沙咀的码头和星光大道离的差不多远，这2个地方都可以去，当时太晚了，我们就沿着街边逛了一下，找家店吃了点晚饭。\n吃完之后沿着坡开始闲逛，晚上的香港也很热闹，人来人往的。配合着老香港的灯，挺好。\n由于比较晚了，所以我和亲爱的决定去星光大道，天星小轮留着第2天再坐。\n星光大道的护栏上，有很多明星的手印，可以和手印打卡留念。\n对岸就是维多利亚港，和中环的各种高楼，保险，银行，证券等大楼的灯光，手机拍照不大好拍。\n类比一下的话，就是上海的外滩和陆家嘴，在星光大道上，就类似于在外滩看陆家嘴。\n机会难得，和各路名人的合影必不可少。\n看来上海抄香港抄的非常的成功？？？香港的是海，上海的是黄浦江。\n走完星光大道之后，我和亲爱的就准备回去了，今天也差不多了，继续往前走，不走回头路。\n在星巴克外面发现了李小龙的雕像，帅帅的。\n往前走，绕了一点，就很安静了，沿路有一些酒吧，看了一家酒吧在门口的表演，动次大次的，非常的带感。\n偶遇一辆跑车，帅的一。\n本来不打算去711买水的，结果走到门口，只有711了，所以在711门口买了个大桶，16.5hkd，打算晚上和明早喝。\nDay1结束，期待Day2的一横 city walk。\n一横 一横指的是Day2的港岛线，从西到东有一些比较知名的景点\n坚尼地城(不是地狱)， 小红薯知名打卡点 香港大学，知识吸取 太平山顶，看维港夜景的好去处，我俩时间原因没看成 中环，港岛中心，中环码头，中环摩天轮，皇后大道，兰桂坊，港交所等都聚集在中环 湾仔，我的第一印象是湾仔码头，这里我俩没去 金钟，这里有循道卫理大厦(基督教)，可以去做祷告，兵器厂，这个没找到在哪 铜锣湾，感觉和旺角差不多，人多热闹，适合闲逛 金钟 早上出来，先在一家店吃了早餐，pengq这家店10周年庆，打88折，小薅了一笔羊毛\n从尖沙咀坐地铁到金钟，我们先逛的金钟。\n金钟有2个打卡点，分别是循道卫理大厦和军器厂街。\n从金钟地铁站出来就是太古广场，高大上的一个商场，和边上的老旧房子形成了较为鲜明的对比。\n按着导航走，上天桥，下天桥，绕了一会，看了下香港的有轨电车的运行，香港和澳门一样，都是右舵车，看着稍微有点别捏。\n2层巴士穿梭在轨道上，信号不好，缺德地图还会让我迷失方向，太难了。\n循道卫理大厦是基督教大厦，我俩到的时候，刚好遇着他们在做祷告，我和亲爱的也不懂呀，站在门口安静的看了一会，然后我们就走了。\n不得不说，除了晒一点，天气是真的好。\n金钟到此结束，直奔铜锣湾。\n铜锣湾 我们这次体验到了有轨电车，不知道这是不是小红书上说的叮叮车。高德地图导航要看好车次，确认好每趟车的终点方向，避免坐错了。\n三港币/人，分为上下2层，香港的巴士大多都是2层的，上去的时候人还蛮多的，我们上了2层，感受了一下2层的风光。\n铜锣湾主要是人多热闹，小红薯推荐路线是一个也没遇上。说是有条街卖衣服的比较多，很多港风服装，结果过去一个都没遇到。\n噢对了，蜜雪冰城已经走出国门，开到香港了，在铜锣湾看到的时候，还有点吃惊，价格相比国内也翻倍了。\n在bakehouse买了一个蛋挞和一个提拉米苏。提拉米苏好可惜，我俩当时吃不下了，晚上拿出来看的时候，都化了，真可惜。\n右侧是bakehouse的队，排队的还是挺多的。\n好嘛，在铜锣湾的行程就结束了。下一站坚尼地城。\n坚尼地城 坚尼地城也是热门打卡点。\n首先是照着小红书的指引，来到了半山腰的一个篮球场的的打卡点，怎么说呢，隔着篮球网拍照，削微有那么一点不优雅。\n背后就是篮球场的网篮。\n亲爱的在努力拍摄海岸线的美。\n然后我和亲爱的就下去了，朝着海岸线走去。\n海边的人还挺多的，各种角度凹造型的，海风吹拂，阳光明媚，还得是海边舒服。\n天太热了，我们就撤离了，没有和摆子们一起卷。\n点了一杯奇形怪状的蓝色热销柠檬茶，第一次喝这么蓝的饮料。\n走进了一家店，准备尝一尝香港知名烧鹅+叉烧。烧鹅有点外焦里嫩的感觉，皮非常的好吃，叉烧有一点油了，要是更清淡一点会更好的。米粉一碗要12hkd，贼贵。\n不管到哪，都是高楼林立。\n坚尼地城打卡成功，下一站，知识吸取: 香港大学。\n香港大学 香港大学离坚尼地城挺进的，边上还有太平山，时间问题，我们没法去太平山了，所以打算去香港大学看一看。\n缺德地图又给我耍了一波，导航了一条小路，要疯狂的上坡，谢谢缺德地图帮助我们大太阳的锻炼身体。\n不过话说回来，也得感谢缺德地图，给我们提供了一个绝佳的看海景的地方，比那个篮球场优雅的多，而且有座椅，坐那优雅的看着远方的海港，很舒适。\n体态不大好，前面有肚子，后面拧肩，是时候舒展身体了。\n继续上坡，走了老久之后才上到路上，感觉至少上了海拔100米，太难了。\n然后就是下坡路了，这一段路下坡，有风，太阳没那么热了。从路上往下看，形成了好高的落差。\n![image-20240627230846123](/Users/since/Library/Application Support/typora-user-images/image-20240627230846123.png)\n到了香港大学之后，在外面吸取了一下知识，路的上下2面都是校区，依山而建的，占地面积看着很大，环境看着也不错的。\n校园太大，没进去看，静悄悄的来，静悄悄的走。\n另外目前香港大学周一到周六参观是要预约的，具体可以去关注下香港大学公众号看一下。\n中环 下一站就是中环了，中环是香港岛的中心，妥妥的港府中心了。\n我们一下地铁，就感受到了中环的奢华，各种地铁商业，地面各种奢侈品店。\n跟着导航去看兰桂坊，一开始搞错了，以为兰桂坊是个酒吧，后面发现是一条街道。\n匆匆看了一眼就结束了。中环的坡道也挺多的，上上下下的，花了半个小时，最终又回到了起点。\n皇后大道上人来人往，打卡拍照的也很多，我也跟风来了一张。\n沿着皇后大道去找中环摩天轮，又开始了地图绕路之旅。\n讲道理，不能没有地图，但是在香港，地图让你上上下下的，还有点难受，最终靠着亲爱的聪明的小脑袋瓜子，从负一层地铁出入口找到了路。\n讲究从哪下地铁，就从哪摸出来。\n从地铁出来，要过天桥，天桥的楼梯上坐满了人，可能是菲佣聚集地。\n一条过街天桥的2端，坐满了人，据我猜测都是菲佣，和百米之隔的中环商场形成了鲜明的对比。\n天桥的对面就是港交所，恶劣天气必关门的香港证券交易所。可惜周末不开门，且是晴天。\n中环摩天轮非常的好看，坐着看海肯定非常的舒服，但是我们到的时候排队的人已经非常的多了。\n无奈，摩天轮没坐成，那个队排起来，估计得2个小时起步。 PS:可以加50优先排队，不过我俩没加，和摩天轮合了个影，下次一定。\n从摩天轮出来，走几步就是中环码头，我们要从码头坐天星小轮去尖沙咀了。码头的景色也很美的。\n据说天星小轮运行了上百年了，为香港市民往返2地提供了非常多的便利和帮助，而且也很便宜，单人8khd。\n还好没坐晚上拉客的邮轮，晚上风大，小船晃来晃去的，而且还不知道有啥其他的坑点，感谢亲爱的。\n西九龙 到了尖沙咀码头之后，我们也该准备准备返程了。\n这次返程是买的高铁卧铺，从西九龙过关之后，有高铁卧铺可以直达京沪。\n除了去京沪的，高铁去广州深圳的会比较多，估计不少从深圳广州到香港逛的。\n我们仍然发挥11路的优势，散步去西九龙。码头到西九龙的路上，也很繁华。\n在路边看到了一辆富豪雪糕车，在摩天轮那要排长队，在对岸就根本不用排队了。\n这个地方也支持微信支付宝，不过是1:1的，会损失点汇率。\n西九龙站很大，第一关竟然是刷的身份证。有亿点点震惊。\n站内很大，餐饮商业少一点，里面便利店比较多，在一家店买了瓶水，水是真的贵，12.5hkd。剩下的大一点的店大概是美心了吧。花17买了个冰皮月饼，味道还不错的。\n在二楼的添好运，点了些当作晚饭，凤爪，汤包，肠粉，味道也还可以，就是要收每人15的茶位费，光茶位费就30了。\n我们的返程瞬间就变得优雅了，优雅的进站，优雅的吃晚饭，优雅的上车。\n再见，香港。\n高铁卧铺，返程。\n错过 在香港有几个没去成的地方，一个是太平山顶，可以在太平山顶看维港夜景的，周六晚上太晚了，就没有看成。\n另一个就是摩天轮了，没有坐上摩天轮。\n还有一个就是维港，维港夜景可能得实际去了才能感受到。\n注意事项 香港由于房租很贵，所以住房很堪忧，我们订的小间，10平米375hkd。价格还是有点贵。而且卫生条件有点堪忧。\n带了一次性四件套，亲爱的还是中招了，有条件的话还是得多带点一次性用品。有钞能力的话选择好一点的酒店。\n尖沙咀的重庆大厦和美丽都大厦不要住，据小红书说很不安全，里面的阿三很多，晚上安全要大打折扣的。\n尽量在入港之前兑一点港币，100-500港币备用，可以在汇率上优惠一点。另外支付宝微信支付也很普及，少备一点够用就好。\n感受 之前老听说香港歧视大陆人，歧视不会说英语的大陆人。\n这2天感受下来，不管是小店还是大店，当然奢侈品店没去，去不起，服务态度还蛮好的。吃烧鹅那家，对冻柠茶价格有疑问，也耐心解释了。\n只要不是年纪特别大的，基本都会说普通话。\n果然还是得实际感受一下才能有发言权。\n另外感觉香港的养老也很严重，在路上时不时的能看到佝偻着背的老爷爷老太太走在路上，看着年纪就很大。\n香港的房子大部分都很破旧，好几栋高楼围在一起，成掎角之势，外立面很旧，很多窗户都开的很小，房价当然也是挺贵的。\n香港的一些细节做的也比较好，没有红绿灯的马路，地上会有字和箭头，指示该看哪个方向的来车。望左就是注意左侧来车，望右就是注意右侧来车。\n香港的路边小店吃饭可能相对没有那么贵，我们俩有时候也会吃人均50，在香港不点大餐的话，人均50hkd也差不多了。\n但是水是会贵一点，怡宝要5kd，本地的一个蓝瓶子的水有的卖9hkd，有的卖12hkd的。\n水果也蛮贵的，按磅计重，车厘子有的卖60一磅，有的卖80一磅的。\n总结 我们的香港之旅总体来说还算可以，时间利用比较极致了。\n香港的吃的相比澳门更加的对我们的胃口，我们都蛮喜欢的。\n香港比澳门更大，所以city walk的景点也更加的多。但是这两天走的都没有在澳门走的多，不知道为啥。\n看海看山看人文，总得来说，香港之行体验还是不错的。\n","permalink":"https://blog.thend03.com/posts/city-walk-at-hongkong/","summary":"\u003cblockquote\u003e\n\u003cp\u003e又是一次极限奔波，目标直指香港\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e在6月初我们探索了澳门之后，我们在6月变得越来越充实了，回家，安吉，然后就是本周的香港，起立，敬礼。\u003c/p\u003e\n\u003cp\u003e澳门见闻参见:  \u003ca href=\"https://blog.thend03.com/posts/city-walk-at-macau/\"\u003ehttps://blog.thend03.com/posts/city-walk-at-macau/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e照例做了一个香港的攻略，和澳门攻略大差不差的。\n\u003ca href=\"https://docs.qq.com/doc/DWWJjRnprV1ZUSmdt\"\u003ehttps://docs.qq.com/doc/DWWJjRnprV1ZUSmdt\u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"香港简介\"\u003e香港简介\u003c/h1\u003e\n\u003cp\u003e香港感官上比澳门大多了，也分为几个部分\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e香港岛\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e香港岛对岸的油尖旺区\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e离岛区\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e靠近深圳的一大片岛\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/thend03/mdPic/picGo/202406252000773.png\" alt=\"image-20240625200024718\"  /\u003e\n\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e看着地图还是蛮大的，但是香港市中心的密密麻麻的高楼，老房子，看着相当的压抑和魔幻，房价折合人民币大概22万/平米\u003c/p\u003e","title":"香港见闻"},{"content":"又匆匆过了一季度，二季度相比一季度更加的完整，有忙碌也有空闲。相比一季度，二季度可能去的地方更加的多，见到的也更多\n2024一季度总结\nApril 最美人间四月天，每年的四月下旬，天气都是比较舒服的，温度适宜，晚上有风，吹的人非常的舒服。\n加班 4月初为了赶版本，上来就是先加个班，非常的顶。\n刚工作的时候，对加班非常的不耐受，现在周末加班2天，加起来连上10天，加班的时候比工作还努力，每天9，10点下班，倒也能撑的住。\n但是这也只限于短期加班，长期加班肯定受不了。\n没能和亲爱的一起去无锡，追赶晚春，是春天的一大憾事。\n接近春天结束了，特别适合出去春游，期待明年和亲爱的一起去春游。\n清明休息 在经历了我家狗儿子，狗闺女疯狂闹腾，搬家，继续闹腾，加班等等折磨之后，清明终于有时间休息了一下。\n第一天就带了我们的狗儿子和狗闺女出去洗了个澡。外面洗澡属于花钱洗干净，洗的认真加干净，而且洗完香喷喷的，可以和我们一起睡了。\n塔塔这个造型，一看就不大聪明\n在小区里散步，遇到了塔塔川川刚认的好朋友，非常的友好，我们一家四口没事回去找二虎一起玩一玩\n第二天带着儿子和闺女去了天平山，她俩还小的时候就带到天平山拉练了，所以从小就有一个良好的成长环境，多好。\n人多的时候得给他俩牵好，不然都不知道是狗怕人还是人怕狗。\n来了辆救护车，不知道是摔了还是骑车摔的，还是有点危险的。\n第3天由于我的失误，得去南京抢救一下牙套，来了个南京快闪，为我的错误向亲爱的道歉，回来还堵车了，老累了。\n勇闯小西北 在下旬的时候，我俩又来了次说走就走。第一次两人携手闯荡了一下小西北。\n2天2晚历经了西安，天水，洛阳，特种兵旅行的巅峰。\n西安 周五晚上坐卧铺到西安，这是我第一次坐卧铺，新奇的体验。不过等车的时候我俩走反了，上车时才发现，然后朝反方向狂奔，优雅不了一点。\n有一个大哥打呼打了一晚上，真的离谱，吵死了，就4个铺，25%的概率都遇上了，老难受了。\n然后到了西北第一大市，西安。西安是古代很多朝代的都城，历史文化底蕴都是有的。\n然后在火车站附近看了免费不用门票的兵马俑，合理\n绕着绕着遇到了一个公园，然后进去逛了一下，里面还挺热闹的，有小学生在写生，有大学生在做志愿活动，有老年人在休息。\n后来我们刷攻略刷到了一个地方，大唐鬼市，里面有卖各种古玩的，反正我俩也看不懂，就随便看看，买是不可能买的，买不了一点。\n逛完了鬼市之后，我俩左右无事，就打算去大唐不夜城逛逛，到那才下午，根本没法等到晚上，老难了。\n然后被一个人忽悠去店里整了汉服拍照。虽然但是，槽点太多，容我一一介绍。\n首先是我俩没有拍过这种类型的照片，所以经验有限，本着第一次来西安，不如尝试下不同的风格，毕竟来一趟也挺不容易的。\n后来就被不夜城门口拉客的垃圾老大爷拉到一个汉服拍摄馆里了。\n店里衣服倒是挺多，本来只打算亲爱的一个人拍，后来想想不如2个人一起拍照留念一下，于是从租一套衣服，变成了租2套衣服。\n第一次谈价，衣服倒是看着2个人优惠了一点，一人一套100，2套是200。\n后面就是摄影师拍照，第一个槽点这就来了，摄影师拍照是200块30张，我俩觉得还行，就定了店里的摄影。\n结果到了外面，路上很多喊着100块30张的，这是第一个冤种的地方，店里吃准了这个信息差，有枣没枣先搂一竿子，我俩就是被搂到的那个。\n第二个槽点就是我本来没打算化妆的，不过后来说化淡妆好看一点，然后加了50块钱化了状，整个无语，粉饼新的10块，这个倒还能接受。\n然后亲爱的画了个彩绘，30，粉饼10块，2个人又支出了100块。各种各样引导消费，虽然倒也不多，但是很难受，全是额外支出。\n第三个槽点就是我总感觉摄影师是业余的，还有点不耐烦，拍照过程体验不佳，感觉很随便。\n感觉摄影师随便选了2，3个地方，就拍完了，那个大雁塔的景，让我有一种黑人问号的冲动，不知道是我太业余，还是摄影师太专业，总给我一种摆着笑脸不耐烦的感觉，服务水平九折？当然200块要什么自行车，就这样吧，但是，100块说不定体验更好呢！！！！\n第四个槽点是选照片,用电脑随便ps了一下，人工精修一张要加80，30张要2400，我可真的佩服，最后我俩一张都没精修，就这样吧。\n第五个槽点是没法卸妆，拉客的老头子交钱的时候说的好好的，有问题找店员，要卸妆的时候店员说店里卸不了状，真的会谢，说是肯定没和她说，我可谢谢他们了。\n第五个槽点是屈臣氏的员工。没办法，状还是要卸的，对面有个大悦城，我俩想去屈臣氏买卸妆水卸的。\n离谱的来了，店员说没有试用装，简而言之得买，而且店里没法卸，得去卫生间，但是店离卫生间比较远，我俩只能买了卸妆水之后，去卫生间，发现就1，200米，整个一个无语，就是不想动，一点步都不挪呗。虽然她们没有义务，但是体验仍旧极差。\n虽然我俩交钱之前反复确认了一些细节，但是只有你想不到的，没有她们做不出来的，不管小坑大坑，总得被坑一点。\n成片倒还可以，至少比我们自己拿手机拍优雅一点了。\n但是我我感觉虎丘塔都比背后的大雁塔好\n最头疼的一项来了，在西安，吃的就没一口是合口的，吃的相对较好的竟然是在高铁站吃的臊子面。\n从早上吃的第一口肉夹馍开始，再到牛肉面，再到2份擀面皮，这几个都很咸很油，吃不惯。我们这的肉夹馍，会加青椒，加蒜瓣，西安的肉夹馍没有，只有肉和汁。\n中午去吃了一家水盆羊肉倒还可以，但是西安的馍得自己掰，那个馍很硬，掰的我俩手都疼了，难顶。\n傍晚在高铁站吃了个臊子面，味道还可以，然后就结束了我们在西安的旅程。西安，再也不见了。\n天水 今年年初天水麻辣烫很火，我们住的地方，四月份左右，有甘肃人摆小推车卖麻辣烫。我们去吃了一下，感觉味道确实nice。\n买了蹲在路边吃，也算是新奇的吃饭体验了\n由于在西安只用待半天(还好只待了半天)，所以我们打算来个极限冲刺，从西安坐高铁去天水转车，中间空闲在天水吃个正宗天水麻辣烫。\n为我们的极致奔波行为点赞。\n高铁只到天水南站，我们要从天水站坐卧铺，所以还得打车去天水站，在小红书找了个攻略，打车到点之后，司机停的有点远。\n我们发挥了本就所剩无几的跑步实力，气喘吁吁的，路上遇到一家店，看着人很多，我俩进快速进去选了麻辣烫。\n由于时间紧张，我们还插了个队，得到了本地居民的支持，感谢各位好心人。\n见一见天水本地现拌麻辣烫\n烫好之后，时间只剩不到10分钟了，我俩又奔跑着进站了。气喘吁吁的，再次不够优雅，不过还是赶上了车。\n我们在车上，吃上了正宗的天水麻辣烫，味道确实绝佳，我看店里给我们加了一大勺辣椒，但是吃着不是很辣，味道香香的，为我们的奔跑点赞。\n在天水停留的短暂的时间，发现天水的夜色还是挺美的，据说天水也是一个知名的旅游城市了。\n然后就是一路卧铺去往洛阳了。再见天水，要是时间充足，天水应该是值得多逛逛的。\n洛阳 本来我们的目的地是只有洛阳的，奈何没买到票，所以去西安拐了一下。所以洛阳行程变成了西安-天水-洛阳。\n早上7点多到的洛阳，洛阳打算去三个地方，植物园看牡丹，白马寺，龙门石窟。\n植物园 首先是植物园，我们挑了个离的比较近的植物园，隋唐城遗址植物园，这个植物园好像还要门票，忘记多少钱了，不得不吐槽一句，牡丹都谢的差不多了，还收门票。因为我们到的比较晚了，下旬才去，牡丹都谢的比较多了，只有西门的牡丹还有一点。\n一下地铁，走在洛阳的路上，道路宽敞整洁，阳光明媚，鸟语花香的，对洛阳的第一映像一整个喜欢。\n我们是走的北门进的植物园，那会比较早，才7点多，都没啥人，整个植物园很大。北门比较幽静，树很多，但是牡丹聊聊无几。\n我们在园子里各种穿插，问了人，说这会只有西门有牡丹，然后历经1个多小时的徒步，终于到了西门。\n西门相比于整个园子，虽然也有不少谢了，但是仍然是一片牡丹花海，牡丹和月季穿插，交相争艳，美不胜收。\n在春天的末尾，见到了整个花海，感谢亲爱的，和我一起远赴洛阳看花。\n最后出来的时候，买了2束干花，陪着我们到现在了。\n白马寺 从植物园出来，我们就去下一个地点了。目标白马寺，出发。\n亲爱的在小红书上找了家胡辣汤，在白马寺附近，我们是先去吃的糊辣汤，然后步行到白马寺的。\n不得不说，洛阳和我们的磁场相吸，比西安好太多了。\n我们喝的第一口糊辣汤，吃的第一口小油条，豆腐脑，都很好吃，很符合我们的胃口，洛阳真的棒，适合我们。\n这边的油条是小油条，按斤称的，然后顺便点了半份小笼包。\n吃完我们就往白马寺门口去了。白马寺门口真的热闹，这还不是五一，门口各种摆摊的，各种游客挤满了大门口，人真的多。\n白马寺中国建筑部分不大，人比较拥挤，难以想象五一的时候该有多挤。\n白马寺还有一部分东南亚建筑区，有泰国的，印度的，缅甸的建筑区，极具东南亚特色，不知道是古代就有的，还是现代后建的。\n东南亚区比较有趣的，比国内的佛教建筑有意思，比较新奇，毕竟国内建筑风格比较多的。\n差不多1个小时就可以逛完了，逛完之后在附近吃了个牛肉汤和烩面，很满足。\n白马寺真的堵，打个车也堵，车在对向车道迟迟过不来，老难。\n我们下面就赶着最后的时间去看一下龙门石窟了。\n龙门石窟 龙门石窟是在河边还是江边建的，到游客中心之后，还得坐接驳车进到检票口，有点远。\n然后就是上上下下的台阶了，沿着江边有一排排的佛像石雕，有的石雕，佛头都没了，估计是被偷盗了吧。\n大佛是在中间位置，要爬老高，但是我们还是顶着炎热的太阳，上去了，虔诚的很。\n下面的佛像我们就随便逛了一逛，相比龙门石窟，还是乐山的东方佛都地宫，更加的让我震撼。\n出来之后做个小黑车到游客中心，打车到龙门站，路上买了点零食，毕竟要坐6个小时的高铁。\n这次返程终于优雅了一点，提前半个小时到了车站，静静等着发车，非常的优雅。\n再见洛阳，返程。\n考试 突发奇想，报名了园区的考试，考的全是行测，申论，第一次考这玩意，只能说和专业不符，需要多刷题，多背题才行。\n手术 时隔1年，亲爱的近视激光手术终于安排时间做了。最终在4月底安排了时间做上了，一路坎坷。\n做手术的时候我在外面也很紧张，毕竟要对角膜动手术，索性做的很成功，感谢医生，感谢亲爱的，接下来就是静静的恢复了。\nMay 接下来就到了五一了，今年五一留苏州陪亲爱的修养。照顾1人2狗，努力做好好爸爸的角色。\n周边闲逛 没法走远，所以就就近逛了一下，去了阳澄湖，阳澄湖的天气挺好，人也挺多的，非常适合在那边躺尸。\n然后顺势去了昆承湖，不愧是常熟，就是有钱，常熟的环境也很优美。\n带狗儿子和狗闺女去了市中心的商场吃了饭，那家店是个地面商场，那家面馆可以带狗到阳台上吃饭，非常的赞。\n我们吃了苏式面，浇头还是丰富啊。\n2人2狗去了湖边散步，看着熙熙攘攘的人，让狗吹个湖风，非常的舒适了。\n后面又去了尹山湖遛狗，走了走步道，步道挺长，适合遛狗。\n这个假期，做了N多次饭，打扫了N次卫生，我是奶爸我自豪。\n修手机 假期最后一天，手机突然坏了，然后去售后修，要跑老远，修好了sim卡，屏幕给拆坏了，我服。后来到家，相机又坏了，更服了。\n得跑2趟才能完全修好，魅族售后水平有点不大行，手机果然也会有小毛病，买完不久还降价打骨折，真的谢。\n送狗回家 经历过3月的奔波，又要给狗送回去了，狗天天叫一直被投诉，没办法，拖不了，只能回去了。\n现在狗已经当家做主了，床上一边一个。\n由于五一调休，还请了一天假，下午回去大暴雨，能见度为0，真的是相当恶劣的环境。\n周日是母亲节，为丈母娘和舅奶买了一束花，装饰节日，给我妈发了红包，讲究一个兼顾了。\n当咸鱼 有个周末亲爱的回家去了，我去我弟那躺了一下午，我俩换着躺，然后玩了一下午的游戏，好久没玩游戏了，相当松弛。\n果然前期会很坑，后面越打越手热，电子竞技，没有年老。\n坐公交闲逛 周日上午去考完试之后，我俩去吃了个饭，左右无事，所以我和亲爱的突发奇想，好久没坐公交了，于是我俩就上了一趟公交。\n由于我看错了终点，本来想去南环桥批发市场的，结果终点是南环桥装饰城。\n所以由于我的错误，在公交上晃了一个多小时，然后我被ko了一顿。\n后面痛定思痛，打车去邻里中心找tony老师，结果tony不在，然后坐地铁去长申wash face。然后又坐地铁回去找tony剪头，效果还挺不错，不愧是时尚的tony。剪完也差不多晚上了，我俩就坐地铁回家了。\n偶尔坐坐公共交通也还行，可以2块钱坐全程了。\n五月最后一个周末就这么悠闲的过去了，好久没这么松弛了，还是得保持一定的松弛感。\nJune 6月天气就热起来了，6月那相比五月，那更是强度翻倍了。\n生日快乐 6月初，适逢儿童节和亲爱的生日，于是我们又开始特种兵出行了。我们一合计，准备出境，直击澳门。\n澳门处处透露着奢靡，而且对大陆人比较友好，不管谁都能尝试和你沟通一下，都很友好，就是吃的不大能吃的习惯。\n澳门见闻\n端午 端午有3天假，于是我们就回家了。\n端午高速都不免费，但是还是有那么多人，开车老堵了。\n回家之后，见到了分别一个月的狗儿子和狗闺女。还是和之前一样，每次刚一见面，都很激动，疯狂的往身上跳，虽热情，但是夏天爸爸妈妈的身体还是有点遭不住呀。\n家里都开始收麦子了，回家果然睡不了好觉，5点多村里的人就起来活动了，睡不了一点。\n傍晚的时候回镇上逛街，吃了炸串，味道极佳，逛了服装店，果然镇上还是值得大力消费的，晚上买了晚饭回家吃饭。\n还得是在家，日子感觉被拉长。\n然后回我家的时候，修路封路，由于我的操作和判断失误，底盘被刮了，还好没有坏。吸取教训，下次会伤底盘的事一律不做，宁愿绕一点路。\n第3天在县城，逛了我们常逛的一条街，买了个不大好吃的蛋糕，给亲爱的庆祝一个生日，圆满。\n安吉 周五晚上和朋友小聚了一下，各自拿出了自己的拿手菜，然后以一局掼蛋收尾，恭喜姐妹们复仇成功\n周六检查完底盘，吃了从尹山湖搬到木渎的甘肃麻辣烫，然后，我俩又开始了新的旅程\u0026mdash;-安吉。\n先去安吉和亲爱的家的表妹以及她老公吃了个饭，逛了安吉县城的九州夜市，热闹倒是挺热闹的，就是卖的玩意比较普通。\n安吉整个县城看着都不大，感觉都没沭阳县城面积大，可能是景点都分散在下面乡镇了。\n晚上住在大竹海景区附近，发现了一只可爱修狗，可惜我俩没法带着走了。\n早上我俩醒的比较早，拉开窗帘，对面就是大竹海景区，山上密密麻麻的都是竹子，当得起竹海这个称呼。\n然后我们就沿着路两边走，一会上个坡，一会下个坡，漫步在竹林里，呼吸着新鲜空气，看着高端民宿，一整个心旷神宜。\n逛完回民宿吃早饭，端上来满满的白粥，油条，鸡蛋，咸菜，酸笋，玉米，整个一吃撑了。白粥配咸菜确实是绝配。\n等到另外2位到了，就去漂流了，这我们第一次漂流，地点选的民宿老板推荐的地方-藏龙百瀑，体验还可以。\n漂了大概1个多小时，雨衣根本没啥用，只会全身湿透，而且前期我俩菜鸡，根本掌控不了方向，很多时候都原地打转，甚至倒退，不过欢乐是真的欢乐的。\n漂完回来之后，在民宿洗了澡，吃了民宿的饭，民宿的饭都挺合我们胃口的，都吃完了，那个鸡汤里的鸡，我怀疑会不会是早上我们看到的某只竹林鸡。\n下午去逛了余村，余村可了不得，联合国旅游乡村，不过里面确实挺漂亮的，在一个卖东西的小茅草棚里，给我找到了一个绝佳的凹造型的场所，凹了会造型。\n然后在里面逛了逛，找个地方坐了坐，亲爱的奇思妙想又开始了，去摘杨梅，我直呼好家伙。\n去摘杨梅的路上，去看了下灵峰寺，据说灵峰寺是灵隐寺的姐妹寺，遥想灵隐寺还是我俩20年的时候去的了，都过去4年了。\n灵峰寺在山上，要走一段路的，非常的幽静，整个寺看着养护的非常好，人也不多，寺内景观美丽，适合去逛一逛。\n接下来就是去摘杨梅了，可惜杨梅都快下市了，只有路边零星的在卖，表妹她老公买了送了我们一点，然后我们便踏上了返程。\n安吉总的来说环境好，适合周末放松一下，好山好风景，好像没有啥湖，热门网红景点一个都没去，完美避开人挤人，收获了一个松弛的周末。\n香港 6月高强度外出，在月底安排了一次香港，截止写稿时，还没去，但是我想香港也是6月记忆的重要组成部分。不知道香港人对大陆人是不是如说的那么恐怖。期待香港之旅。\n","permalink":"https://blog.thend03.com/posts/2024-q2-summary/","summary":"\u003cp\u003e又匆匆过了一季度，二季度相比一季度更加的完整，有忙碌也有空闲。相比一季度，二季度可能去的地方更加的多，见到的也更多\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://blog.thend03.com/post/2024-q1-summary/#%E6%80%BB%E7%BB%93\"\u003e2024一季度总结\u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"april\"\u003eApril\u003c/h1\u003e\n\u003cp\u003e最美人间四月天，每年的四月下旬，天气都是比较舒服的，温度适宜，晚上有风，吹的人非常的舒服。\u003c/p\u003e\n\u003ch2 id=\"加班\"\u003e加班\u003c/h2\u003e\n\u003cp\u003e4月初为了赶版本，上来就是先加个班，非常的顶。\u003c/p\u003e\n\u003cp\u003e刚工作的时候，对加班非常的不耐受，现在周末加班2天，加起来连上10天，加班的时候比工作还努力，每天9，10点下班，倒也能撑的住。\u003c/p\u003e","title":"2024二季度总结"},{"content":"澳门赌场没有性感荷官，一个都没有。 I said.\n周末儿童节加上亲爱的生日，于是我俩一合计，准备来一场出境之旅。让3月份办的港澳通行证发挥价值。\n我俩一直都是在国内转悠，还没出过大陆呢，澳门也算是我俩的第一次出境之旅。\n然后就是疯狂的看机票，做攻略了，然后来了一场周末说走就走的出境之旅。\n我俩把小红薯的澳门攻略都翻烂了，最终我俩制作了一个如下的自用的澳门攻略 https://docs.qq.com/doc/DWXdqekNlZHB3eGJu\n澳门简介 先来简单介绍下澳门吧\n澳门不大，据说整个澳门只有浦东机场的一半。\n澳门分为3个部分： 澳门半岛、氹仔、路环。\n比较知名的地方就是澳门半岛和氹仔了。澳门半岛是老城区，离珠海很近，下图的最上边的拱北口岸就是珠海的口岸，可以从拱北口岸快速过关到澳门。\n澳门半岛 半岛有很多的小巷子，吃的也比较多，价格适中，另外起起伏伏的路和阴雨天比较搭，比较有氛围感。但是有些吃的不大适合我俩的胃，有浓重的粤式风格。\n要是让我来评价澳门半岛的话，我愿称之为广东版重庆，半岛的建筑和路很像重庆，街边的老房子，以及起起伏伏高低不平的路，真的像。\n氹仔 氹仔是泥沙堆积，后面填海造路填出来的地。在氹仔有很多的酒店和赌场，以及豪华的购物中心，非常的奢靡，论奢靡程度，我个人感觉是远超上海市中心的。\n威尼斯人、伦敦人、巴黎人这3个人是一体的，有走廊可以互通，好象是一家的，集赌场、购物中心、酒店于一体，要多奢靡有多奢靡，已经超过我的文字描述了。。。。。\n伦敦人的建筑风格是英式建筑，外面有钟楼，城墙，钟楼好像是仿大本钟的，里面看着就像英伦贵族风。\n威尼斯人里面有一个人造天空顶，大晚上的进去看，天仿佛还是亮的，让人分不清昼夜，在顶楼还有人造河和游船，和天空顶交相呼应，非常的有梦幻。\n巴黎人外面有一座铁塔，据说是仿的巴黎埃菲尔铁塔的，可以在6楼参观塔底，不知道白天可不可以上去。\n官也街是一条网红街，里面有不少的店，葡餐店比较多，当然价格也比较贵，好像是葡式街区。\n路环 路环更加偏远，基本没啥景点，交通也不大便利，就不做过多介绍了。\n亲爱的和我的澳门之初体验 我们是周六中午到的澳门，先在酒店入住之后，就准备做酒店的免费大巴去澳门半岛逛一逛了。\n酒店都提供免费的穿梭巴士，可以去到指定地点，简单叫法就是叫发财车。\n周六那天由于台风刚过境，所以周六整天都在下雨。还好我们带了一把伞。\n我们酒店定在氹仔，然后酒店有免费的巴士送到半岛的他家酒店去，但是到了半岛的酒店之后，就只能打车/公交/走路了。\n还好亲爱的之前先为我俩买了一双运动鞋，2天实测下来，又舒服，又防水，还不贵，点赞。\n半岛city walk 坐发财车到了半岛之后，我俩就开启了在澳门的city walk。\n当时风雨大作，我俩撑着一把小伞，在风里雨里穿梭，别样的澳门体验。就下面这个路，不说是澳门的话，我觉得和重庆相差无几。\n一开始我还不知道这是哪栋楼，第2天才知道是新葡京\n然后我俩就沿着导航，朝着大三巴牌坊进发。中间进了一家路边小店，吃了个不那么好吃的午晚饭。\n补充了点体力之后，准备继续出发，另外说一句，澳门很多可以刷pos机的店，都支持微信和支付宝，而且是按照实时汇率折算的，这一点比较赞。\n大三八牌坊是半岛的知名景点，好像和天主教有关，这种人文景点，没有解说，很难体会到精髓。而且路和重庆真的很像，我俩1，2公里的路上上下下的，来回倒腾。说到大三巴牌坊，我就想起了解放碑。\n当时下着雨，我俩匆匆看了一眼，就继续去逛小巷子去了，小巷子逛逛也挺好的，我俩逛了一个超市，买了点吃的，继续出发，然后又钻进了一家店，吃了一碗鸡汤米。鸡汤米味道挺好的。\n不知不觉就到晚上了，我俩也不知道穿了多少个巷子，逛着光着买了个抹茶鸡蛋仔，抹茶鸡蛋仔赛高。\n在十月初五街买了杯自制水果饮料，在不知道哪家的钜记手信店蹭了2块杏仁酥吃了一下，甜甜的。\n好了，这天最冤种的一刻来了，我们在路边看到了一家卖大虾仙贝的店，一张超大的饼，里面放一个虾，压成薄饼，卖的还挺贵的，要80mop，我俩想买来尝一尝，结果果然这个饼的作用就只有做好那一刻拍个照，一点都不好吃，好冤。\n然后我俩就坐公交回氹仔了，澳门公交也是不找零的，需要自备零钱，但是呢，云闪付，微信，支付宝也支持开澳门的电子公交卡了，开通就能乘车了，单趟6mop。应该也是按实时汇率折算的。\n澳门的公交到站需要伸手拦车，下车之前要提前按铃，不然司机是不停的，这个要注意一下。\n逛三个人 我们本来打算下公交走回酒店的，不过我们的下车点是新濠，离3个人很近，我们下车就看到了3个人，于是我俩又冒着雨去三个人逛了。\n离我们最近的是伦敦人，外面有一个大笨钟，和伦敦人主体组成英伦风建筑，里面是赌场，酒店，购物中心，非常的奢华。\n伦敦人，巴黎人，威尼斯人3个人是联通在一起的，从伦敦人出来，可以通过走道直接到巴黎人。\n巴黎人有一个高仿的埃菲尔铁塔，大晚上的也挺好看，进去参观之前，还拍了个照，一个相框+一个水晶球，要398mop，可惜太贵，我俩没拿，u1s1，p上铁塔还挺好看。\n从巴黎人出来之后，就到了威尼斯人，威尼斯人也挺奢华的\n里面有知名的人造天空顶，配上人造河和小船，如痴如幻，真的有种置身威尼斯的感觉。\n里面亮堂的犹如白昼，外面现实确是一个下着雨的漆黑夜晚，差距极大。\n逛完威尼斯人我俩就不行了，今天大半天走了有2万多步，然后就准备回酒店了。\n美狮美高梅也在附近，打卡美高梅的标志黄金大狮子。\n碰巧，赶上酒店的缆车了，酒店有免费的缆车服务，绕酒店一周，坐着缆车飞在人造湖上，看着下面音乐喷泉以及灯光，真的美丽。\n结束这一天的澳门city walk，入睡，期待第2天的city walk， 晚安亲爱的。\n半天走了2万5000步，辛苦了。\n继续澳门的city walk 周日天气比较好，没有下雨，今天可以不用带伞出门了，我们住的酒店提供免费寄存行李服务，住或者不住都可以免费寄存，也可以不用背包出门了，也挺好\n早上起来，就正对着澳门机场，酒店离机场实在是太近了，但是隔音做的好，一点噪音都没有。\n今天的计划是继续去半岛逛一逛，然后看一看出名的表演。\n我俩差不多中午出的门，蹭MGM的发财车去了半岛，然后又开启了半岛的半日闲逛。\n第一个目标就是去领16浦的免费叉烧饭，16浦在大三巴附近，靠近口岸了。我俩在走过去的路上，又看到了大三巴，以及天主教堂，好像在做祷告。\n路上还路过了澳门市政署，非常的朴实无华且破旧，还有一些公告挂在墙上，里面还有澳门卖文创的地方\n然后经过各种辗转之后，以及漫长的等待，终于白嫖到了十六浦的免费叉烧饭和猪扒包，不过味道都不大行，叉烧饭太油腻了，大块的肉\n我们继续在半岛逛呀逛，参观半岛的老房子，以及风土人情。\n路过大三巴以及玫瑰堂天主教堂的时候，附近有一家推荐的粉不错，我俩去吃了碗河粉，味道非常的nice\n休息好之后我们朝着新葡京进发，路上我们又拐到了另一条路上，吃了一碗酸辣粉，不过酸辣粉味道一般，而且店里态度不大好，而且只收现金。\n到了新葡京之后，看着金碧辉煌的新葡京，再看看附近老旧的居民楼，差距极大\n我和亲爱的在澳门为数不多的合影之一，借了新葡京大楼做的背景墙\n里面的装饰物看着也都挺贵的。。。真的是豪华的娱乐场\n看表演 剩下的时间我俩看了2场表演，1场是永利澳门的发财树表演，据说树是纯金打造的，造价大约2个亿，在半岛，表演场地的天空画了十二生肖。\n看完发财树表演，刚好坐对面星际酒店的发财车，到银河酒店，刚好赶上6:30场的钻石表演。据说那颗钻石造价大概18.6亿，越来越离谱了。\n逛官也街 看完主要的表演之后，我和亲爱的准备去官也街逛一下，官也街属于澳门的网红街了，街边有很多的店，我俩买了个冰淇淋吃了一下，五颜六色的非常的好看\n逛了半天，我俩也不知道吃啥，最终吃了一顿葡餐，我俩心有灵犀的一人点了一份海鲜面，一人点了一份海鲜饭，吃完之后我俩一致觉得\n：上海nikoand的套餐极具性价比。这个根本不好吃，还贼贵，果然是不适合我俩的饭。\n逛完官也街之后，我俩商量着准备回酒店去拿行李，然后坐了澳门的轻轨，到了新濠天地，然后又逛起了新濠天地，意外发现黎明还在里面开了演唱会，不过我俩发现的时候，已经散场了。\n后面回到酒店的时候，刚好赶上了音乐喷泉在表演，一切都是刚刚好。\n体验伦敦人 后来凭借亲爱的高超的砍价技巧，我们不至于沦落街头，体验了一把伦敦人的房间，今晚的房价相比昨晚有了大幅的跳水，而且房间格局也比永利的好。\n澳门见闻总结 总体来说，澳门之行还是比较愉快的，澳门的所有服务人员，不管啥肤色，种族，都能尝试着和你讲2句普通话和中文，游玩体验非常的nice。葡人也尽量说些简单的英文单词，比如id card之类的。\n吃 吃的话我们主要是在半岛吃小吃，饭啊，面啊，河粉之类的，以及蹭酒店的奶茶，葡挞，小食饮料等\n住 住了2晚，周六的和周日的价格天差地别，周六的除了免费的水其他啥也没有，周日的房间好是好，就是得赶飞机，只睡了4，5个小时\n行 出行主要是公交，发财车，加两条腿，2天走了5万多步，每天都走了2万5000+步，打车就打了一次凌晨去机场的，我怀疑司机绕路了，而且用的微信付了，还损失了点汇率\n乐 众所周知，澳门博彩业非常的发达，我俩作为第一次去澳门的人，当然是参观了下赌场，赌场对外都叫娱乐场，里面提供很多免费的小吃零食。我俩在MGM蹭的比较多，其次是永利，新葡京，三个人啥的基本上没蹭到啥吃的\n亲爱的在MGM一把挣了好像100多港币，最终提现89港币\n纸币 为了应急，在出关的时候兑了点澳门币，在赌场兑了点港币，我们用赌场办会员卡送的币玩了老虎机，亲爱的手气极好，2天挣了100多港币，而我不仅没挣钱，还亏了一点，真的我就没有赌运，感谢MGM\n总结 第一次出境，体验还是不错的，澳门比较小，差不多1，2天就能逛完了。\n然后亲爱的儿童节和生日快乐，下次我们再一起去探索别的地方。\n","permalink":"https://blog.thend03.com/posts/city-walk-at-macau/","summary":"\u003cp\u003e澳门赌场没有性感荷官，一个都没有。 I said.\u003c/p\u003e\n\u003cp\u003e周末儿童节加上亲爱的生日，于是我俩一合计，准备来一场出境之旅。让3月份办的港澳通行证发挥价值。\u003c/p\u003e\n\u003cp\u003e我俩一直都是在国内转悠，还没出过大陆呢，澳门也算是我俩的第一次出境之旅。\u003c/p\u003e\n\u003cp\u003e然后就是疯狂的看机票，做攻略了，然后来了一场周末说走就走的出境之旅。\u003c/p\u003e\n\u003cp\u003e我俩把小红薯的澳门攻略都翻烂了，最终我俩制作了一个如下的自用的澳门攻略\n\u003ca href=\"https://docs.qq.com/doc/DWXdqekNlZHB3eGJu\"\u003ehttps://docs.qq.com/doc/DWXdqekNlZHB3eGJu\u003c/a\u003e\u003c/p\u003e","title":"澳门见闻"},{"content":"2024年不知不觉就进入2季度了，一季度仍然在忙碌中度过，除了个人提升，其他过的也挺愉快的。\nJanuary 海天一洲 有车之后活动半径确实大了许多，元旦去了老久之前就心心念念的杭州湾跨海大桥，大桥在海上，而且在高速上，杭州湾跨海大桥，北面是嘉兴，南面是慈溪，风景非常的好。\n晚上我们住海天一洲，元旦的时候人不是很多，开车的时候走在大桥上，非常的心旷神怡，开80，慢慢晃，追着落日，迎着夕阳，充满了向往与希望。\n酒店整体还行，不过饭菜不大好吃，不如吃泡面，前台可以兑游戏币，我俩去投了个篮，运动了一下，可惜币只能投一次，然后我俩又去玩了台球，2个台球菜狗子在那疯狂秀，场面太惨，不忍直视。\n第二天早上我俩就去观光塔参观了，楼顶可以看周围的海，不过海水黄黄的，周围啥都没有，风景不大好，楼顶有玻璃底，从上往下看老高了，对于恐高症患者来说太过艰难。\n观光塔设计在海里，第一次见还是挺新颖的，不过风景确实不大行，逛了一会就结束打道回府了。\n总的来说，没去过的可以去看一下，适合自驾去，然后酒店环境挺好，房间也不错，价格能接受，不知道是因为偏还是咋的，元旦没涨价。\n然后那个饭菜是真的不好吃，观光塔么风景一般，就这\n晋升 年底得到了一次晋升的机会，领导要求的比较严格，结束之后再回过头来想，不管是要不要晋升，晋升结果如何，总归要对自己这一年负责。\n想清楚去年干了什么，去年的成果是否符合预期，今年要做哪些东西。我觉得多想想这些对自己也是有好处的。\n不过对于我这种不想汇报的人来说，写ppt真是让我头大。硬着头皮写吧。要么领导是领导呢，不说技术方面，单说写ppt的思路，如何抓重点方面，就有的学习了。\n最终在数轮的修改，预演，修改之后，前后进行快一个月，终于把晋升答辩给熬过去了。太难了，越往上这些软实力还是要多注意修炼。\n很多时候我感觉还是要多谋定而后动，多想清楚自己要干什么，多向前看，不要没有章法的乱焦躁，得想办法看清前面的路，然后一步步往前走。\n探索独墅湖 独墅湖月亮湾附近，有个公园，公园临独墅湖，有一块空地一直没有开发，我俩遛狗的时候老是看到那么大块空地，所以想着多去探索探索。\n然后找了个周末去探索了一下，那个地方有个铁门锁了，需要从土洞钻过去，场面实在是不优雅，过去之后发现那块空地确实挺大的，非常适合遛狗。还有种菜的，和养鸭的，好好的独墅湖还能拿来养鸭的\n然后我和亲爱的沿着边沿走了一圈，不同的视角看独墅湖别有一番风味。第二次我俩就带着狗崽子一起去遛了，在上面跑的可欢了。\n跑完之后带着狗在公园的长椅上躺着睡觉，冬日的太阳晒在脸上，非常的幸福，两人两狗吹着微风，下午难得的放松时刻。\n送狗回老家 狗儿子和狗闺女在逐渐长大的过程中，越来越闹腾了，小时候出去的少，可以抱床上和我们一起睡，到了3-4个月的时候，出去玩的时候给自己身上整一身泥，又脏又臭，不让上床睡晚上就走来走去闹腾，没有一个晚上睡好的，3-4个月大，还不能忍住在外面排泄，屋里老臭了。\n我俩那会没有一天晚上睡好的，然后我俩就准备给狗儿子和狗闺女送回老家养了。\n回家之前和他们的妈妈可乐一起溜了一下，2只已经快比他们的妈高了\n好家伙，回家的路上还给我抓伤了，打了五针狂犬，在老家，上海，南京，打完了这五针，真的十分的艰难。\n回家之后，吃的比我俩喂的好多了，跑的地方也大，就是不能进屋，只能待狗笼子里了。\n丈母娘口嫌体正直，比我俩养的好多了，回家把自己的衣服贡献给了2个狗，一天能回家遛狗4，5遍的，这个阶段屋里干净多了，每天早上也没有狗吵闹了，睡的非常的好。\n有得必有失，所以老家也遭了殃，丈母娘和老丈人承受了所有，阿门。\n路过南京 1月又去了南京看了一次牙，和南邮校友一起吃了个饭，3个人点那个套餐，咔咔就吃完了，还好对面2个女生，吃的少。\nBTW,南京老城区那个破路真的太难开了，另外新手司机的我掉头一个没稳住差点撞花坛上，老难了。\n打狂犬，去口腔医院加上停车，感觉完全没有发挥出开车的优势，打车+停车花了老多钱了。\n不得不说，我还是更喜欢土味城市南京。。。\nFebruary 2月中间要过年，而且2月只有28天，比较短。\n西山摘草莓 在过年回家前，我俩突击西山，摘起了草莓。\n找了个王婆草莓，我俩就在那摘了起来，35一斤，可以在里面直接吃，西山的草莓感觉有点和平时不大一样, 有点扎嘴。\n我俩在里面吃了老多了，这个时候也顾不上干净不干净了，嘎嘎吃。最后吃的差不多了，摘了2盆回去，充实的一下午也就结束了。\n突然就跑了60多公里，摘了个草莓，也就我俩了，没有其他人了吧吧吧吧吧吧吧。\n回家过年 有钱没钱，回家过年，第2天我们就愉快的回家去了，年30下午，没啥人，4个小时就到家了，亲爱的驾车技术愈发的娴熟了。\n今年第一次在亲爱的家过年，融入成为了最佳第5人。\n过年这短暂的几天还是去了不少地方的，初一去我家，初二送亲爱的回家，然后我和表弟去他家，见了表姐夫，老大难的也谈恋爱准备结婚了，挺好的。\n初三约了个妈妈社交，去了趟骆马湖，不得不说骆马湖是真的大，绕一圈根本看不到边，得益于我这个墨迹的性子，最终还是迟了一个小时，阿门太难了。不过丈母娘也是急性子，外出玩不了一点。\n初四由于外婆摔了住院，于是在亲爱的带领下，去了趟新沂，快90的人了，摔这一下是真的要命，好歹几个闺女儿子凑一起，不然真的难挺，后面又被各种折磨了一下，最终索性是二次手术成功了，有了恢复的希望。\n初五情人节，和亲爱的在一起度过了亲密的节日，上午给狗洗澡，中午给狗打疫苗，下午和亲爱的以及亲爱的几个同学一起逛了南湖公园，我还是第一次逛南湖公园，一起看到了一个好天气。\n亲爱的为我买了一束非常可爱美丽的花，感谢亲爱的，mua/mua/mua/mua。回家之后把花转赠老丈人和丈母娘，继续发挥香气。\n初六就要返程了，本来4个小时，由于下雨加堵车，开了接近10个小时才到，中途在无锡歇了一会，无锡的风景啊环境啥的也挺好的。\n不得不说亲爱的还是厉害，开车能开恁老久了，不愧是新晋老司机了。\n然后悲伤的要来了，要连上8天班，阿门，实在是太折磨了。\n突袭淮南 去年11月的时候，亲爱的看了个视频，有个up大凌晨的开车去淮南喝了个牛肉汤又回来了。亲爱的自驾去淮南喝牛肉汤的欲火越来越胜了。不过苏州过去太远了，不合算。于是在春节假期结束之后的某个周五买了个高铁票加入了淮南。\n那个周末淮南突然开始下雪了，到淮南都10点多了，由于积雪，出租车都很少，不得已和几个大学生拼了车，大学生们去海底捞吃起了火锅，果然还是年轻人精力好呀。\n我俩住的是淮南的皇宫酒店，这名字一听就很霸气，房间也很高端，还有智能语音控制，260多住了这么高端的房子，只能说非常的强劲。\n第2天早上起来之后，淮南下起了大雪，好多年没见过这么老大的雪了。\n然后我俩冒着大雪，坐了公交去寻找牛肉汤，我俩由于起的太晚了，吃的牛肉汤都不知道多少茬了，所以喝起来有点油和咸，总的来说，这个牛肉汤还可以，但是不值得专门过来喝，外面改进过的牛肉汤可能更符合我俩的口味。\n打的时候司机评价：黑呼呼，油呼呼，黑呼呼。\n然后雪太大了，鞋容易湿，我俩就在小巷子里买了双雪地靴，不愧是淮南，只要35块钱就能买一双鞋了，虽然质量不好，但是胜在便宜。\n然后就随意逛了逛，整个市场也没几家店，没啥可逛的。后面又去了一个超市，好家伙，我只能评价这个超市不如胡集街的超市。\n还不如直接去隔壁店整个蜜雪冰城来的实在。整了2杯蜜雪冰城之后继续逛。\n最后在另一个小巷子里找到了一个美甲，一个老姐妹开的店，最终花了50做了一副美甲，便宜是便宜，但是吧里面气味十分严重，感觉空气有毒。\n最终花9块吃了2口板面，我俩一致评价不如西洛巷的老大爷卖的板面，过于难吃了。\n接下来打车去高铁站，路上和司机聊了聊，他评价淮南的牛肉汤油乎乎、黑呼呼、咸呼呼的，刚好和我们吃的对应上。他说之前淮南在安徽数一数二的，是产煤大省，后来没有煤之后，就迅速衰败了。整个淮南真的都不如胡集街有活力，阿门。\n总的来说，此次淮南之旅又圆了亲爱的一个念头，虽然不值，但好歹也完成了一个念头。\n出发，去南京\n去南京 这次还有一个是要去南京看牙，于是从淮南直奔南京，遇上学生开学，高铁上老多年轻的大学生了。\n晚上在仙林和好姐妹相聚，由好姐妹请我们吃了一顿丰盛的炒菜，感谢好姐妹。\n吃完之后冒着寒风和冰冻，我们仨在仙鹤门附近逛了一逛，仙鹤门这边还是老旧且热闹呀\n第2天为了赶时间，我俩早起去看牙，好姐妹随后过来会合。\n我俩看完牙之后，时间还有一些，于是就沿着新街口逛了一下，大冬天的，我背着斜挎包，拎着个袋子，冒着寒风逛辣么大的新街口，老心酸了。\n走了一个多小时，逛了逛地下的莱迪广场，时间有限，就去科巷会合了。\n之前听都没听过科巷，科巷在大行宫地铁附近，到那一看，好家伙，老多人了，基本上每家店都有在排队的。\n然后吃了鸭血粉丝和梅花糕，根本吃不完，梅花糕偏甜，味道倒也还不错，鸭血粉丝就直接爆满了，果然没有一只鸭子能活着走出南京。\n下午就沿着科巷逛了逛，朝着没人的地方走了走，然后买了二两黑猪饺子，味道一绝，又买了几个水果，这个下午非常的充实。\n科巷还有一个南京慰安妇纪念馆，进去参观了一下，日本人对东亚造成的伤害还是大呀，不仅是中国和韩国的妇女遭受毒手，日本人连本国的妇女都不放过，有的直接抓过来变慰安妇了，论变态还得是日本人。\n愿世界和平，这好几个小时，我实在撑不住了，于是就结束了今天行程，南京再见，好姐妹再见。\n回去就买个双肩包 I said.\nMarch 时间来到了3月，3月真的是忙的连轴转，周末比工作日累多了，真的累死人不偿命呀。\n回家, 狗命不该绝 第一个周末在姑苏逛了一下，然后机缘巧合，突然决定回家，下午3点半出发，晚上7:30到家，一切都是缘分呀。\n到家先和在家许久没见的狗儿子和狗闺女打个招呼，他俩的恶习还是没变，刚见到会很激动的朝人身上扑，老激动了。一副父慈子孝的名场面。\n然后第2天上午去了县里，趁着短暂的上午，去医院看了眼外婆，外婆做了2次手术，术后恢复的挺好，我舅和我妈在那陪护着。\n我在那待了一会之后，陪着外婆聊聊天，然后就匆匆结束了，回了胡集。\n为什么说是缘分呢，还是因为狗命不该绝.\n我俩准备回苏州的时候，狗儿子突然口吐白沫了，怪吓人的，一开始在那晒太阳，晒着晒着口吐白沫了。\n本来我俩没准备把狗儿子和狗闺女带过来的，但是看到狗儿子口吐白沫，于心不忍，于是准备给狗儿子带回来查一查。\n经过不怎么正规和细致的检查，发现得的是细小，要是不救治的话狗命很难撑过去，光靠自愈几乎不可能。细小有2周的潜伏期，也是真的狗命不该绝，我俩突然决定回去，正好走的时候发作了。不然我俩走了不带狗儿子和狗闺女，那真的狗命就没了。\n宠物医院说要先抢救3天看看，看看第3天的表现如何，如果第3天还未好转的话，就得考虑放弃治疗了。第2天的时候狗儿子还奄奄一息的，第3天就突然恢复点精神了，可以吃饭摇尾巴了。\n狗闺女在第3天也病状发作了，然后一起入院治疗，虽然我和亲爱的救了2条狗命，但是钱花的真的是哗哗如流水，狗儿子最贵的一天治疗费是1500，什么社畜能找到日薪1500的工作，阿门。\n治疗期的狗真的也很颓废了。\n经过一周的治疗之后，狗儿子和狗闺女抢救回来了，总共花了8000多，阿门，拿爸妈的新马旅游的经费，换狗儿子和狗闺女的狗命，也行了，今年积德行善一整年。\n搬家 虽然把狗儿子和狗闺女的命救回来了，但是他俩丝毫不知道感恩，每天晚上都不安静，不让爸爸妈妈睡好觉，从宠物医院接回来之后1周，我俩就没有一天晚上睡好的，每天晚上都在巴拉笼子，都在想要不要继续送回老家算了。\n后面想了想，还是换房子算了，换房子时间比较紧张，要在这个房租到期的时候搬走，留给我们看房子的时候不多了，于是我俩在一个周末加4个工作日的晚上，疯狂的看房，让2波中介一起带看。每天晚上都看到10点，11点的，我俩也太过努力了。\n最终还是决定搬到隔壁小区去了，隔壁小区绿化好，适合遛狗，有个阳台，可以把狗分开。\n周六还可能下雨，于是周五晚上吭哧吭哧的就开始搬了，还好抓了我弟这个劳动力，以及提前买了一个小推车，吭哧吭哧的搬了好多趟才搬完，搬家真的老难了，这次是半年就搬家了，希望这次可以住满一年。\n搬家完之后，狗晚上可以睡阳台了，原以为半夜可以安静一点，没想到这2个狗东西会一直巴拉门，导致我俩还是会睡不好，比之前好一点，但不多。搬家本来一个主要的点就是狗可以安静一点，结果卒。\n又萌生了把他俩送回家的想法，但是想想再给他俩一次机会，后面晚上把他俩放进屋里，他俩晚上就能安静一点了，可以一觉睡到6点多到7点，好歹不会半夜2，3点闹腾了，阿门。\n新的地方总体比上一个地方会好一点，新一点，敞亮一点，有个通透的落地窗，阳台空气流通，有遮挡，白天放狗的好地方。但是那个洗衣机我是真的不想吐槽了，太垃圾了，史上最难用的洗衣机。\n然后就在这新的地方继续开始了遛狗生活\n看房 自从去年消停之后，今年3月又打算开始看房子了。这次目标是尹山湖和斜塘。\n感谢去年贝壳的门店店长，疯狂给我俩暗示，这个价格很难的辣，要不要往上加一点，她这种做法让我俩直接掉头就走，没咋样就想让我们俩背负如此巨额的贷款。。。。\n今年3月，苏州这边还是以以价换量为主，降价卖，所以整个三月成交量看着还不错。\n去年的预算只够买园区老破2房，尹山湖也只能买个小面积的次新，今年过年一回来，情况完全逆转了，去年的预算马上可以看140平的了，园区的选择也更加的多了，我直呼好家伙。\n这次看盘，确定了斜塘和尹山湖板块哪些盘值得关注，哪些盘需要直接pass的，总体来说，效率还是可以的，等到年底，直接打入园区核心区不是梦。\n逛郭巷街道 其实1月就发现郭巷街道有个菜市场了，当时是为了找体检的地方，逛到了那边，有条路边街，卖菜，卖水果，烧饼，卤菜啥的，非常的热闹红火，当时没怎么逛。\n3月之后去那边买菜比较多，确实便宜，50块钱可以买老大一袋青菜，然后有一次走了小路，逛到了国泰新村里面了，那个地方老大一块拆迁安置房了，和园区的莲花帝国相比，不遑多让。\n国泰北面是一些比较老的小区，两边隔着一个运河，南边就是密密麻麻的尹山湖高层住宅了，从国泰出来往南2，3公里就是长申了。\n国泰就这样藏在高层后面，地图上也只是显示了国泰几村几村，后面我和亲爱的又去里面逛了一下，一些独栋的自住的话，自己装修装修也还行，但是6层那种就不大行了。\n所以尹山湖板块和国泰交织，不知道广大买在尹山湖板块的有没有啥想法。我倒不是嫌弃国泰，而是觉得花了商品房的价格，购入了高层住宅，学校配套啥的都不大行，感觉被强行套在里面了。\n虾皮电商 去年在我弟的帮助下，注册了一个营业执照，就开始了虾皮电商之旅。\n怎么说呢，每行每业都有一定的信息差在里面，倒不是说有多少专业知识，而是很多东西都不知道，没做过，不了解，不知道怎么样去做好。\n整个开店过程有几块，虾皮针对中国卖家有专门的后台，那么想在虾皮开店，首先得办一个营业执照。\n放到现在来说，线上办个营业执照肯定是不难的，淘宝小镇就提供免费的营业执照办理，整个办理营业执照的过程都是线上的，最后纸质营业执照会快递寄过来。\n营业执照是免费的，但是需要办税，淘宝小镇提供的服务，收费100块一个月，那么这个价格如果准备做大做强，倒也还能接受，但是我这只是尝试一下，不想出这个钱，所以前期推销就拖着没处理，但是税是肯定要报的。\n后来经过各种搜索无果，百度，谷歌，小红书，都没搜到想要的结果，后来想到淘宝大本营杭州可是互联网之都，于是在国家税务总局浙江省电子税务局上找到了线上咨询入口，完成了税务申报。这个需要先以自然人登录，然后就能看到一个入口\n然后就进了智能咨询的页面了https://bot.dingtax.cn/bot/newHome?auth_vendor=dzswj\u0026amp;signedType=zjdzswj\u0026amp;access_token=idK7q4zdg6ZhbbPcypjWq5tU\u0026amp;code=d85931bf34084c0b85f83deed84fb154\u0026amp;utterance=\n转人工客服，和对方说自己要做税务申报，提交材料，税务申报就办好了，每年省了1200块钱。\n税务登记好之后，就可以拿营业执照上的统一社会信用代码，登录企业业务了，不申报登录老是报税号识别不了。\n营业执照，税务申报只是第一步，税务问题还有其他的，需要在税务局逐个办理。\n然后就是https://shopee.cn/onboard/98/364，在虾皮开个店，保证金3000￥\n店开好之后，就是店铺装修，上货，开始卖\n如何上货也是一门学问，在不知道的情况下只能在虾皮后台手动上货，这方面erp比较成熟了，erp可以对接虾皮后台，在我弟的推荐下，用了妙手erp，妙手对接了虾皮权限，可以使用妙手的chrome插件，实现商品采集，从1688/淘宝/拼多多/京东等地方采集商品，发布到虾皮。\n采集商品倒是次要的，非常的简单，每天免费10个额度，但是采集只是很简单的2个操作，选择商品采集，然后发布。\n选择哪个类目，做母婴？做女装？做旅游？做玩具？竞争力在哪。如何找到有销售潜力的品类，真正切中需求。\n然后是售价，价格怎么定，新店开业，流量怎么来，价格定高了没人买，价格定低了会持续亏损，那么准备投入多少钱来做流水，提升店铺吸引力呢。\n前期新店开业，虾皮会给一点流量，新手扶持期结束之后，店铺该往哪个方向走。\n关于成本还有另外一个方面，就是从国内运到东南亚，运费是按照克算的，如果太重的，运费会上天，亏损会极速加大。\n还有一个，发货流程是国内电商-\u0026gt;货代-\u0026gt;虾皮国内仓库-\u0026gt;海外用户\n在erp下单之后，需要同步订单到货代，如果忘记同步，订单就被取消了，整个发货周期是2+4，6天内需要把货发到虾皮国内仓库。\n有的时候商家发货不及时会取消，有的时候我自己忘记同步订单到货代会取消，又增加了店铺运营成本。\n还有虾皮的各种抽成，一单前期别想着挣钱了。\n另外还有一个就是退货问题，我有限的单子里，发生过2次退款，一次我同意了，运费，采购费，抽成啥的都亏出去了，另一单我没有同意退款。\n退款吧一单亏的老多了，货在海外，就别想退回来了，不退款吧，又不利于后面店铺成长，真的老难了。\n只能说一点准备没有，想贸然去卖货，真的老难了，我自己空余时间又不多，最多看到邮件有单子就去采购一下发个货，投入不够，店铺装修，商品分类，优化啥的都没做。而且没有这方面经验，都不知道如何去装修商品，如何做商品分类和优化，真的啥啥都没有。\n现在整个4月都没单子了，不知道是不是新手流量优惠没有了，如果想继续做下去，还是得持续投入时间，解决下上面的问题。\n但是如果量起不来，那还是没啥收益，看不懂，所以谨慎投入，所以不知道是否有收益点，进入一个新的行业老难了。\n但是吧，不去尝试，不去解决问题，找饭辙子，窝在有限的工作里，目光局限，工作里条理啥的是都顺了，但是成长性有限。\n电商这个小小的尝试，虽然亏损了没做起来，但是好歹多接触了些东西，尝试从0开始做，虽然没啥希望做起来。\n希望Q2可以小小的突破一下，店铺继续运营起来，持续有流水吧。\n总结 1季度外出探索仍然丰富，拓展了国内的更多体验。\n在商业上的探索理论上来说失败了，但是失败了也应该继续尝试，走条路出来，不然以后年纪越来越大，不知道该咋办了。\n二个\n","permalink":"https://blog.thend03.com/posts/2024-q1-summary/","summary":"\u003cp\u003e2024年不知不觉就进入2季度了，一季度仍然在忙碌中度过，除了个人提升，其他过的也挺愉快的。\u003c/p\u003e\n\u003ch2 id=\"january\"\u003eJanuary\u003c/h2\u003e\n\u003ch3 id=\"海天一洲\"\u003e海天一洲\u003c/h3\u003e\n\u003cp\u003e有车之后活动半径确实大了许多，元旦去了老久之前就心心念念的杭州湾跨海大桥，大桥在海上，而且在高速上，杭州湾跨海大桥，北面是嘉兴，南面是慈溪，风景非常的好。\u003c/p\u003e\n\u003cp\u003e晚上我们住海天一洲，元旦的时候人不是很多，开车的时候走在大桥上，非常的心旷神怡，开80，慢慢晃，追着落日，迎着夕阳，充满了向往与希望。\u003c/p\u003e","title":"2024年一季度总结"},{"content":"前言 在上一篇安装windows+manjaro中，安装好了双系统，那么安装好之后，需要更新下manjaro系统，安装好日常使用的环境和应用程序，方便后续的使用。\n本篇分为系统、应用程序、外观3个部分进行说明。\n更新系统 在安装好系统之后，由于系统是国外的发行版，一些安装包、应用程序啥的，都是国外的源，没代理的话可能会下载慢，甚至下载不下来，所以首要是要对系统进行更新，更换国内的镜像源。\n更换国内镜像源 打开kconsole终端，在命令行输入如下命令\nsudo pacman-mirrors -i -c China -m rank 执行命令之后会在命令行终端输出可用的列表，然后弹窗供选择，源选择一个就好，多了没啥用，还会降低速度\n添加archlinuxcn源 添加archlinuxcn的源，可以获得更多的包\n编辑配置文件\nsudo vi /etc/pacman.conf 在配置文件中添加如下配置\n[archlinuxcn] SigLevel = Optional TrustAll Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch 安装yay包管理工具 yay是aur仓库的包管理助手，使用yay不用像使用pacman一样，需要sudo，而且包比官方仓库的全，官方仓库没有的包可以使用yay尝试安装\n打开命令行，输入如下命令安装yay\nsudo pacman -S yay 安装snap包管理工具 有些包只有snap有，所以也安装下snap\nsudo pacman -S snapd 然后执行如下命令\nsudo systemctl enable --now snapd.socket 创建链接\nsudo ln -s /var/lib/snapd/snap /snap 测试snap功能\n$ sudo snap install hello-world hello-world 6.3 from Canonical✓ installed $ hello-world Hello World! 更新系统 换好源，添加完源之后，执行以下命令更新系统\nsudo pacman -Syyu 安装base-devel 安装基础构建包\nsudo pacman -S base-devel 到这里系统层面的设置基本上差不多了，下面介绍一些常用应用程序\n一些常用的命令如vim等需要自行安装，使用命令行安装即可，不再多介绍。\n安装常用软件 科学上网 搞定了科学上网之后，下载包，访问google， github才会丝滑。所以先搞定科学上网\n科学上网有3个选项: Qv2ray、clash for windows、v2raya\n其中qv2ray停止运营了，clash删库跑路了，v2raya还在正常更新。\n我之前用过qv2ray和clash，目前一些历史版本还能用。所以也介绍下这2个的安装使用\nQv2ray qv2ray的项目解散后，连官网也不维护了，烟消云散，好歹github的仓库还在，还能下载安装包\n2.7.0下载地址: https://github.com/Qv2ray/Qv2ray/releases/tag/v2.7.0\n由于要安装在linux上，所以选择AppImage进行下载\n下载好之后，把AppImage拖到桌面，双击就能运行。由于这个版本比较老了，可能没对新的桌面框架做适配，所以桌面快捷方式会运行失败。\n然后需要下载v2ray-core，最新的v2ray-core版本和qv2ray不兼容，所以要下载老版本的v2ray-core，才能运行。经过测试,4.45.2版本可以兼容，所以我们下载4.45.2版本的v2ray-core。\nV2ray-core-4.45.2下载地址: https://github.com/v2fly/v2ray-core/releases/tag/v4.45.2\n下载64位的linux包即可。\n下载好v2ray-core之后解压，打开qv2ray首选项-内核设置，设置v2ray-core路径，然后点击检查v2ray核心设置，检查通过v2ray-core配对就成功了。\n接下来就是添加订阅链接，打开分组，添加新的组，或者修改默认分组，添加你的机场的订阅链接，添加之后更新订阅，如果更新失败，切换下订阅类型试试。\n如果是ssr之类的协议，可以去github下载对应的插件，放到本地的~/.config/qv2ray/plugins目录下，然后重启qv2ray，点击插件按钮即可加载插件。\nssr插件下载地址: https://github.com/Qv2ray/QvPlugin-SSR/releases/tag/v3.0.0\n其他插件可在github仓库自行搜索: https://github.com/orgs/Qv2ray/repositories?type=all\n最后需要去系统设置那手动设置下代理，让系统代理生效\n其他配置项不在赘述\nclash for windows 说是for windows，不过linux也能用。不过clash作者删库跑路了，所以github无法下载，yay也无法安装，只能找互联网残存版本安装。\n下载地址: https://archive.org/download/clash_for_windows_pkg\n下载linux 64位版本，解压之后就可以在命令行执行cfw命令启动clash\n也可以在桌面新建快捷方式，以下是我的clash桌面快捷方式配置, clash解压路径位/opt/app/clash-for-windows，路径需自行修改\n[Desktop Entry] Name=Clash for Windows Comment=Clash for Windows Exec=/opt/app/clash-for-windows/cfw Icon=/opt/app/clash-for-windows/logo.jpeg Terminal=false Type=Application Categories=Developer; 首先拿到clash订阅链接，然后点击profiles, 粘贴订阅链接，点击download，就会下载订阅配置到本地\n然后在proxy选择可用节点，策略选择rule(规则模式)\n最后再打开系统设置，设置代理为clash端口，代理就倒腾完了\nv2raya 上面的2个都已经停止维护和跑路了，v2raya还没跑路，且用且珍惜\n首先要安装v2ray-core，然后使用命令行安装v2raya\nyay -S v2raya 安装完成之后，可以使用命令行启动v2raya，端口是2017，注意看提示，root和非root启动有不同的启动方式\n启动之后，浏览器访问localhost:2017，创建一个管理员用户\n然后导入订阅\n导入订阅之后，就可以选择节点了\n命令行代理 有些任务需要在终端下进行，所以也需要设置命令行代理。命令行代理有2种方式，一种是设置环境变量，另一种是使用工具，让工具走\n代理。\n环境变量 临时的直接执行以下命令，终端窗口关闭，变量清除，端口看使用的是哪种代理方式\nexport https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890 长期的就把配置想到配置文件里，manajaro默认用的是zsh，那么修改~/.zshrc文件, 添加如下2行命令\nalias setproxy=\u0026#34;export ALL_PROXY=socks5://127.0.0.1:7890; echo \u0026#39;SET PROXY SUCCESS!!!\u0026#39;\u0026#34; alias unsetproxy=\u0026#34;unset ALL_PROXY; echo \u0026#39;UNSET PROXY SUCCESS!!!\u0026#39;\u0026#34; 保存之后执行source命令source ~/.zshrc\n下次想用代理的时候，就在命令行执行setproxy，不想用代理就执行unsetproxy\nproxychains 另一个是使用proxychains，proxychains设置代理，然后执行命令都加上proxychains\n执行命令安装proxychains\nsudo pacman -S proxychains-ng 然后修改配置文件，设置代理, 最后一行将socks5代理设置为本地代理端口\nsudo vim /etc/proxychains.conf 安装好之后，如果需要代理，可以在所有命令之前都加上proxychains，如\nproxychains git clone xxx 输入法 在进行其他步骤之前首先是安装输入法，输入法我选择的是开源的rime框架，开源，安全，强大，可定制化程度高，但是也会带来不小的\n学习和解决问题的成本。\n本篇介绍我本人比较喜欢的一款基于rime的输入法，在manjaro可用，如需其他的比如搜狗linux输入法，本文不涉及。\n选这款输入法主要是被它的颜值吸引，基于rime封装之后，解决了大部分的问题，当然在linux下的开源项目，总归会遇到各种各样千奇\n百怪的bug。\n既然选择了linux，就直面恐惧，直面问题吧。\n这款输入法名字叫做四叶草输入法，好听颜值在我个人看来也很高\n输入法开源地址如下: https://github.com/fkxxyz/rime-cloverpinyin\nLinux安装教程地址如下: https://github.com/fkxxyz/rime-cloverpinyin/wiki/linux\n本部分基于项目的wiki，补充下安装过程，解决一些wiki上遗留的问题\n安装fcitx5 在manjaro可以直接使用pacman安装fcitx5，fcitx5是目前最新的输入法框架，内核轻量，功能强大。\nsudo pacman -S fcitx5 fcitx5-qt fcitx5-gtk fcitx5-configtool 然后需要修改配置，wiki上写着要将配置写入~/.xprofile，但是经过我的测试，光写到这个文件还不行，可能会导致无法展示这个输入法。\n最好是在/etc/environment里也写一份同样的配置\n配置项具体内容如下\nexport GTK_IM_MODULE=fcitx5 export QT_IM_MODULE=fcitx5 export XMODIFIERS=\u0026#34;@im=fcitx5\u0026#34; export LANG=\u0026#34;zh_CN.UTF-8\u0026#34; export LC_CTYPE=\u0026#34;zh_CN.UTF-8\u0026#34; 改完配置之后，重新登录桌面使配置生效，当然重启电脑最好。\n如上图所示，fcitx5就启用了\n安装rime 执行以下命令安装rime\nsudo pacman -S fcitx5-rime 然后右键托盘图标点开配置，将“中州韻”加入列表即可\n点击配置，然后选择右下角的添加输入法，点击中州韵添加到分组即可\n安装四叶草输入法 以上2步，安装好输入法框架，rime和fcitx5，就可以安装最终的输入法方案了，即四叶草输入法\nwiki上介绍使用yay安装，但是我这边没有成功，无法展示四叶草输入方案\nyay -S rime-cloverpinyin 所以我选择手动下载安装包到用户目录进行安装, 下载地址: https://github.com/fkxxyz/rime-cloverpinyin/releases\n将压缩包下载到~/.local/share/fcitx5/rime，然后解压，将文件夹里的文件复制到~/.local/share/fcitx5/rime目录下\n新增配置文件 在~/.local/share/fcitx5/rime文件夹下新建default.custom.yaml ，内容为\npatch: \u0026#34;menu/page_size\u0026#34;: 8 schema_list: - schema: clover 其中 8 表示打字的时候输入面板的每一页的候选词数目，可以设置成 1~9 任意数字。\n写好该文件之后，点击右下角托盘图标右键菜单，点“重新部署”，然后再点右键，在方案列表里面应该就有“ 🍀️四叶草拼音输入法”的选项了。\n关于 default.custom.yaml 文件的更多解释，可以参考官方文档定制指南\n这里也有作者的一些配置供参考: 四叶草输入法基本配置\n使用四叶草输入法 写好该文件之后，点击右下角托盘图标右键菜单，点“重新部署”，然后再点右键，在方案列表里面应该就有🍀️四叶草拼音输入法的选项了。\n美化输入法 fcitx5可以使用搜狗皮肤美化，具体的可以参考如下的教程\nfcitx5使用搜狗皮肤\n这里就说一点，转换之后得到的皮肤，是需要放到指定用户目录下的，不同的输入法框架用户目录不同\n平台 rime用户资料夹位置 ibus ~/.config/ibus/rime fcitx ~/.config/fcitx/rime fcitx5 ~/.local/share/fcitx5/rime 我这里使用的是fcitx5，但是皮肤最终的路径是在~/.local/share/fcitx5/themes，这个要注意下\n教程里介绍的fcitx的皮肤路径，ibus的需要自行搜索解决\n其他关于用户资料夹的介绍，详见官方文档: Rime 中的数据文件分布及作用\n另外介绍2款做好的皮肤\nhttps://github.com/ayamir/fcitx5-nord\nhttps://github.com/ayamir/fcitx5-gruvbox\n输入法配置项修改 点击系统托盘-输入法-配置，或者从系统设置进入输入法配置页面，这里可以进行输入法的配置\n如果想修改输入法的字体和皮肤，可以选择经典用户界面设置，设置字体，字号，输入法皮肤等\n中州韵的配置在如下位置修改，红框圈出来的选项，如果选中的话，会导致光标一直固定在最前面，很别扭\n截图工具 下一个就是截图工具了，截图必不可少，推荐flameshot(火焰截图), 另一个我常用的截图工具snipaste，由于linux适配有问题，暂不推荐\n执行以下命令安装flameshot\nsudo pacman -S flameshot 安装好后可以在搜索栏搜索flameshot启动, 启动之后可以在系统托盘处点击火焰截图进行截图\n上面使用起来会有点不方便，需要为火焰截图设置快捷键截图\n打开系统设置，快捷键，如果搜不到火焰截图，就点击下方添加应用程序进行添加，添加好之后，设置截图快捷键，以后就可以使用快捷键截图了。\n转换deb包 有些只有deb包，没有manjaro安装包，为了能在manjaro上安装，所以要安装deb转换工具\n执行以下命令安装debtap\nsudo pacman -S debtap 执行转换之前，需要有一次更新行为，这里可能会超时或失败，记得上代理\nsudo debtap -u 转换deb包\nsudo debtap xxx.deb 安装转换完成的包\nsudo pacman -U xxx.pkg.tar.zst 安装ohmyzsh manjaro的默认shell是zsh，ohmyzsh对zsh做了进一步的封装\n执行以下命令安装ohmyzsh,为了防止网络不通，使用proxychains做代理, 实在下载不下来，只能手动下载install.sh，然后执行安装脚本\nproxychains sh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; 然后下载如下的几个插件\n# 自动补全 git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting # zsh-vi-mod git clone https://github.com/jeffreytse/zsh-vi-mode $ZSH_CUSTOM/plugins/zsh-vi-mode 下载好之后修改全新的~/.zshrc，历史的文件记得在安装的时候备份\nplugins=( git zsh-syntax-highlighting zsh-autosuggestions zsh-vi-mode ) 如果想修改主题的话，修改~/.zshrc文件里的如下配置，默认主题是robbyrussell\nZSH_THEME=\u0026#34;robbyrussell\u0026#34; 更多主题见如下地址: https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\n安装typora typora是我个人比较喜欢的markdown编辑器\nsudo pacman -S typora 安装chrome 执行命令安装chrome, 安装好之后可以在命令行执行google-chrome-stable启动，也可以搜索chrome进行启动\nyay -S google-chrome chrome桌面快捷方式, 在桌面新建文本文件，写入如下配置\n[Desktop Entry] BinaryPattern=chrome; MimeType= Name=chrome Exec=google-chrome-stable Icon=/opt/app/chrome-logo.png Type=Application Terminal=0 安装vscode 进入下载页，点击下载64位的tar包，由于不支持deb和rpm，所以手动下载tar包安装\n下载地址: https://code.visualstudio.com/#alt-downloads\n桌面快捷方式如下，新建文本文件，写入如下配置然后保存\n[Desktop Entry] Name=Visual Studio Code Comment=Code Editing. Refined. GenericName=Text Editor Exec=/opt/app/vscode/bin/code --unity-launch %F Icon=/opt/app/vscode/logo.png Type=Application StartupNotify=false StartupWMClass=Code Categories=TextEditor;Development;IDE; MimeType=text/plain;inode/directory;application/x-visual-studio-code-workspace; Actions=new-empty-window; Keywords=vscode; wifi 使用linux开wifi，manjaro和arch的文档太复杂，找了个开源工具，可以创建wifi热点\n项目地址如下: https://github.com/lakinduakash/linux-wifi-hotspot\n执行命令安装\nyay -S linux-wifi-hotspot 安装之后可以在应用程序搜索wifi hotspot,即可启动\n5Ghz可能会有bug，建议使用2.4G, SSID是你的wifi名称，password是wifi密码，其他默认即可\n美化系统 kde的桌面ui排布和windows相似，本次美化的目标是把桌面美化成mac风格\n主题/应用程序/图标/窗口风格 先说主题，系统设置-外观-plasma视觉风格-获取新plasma视觉风格，搜索MacBreeze Shadowless，然后点击安装，安装完成之后点击使用此主题\n然后设置应用程序风格，系统设置-外观-应用程序风格-配置GNOME/GTK应用程序风格-获取新GNOME/GTK应用程序风格，搜索McMojave， 选择喜欢的类型，安装然后使用。\n修改图标，系统设置-外观-全局主题-图标, 获取新图标，搜索Mojave CT icons安装并使用\n系统设置-外观-窗口装饰元素-获取新窗口装饰，搜索McMojave Aurorae,安装并使用\n顶栏设置 Manjaro kde的任务面板和windows类似，是在底部，那么为了仿Mac，所以要删除底栏，添加一个顶栏\n点击面板然后右键，选择进入编辑模式，然后更多选项，选择移除面板，即可删除面板，删除底部面板即可，避免和latte-dock冲突\n在桌面右键选择，添加面板-应用程序菜单栏。\n下面进行顶栏的设置，点击添加部件，添加如下部件: 应用程序启动器，锁定/注销、系统托盘、数字时钟等\n然后为顶栏添加2个间距用于使用时钟分隔左右，2个蓝色的条就是间距，全局菜单就是其他应用的设置按钮菜单\n然后调整顶栏布局，将应用程序启动器放在顶栏的最左边，然后在它的右边放全局菜单，然后再右边放间隔，后面依次放数字时钟、间\n隔、锁定/注销、系统托盘。这样应用程序启动器就会固定在最左边\n最终效果如下\n应用程序启动器的图标要改成mac，右键点击应用程序启动器，选择配置应用程序启动器\n修改图标，选择本地图标即可\n附一个LOGO\n安装latte-dock 要想实现和mac一样的dock效果，需要安装latte-dock，安装好之后，应用程序搜索latte-dock启动即可\nsudo pacman -S latte-dock 启动之后效果如下，其他设置可以自行更改\n安装nautilus 安装nautilus替换dolphin，文件管理会更加美观\nsudo pacman -S nautilus 然后点击系统设置-应用程序-默认应用程序-文件管理器，选择文件即可\n更换壁纸 桌面右键-配置桌面和壁纸，选择喜欢的壁纸即可\n小结 经过如上的配置，一个基本可用的仿mac系统的manjaro就基本好了，后面有其他的更新就再补充\n参考链接 manjaro终端美化: https://segmentfault.com/a/1190000022863791 manjaro配置: https://zhuanlan.zhihu.com/p/114296129 manjaro配置: https://zhuanlan.zhihu.com/p/460826583 manjaro配置: https://zhuanlan.zhihu.com/p/656733028 manjaro配置: https://blog.lyh543.cn/posts/2021-09-30-config-manjaro.html kde仿mac美化: https://blog.csdn.net/Luo_Jin/article/details/88776326#t6 deb转换: https://www.redren.net/8146.html deb换源: https://www.cnblogs.com/bluestorm/p/16988840.html fcitx5介绍: https://wiki.archlinuxcn.org/wiki/Fcitx5 Clash: https://help.hitun.io/zh/article/linux-clash-for-windows-1xajysh/ ","permalink":"https://blog.thend03.com/posts/manjaro-env-config/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e在\u003ca href=\"https://blog.thend03.com/post/dual-system-installation-manjaro-and-windows/\"\u003e上一篇安装windows+manjaro中\u003c/a\u003e，安装好了双系统，那么安装好之后，需要更新下manjaro系统，安装好日常使用的环境和应用程序，方便后续的使用。\u003c/p\u003e\n\u003cp\u003e本篇分为系统、应用程序、外观3个部分进行说明。\u003c/p\u003e\n\u003ch2 id=\"更新系统\"\u003e更新系统\u003c/h2\u003e\n\u003cp\u003e在安装好系统之后，由于系统是国外的发行版，一些安装包、应用程序啥的，都是国外的源，没代理的话可能会下载慢，甚至下载不下来，所以首要是要对系统进行更新，更换国内的镜像源。\u003c/p\u003e\n\u003ch3 id=\"更换国内镜像源\"\u003e更换国内镜像源\u003c/h3\u003e\n\u003cp\u003e打开kconsole终端，在命令行输入如下命令\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo pacman-mirrors -i -c China -m rank\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/thend03/mdPic/picGo/202402061554278.png\" alt=\"image-20240206155454245\"  /\u003e\n\u003c/p\u003e","title":"manjaro环境配置"},{"content":"背景 手上有一台windows，想着再机器上安装一个双系统，刚好之前折腾过一次manjaro，这次安装双系统还是想尝试一下manjaro。\nmanjaro是基于arch的linux发行版，arch命令行操作比较多，manjaro在此之上，提供了友好的图形界面操作，更加适合新手。\n选它一个是界面美观，另外几个比如ubuntu/centos，在服务端经常接触，所以桌面版就想尝尝鲜。\nmanjaro官方的桌面版分为3类: GNOME、KDE、XFCE。\n下载地址如下: https://manjaro.org/download/\n我选择的是manjaro kde，也就是下图的plasma desktop, 其他2个版本可以通过如上链接点击具体的版本了解\n制作启动盘 要安装manjaro的话，得先制作一个启动盘，需要一个U盘, 最好是16G以上的。然后在windows系统使用rufuse这款工具，选择dd模式进行写入\n下载rufus rufus是开源免费的USB启动盘制作工具，在官网和github下载即可，按照机器的配置下载对应的exe文件\n官网下载地址: https://rufus.ie/zh/\ngithub下载地址: https://github.com/pbatard/rufus/releases/\n下载manjaro镜像 进入manjaro下载页: https://manjaro.org/download/\n选择想要安装的版本，我这里选择plasma desktop，即kde版本, 点击download, 选择image即可进行下载\nU盘格式化 在制作启动盘之前，先将U盘进行格式化，避免安装失败\n制作启动盘 启动rufus，启动之后界面类似于如下这样，这个是从官网搂的图，写入模式需要选择以DD镜像模式写入\n设备是指U盘，引导类型是你的iso镜像文件，其他的按照程序默认即可\n状态为准备就绪，就代表启动盘做好了，不要再点开始了，那样会重新做盘，可能会产生未知的错误\n磁盘分区 做好启动盘之后，就得把机器的磁盘分一块出来用于安装manjaro。\n这个涉及到windows磁盘管理。使用windows磁盘管理，整一个新加卷主分区出来，至少保留100G给manjaro。\n具体新建磁盘分区可以自行搜索。不再赘述。\nBIOS设置 根据机器型号的不同，使用不同的快捷键，进入BIOS, 关闭secure boot\n然后选择U盘镜像进行安装启动\n安装过程 安装时语言选择英文，这样会避免home目录是中文的问题，可以安装好之后系统语言再设置为中文。\n安装时选择分区的时候，切忌要选对硬盘，不然可能会有抹除windows系统盘的风险\n然后按照安装指引进行安装即可，不清楚的可以选择默认，直至安装完成。\n参考链接 惠普战66安装win10+Manjaro双系统\n","permalink":"https://blog.thend03.com/posts/dual-system-installation-manjaro-and-windows/","summary":"\u003ch2 id=\"背景\"\u003e背景\u003c/h2\u003e\n\u003cp\u003e手上有一台windows，想着再机器上安装一个双系统，刚好之前折腾过一次manjaro，这次安装双系统还是想尝试一下manjaro。\u003c/p\u003e\n\u003cp\u003emanjaro是基于arch的linux发行版，arch命令行操作比较多，manjaro在此之上，提供了友好的图形界面操作，更加适合新手。\u003c/p\u003e\n\u003cp\u003e选它一个是界面美观，另外几个比如ubuntu/centos，在服务端经常接触，所以桌面版就想尝尝鲜。\u003c/p\u003e","title":"笔记本安装manjaro+windows双系统"},{"content":"背景 这篇是apitable的第3篇，如何解决子进程监控。\napitable代码地址: https://github.com/apitable/apitable\napitable里面是使用sentry进行监控上报的，那么需要自己部署一个sentry服务端\n搭建sentry服务端 sentry部署的话分为3种方式，一种是使用docker-compose部署，一种是在k8s部署，还有一种是手动安装部署。\n本文只介绍docker-compose和k8s部署，手动安装参考官方文档\n使用docker-compose部署 Sentry-self-hosted代码地址: https://github.com/getsentry/self-hosted\n下载之后执行./install.sh就可以自动安装sentry了。\n其他配置可参考项目里的readme\n这个本地安装会比较简单，但是测试环境和生产环境因为网络原因依赖老是下载不了，网络隔离实在是太费劲。\n使用k8s部署 docker-compose可以搭建一个可用的sentry服务端，但是高可用无法保证\n那么就考虑在k8s上搭建，有个项目做了一个相当于一键安装部署的东西，叫helm charts。\nSentry helm charts代码地址如下: https://github.com/sentry-kubernetes/charts\n这个使用起来也比较简单\n命令行安装 首先是打开命令行，执行如下语句，关联sentry charts仓库\nhelm repo add sentry https://sentry-kubernetes.github.io/charts 然后在命令行执行install语句\nhelm install --namespace sentry --timeout 20m sentry sentry/sentry 然后看下命令行执行结果，运气好的话一次就能成功，运气好，会失败，我这边失败的原因是由于pod比较多，并且sentry会起很多个\npod，导致资源不足，sentry无法完整的启动。部署失败的时候需要注意下资源问题。\n页面安装 如果k8s集群带页面的话，也可以在页面进行安装\n我这边使用的是rancher管理页面\n先到应用市场，先添加仓库\n添加好之后在列表就有一个新的仓库 sentry\n然后到charts页签，搜索sentry, 选择sentry执行安装\n右侧可以选择版本，选完版本之后点击install\n这一步配置yaml，使用默认的即可，配置文件比较大，想改好需要高深的功力\n超时时间设置的长一点，免得安装超时失败，600s可能会不够\n然后点击右下角install，等待安装结束即可。\n最终安装成功之后，在应用市场那显示有一个已安装app\n最终部署一个sentry，部署了37个deployment，5个Job, 8个statefulsets ,一共起了62个pod，吃的资源还是比较多\n9.x的版本吃的资源会少一点，大概起34个pod\n","permalink":"https://blog.thend03.com/posts/use-sentry-to-monitor-apitable/","summary":"\u003ch2 id=\"背景\"\u003e背景\u003c/h2\u003e\n\u003cp\u003e这篇是apitable的第3篇，如何解决子进程监控。\u003c/p\u003e\n\u003cp\u003eapitable代码地址: \u003ca href=\"https://github.com/apitable/apitable\"\u003ehttps://github.com/apitable/apitable\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eapitable里面是使用sentry进行监控上报的，那么需要自己部署一个sentry服务端\u003c/p\u003e\n\u003ch2 id=\"搭建sentry服务端\"\u003e搭建sentry服务端\u003c/h2\u003e\n\u003cp\u003esentry部署的话分为3种方式，一种是使用docker-compose部署，一种是在k8s部署，还有一种是手动安装部署。\u003c/p\u003e","title":"使用sentry监控apitable"},{"content":"背景 还是由于apitable，apitable使用socket-io进行连接，连接协议是websocket\napitable本地启动的话，websocket连接正常，但是一旦将server部署到测试环境，那么websocket就会连接失败。\n基于如上的问题背景，那么我就想试试使用netty-client，测试一下连接是否正常。\n之前了解到的用法都是不带path的，比如ws://127.0.0.1:8080这样直接连，但是项目里的连接地址是带path的\n类似如下这样ws://127.0.0.1:8080/path\n经过搜索之后并没有找到使用Netty client如何进行连接。\n那么写这篇文章记录下，如何使用Netty client建立带path的连接\n用法 直接上代码\npublic class ApiTable { static final String URL = System.getProperty(\u0026#34;url\u0026#34;, \u0026#34;ws://10.10.134.124:31000/notification/\u0026#34;); public static void main(String[] args) throws Exception { URI uri = new URI(URL); String scheme = uri.getScheme() == null ? \u0026#34;ws\u0026#34; : uri.getScheme(); final String host = uri.getHost() == null ? \u0026#34;127.0.0.1\u0026#34; : uri.getHost(); final int port; if (uri.getPort() == -1) { if (\u0026#34;ws\u0026#34;.equalsIgnoreCase(scheme)) { port = 80; } else if (\u0026#34;wss\u0026#34;.equalsIgnoreCase(scheme)) { port = 443; } else { port = -1; } } else { port = uri.getPort(); } if (!\u0026#34;ws\u0026#34;.equalsIgnoreCase(scheme) \u0026amp;\u0026amp; !\u0026#34;wss\u0026#34;.equalsIgnoreCase(scheme)) { System.err.println(\u0026#34;Only WS(S) is supported.\u0026#34;); return; } final boolean ssl = \u0026#34;wss\u0026#34;.equalsIgnoreCase(scheme); final SslContext sslCtx; if (ssl) { sslCtx = SslContextBuilder.forClient() .trustManager(InsecureTrustManagerFactory.INSTANCE).build(); } else { sslCtx = null; } EventLoopGroup group = new NioEventLoopGroup(); try { // Connect with V13 (RFC 6455 aka HyBi-17). You can change it to V08 or V00. // If you change it to V00, ping is not supported and remember to change // HttpResponseDecoder to WebSocketHttpResponseDecoder in the pipeline. final WebSocketClientHandler handler = new WebSocketClientHandler( WebSocketClientHandshakerFactory .newHandshaker(uri, WebSocketVersion.V13, null, true , new DefaultHttpHeaders())); Bootstrap b = new Bootstrap(); b.group(group) .channel(NioSocketChannel.class) .handler(new ChannelInitializer\u0026lt;SocketChannel\u0026gt;() { @Override protected void initChannel(SocketChannel ch) { ChannelPipeline p = ch.pipeline(); if (sslCtx != null) { p.addLast(sslCtx.newHandler(ch.alloc(), host, port)); } p.addLast(handler); } }); Channel ch = b.connect(uri.getHost(), port).sync().channel(); handler.handshakeFuture().sync(); boolean active = ch.isActive(); boolean open = ch.isOpen(); System.out.println(\u0026#34;active: \u0026#34; + active + \u0026#34;, open: \u0026#34; + open); BufferedReader console = new BufferedReader(new InputStreamReader(System.in)); while (true) { String msg = console.readLine(); if (msg == null) { break; } else if (\u0026#34;bye\u0026#34;.equals(msg.toLowerCase())) { ch.writeAndFlush(new CloseWebSocketFrame()); ch.closeFuture().sync(); break; } else if (\u0026#34;ping\u0026#34;.equals(msg.toLowerCase())) { WebSocketFrame frame = new PingWebSocketFrame(Unpooled.wrappedBuffer(new byte[]{8, 1, 8, 1})); ch.writeAndFlush(frame); } else { WebSocketFrame frame = new TextWebSocketFrame(msg); ch.writeAndFlush(frame); } } } finally { group.shutdownGracefully(); } } } handler\npublic class WebSocketClientHandler extends SimpleChannelInboundHandler\u0026lt;Object\u0026gt; { private final WebSocketClientHandshaker handshaker; private ChannelPromise handshakeFuture; public WebSocketClientHandler(WebSocketClientHandshaker handshaker) { this.handshaker = handshaker; } public ChannelFuture handshakeFuture() { return handshakeFuture; } @Override public void handlerAdded(ChannelHandlerContext ctx) { handshakeFuture = ctx.newPromise(); } @Override public void channelActive(ChannelHandlerContext ctx) { handshaker.handshake(ctx.channel()); System.out.println(\u0026#34;ctx connect: \u0026#34; + ctx.channel().isActive()); } @Override public void channelInactive(ChannelHandlerContext ctx) { System.out.println(\u0026#34;WebSocket Client disconnected!\u0026#34;); } @Override public void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception { Channel ch = ctx.channel(); if (!handshaker.isHandshakeComplete()) { try { handshaker.finishHandshake(ch, (FullHttpResponse) msg); System.out.println(\u0026#34;WebSocket Client connected!\u0026#34;); handshakeFuture.setSuccess(); } catch (WebSocketHandshakeException e) { System.out.println(\u0026#34;WebSocket Client failed to connect\u0026#34;); handshakeFuture.setFailure(e); } return; } if (msg instanceof FullHttpResponse) { FullHttpResponse response = (FullHttpResponse) msg; throw new IllegalStateException( \u0026#34;Unexpected FullHttpResponse (getStatus=\u0026#34; + response.status() + \u0026#34;, content=\u0026#34; + response.content().toString(CharsetUtil.UTF_8) + \u0026#39;)\u0026#39;); } WebSocketFrame frame = (WebSocketFrame) msg; if (frame instanceof TextWebSocketFrame) { TextWebSocketFrame textFrame = (TextWebSocketFrame) frame; System.out.println(\u0026#34;WebSocket Client received message: \u0026#34; + textFrame.text()); } else if (frame instanceof PongWebSocketFrame) { System.out.println(\u0026#34;WebSocket Client received pong\u0026#34;); } else if (frame instanceof CloseWebSocketFrame) { System.out.println(\u0026#34;WebSocket Client received closing\u0026#34;); ch.close(); } } @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) { cause.printStackTrace(); if (!handshakeFuture.isDone()) { handshakeFuture.setFailure(cause); } ctx.close(); } } 那么以上2个类就能时候使用netty client建立websocket连接的目标。其他搜索到的用法都无法实现带path的websocket连接\n以上最终的解决方案其实是在netty的github代码示例里找的，还得是英文和官方代码示例靠谱\nWebSocketClient.java\nWebSocketClientHandler.java\n","permalink":"https://blog.thend03.com/posts/connect-websocket-by-netty-client/","summary":"\u003ch2 id=\"背景\"\u003e背景\u003c/h2\u003e\n\u003cp\u003e还是由于apitable，apitable使用socket-io进行连接，连接协议是websocket\u003c/p\u003e\n\u003cp\u003eapitable本地启动的话，websocket连接正常，但是一旦将server部署到测试环境，那么websocket就会连接失败。\u003c/p\u003e\n\u003cp\u003e基于如上的问题背景，那么我就想试试使用netty-client，测试一下连接是否正常。\u003c/p\u003e","title":"使用netty-client建立websocket连接"},{"content":"此篇是apitable系列文章的第2篇，如何实现从本地的docker-compose部署到k8s集群使用deployment部署\n附: apitable代码地址\n背景 apitable提供了makefile实现了本地环境部署，但是我们的目标是落地测试环境和生产环境。\n为了实现可移植性和可扩展性，刚好我们有一个k8s集群，所以决定在k8s上进行部署\n过程 Quick start里本地启动介绍了2步，make dataenv以及make run，就可以本地启动了。那么makefile会有一些比较复杂的逻辑。\n其中make dataenv是使用docker-compose启动了一堆的依赖组件，MySQL、Redis、RabbitMQ、Minio是通过dataenv启动的。\n那么由于它这个makefile比较复杂，docker-compose文件也比较多，makefile最终执行完启动, 环境变量隐藏在里面启动了\n那么在这种情况下怎么做转换呢\n生成docker-compose预览 在询问GPT之后，基于make dataenv的执行过程，给了我如下的一个命令\ndocker compose --env-file .env -f docker-compose.yaml -f docker-compose.dataenv.yaml config --resolve-image-digests 执行之后可以看到在控制台生成了一份填充好环境变量的yaml文件\nyaml详细内容如下\nname: apitable services: backend-server: depends_on: init-db: condition: service_completed_successfully required: true environment: API_PROXY: http://backend-server:8081 ASSETS_BUCKET: assets ASSETS_URL: assets AWS_ACCESS_KEY: apitable AWS_ACCESS_SECRET: apitable@com AWS_ENDPOINT: http://minio:9000 AWS_REGION: us-east-1 BACKEND_BASE_URL: http://backend-server:8081/api/v1/ BACKEND_INFO_URL: http://backend-server:8081/api/v1/client/info CALLBACK_DOMAIN: \u0026#34;\u0026#34; CORS_ORIGINS: \u0026#39;*\u0026#39; DATA_PATH: . DATABASE_TABLE_PREFIX: apitable_ DATABUS_SERVER_BASE_URL: http://databus-server:8625 DB_HOST: mysql DB_NAME: apitable DB_PASSWORD: apitable@com DB_PORT: \u0026#34;3306\u0026#34; DB_USERNAME: root DEFAULT_TIME_ZONE: Asia/Singapore ENV: apitable HUAWEICLOUD_OBS_ACCESS_KEY: apitable HUAWEICLOUD_OBS_ENDPOINT: obs.cn-south-1.myhuaweicloud.com HUAWEICLOUD_OBS_SECRET_KEY: apitable@com IMAGE_BACKEND_SERVER: apitable/backend-server:latest IMAGE_DATABUS_SERVER: apitable/databus-server:latest IMAGE_GATEWAY: apitable/openresty:latest IMAGE_IMAGEPROXY_SERVER: apitable/imageproxy-server:latest IMAGE_INIT_APPDATA: apitable/init-appdata:latest IMAGE_INIT_DB: apitable/init-db:latest IMAGE_MINIO: minio/minio:RELEASE.2023-01-25T00-19-54Z IMAGE_MYSQL: mysql:8.0.32 IMAGE_PULL_POLICY: always IMAGE_RABBITMQ: rabbitmq:3.11.9-management IMAGE_REDIS: redis:7.0.8 IMAGE_REGISTRY: docker.io IMAGE_ROOM_SERVER: apitable/room-server:latest IMAGE_WEB_SERVER: apitable/web-server:latest MAIL_ENABLED: \u0026#34;false\u0026#34; MAIL_FROM: \u0026#34;\u0026#34; MAIL_HOST: \u0026#34;\u0026#34; MAIL_PASSWORD: \u0026#34;\u0026#34; MAIL_PORT: \u0026#34;\u0026#34; MAIL_SSL_ENABLE: \u0026#34;true\u0026#34; MAIL_TYPE: smtp MAIL_USERNAME: \u0026#34;\u0026#34; MINIO_ACCESS_KEY: apitable MINIO_SECRET_KEY: apitable@com MYSQL_DATABASE: apitable MYSQL_HOST: mysql MYSQL_PASSWORD: apitable@com MYSQL_PORT: \u0026#34;3306\u0026#34; MYSQL_ROOT_PASSWORD: apitable@com MYSQL_USERNAME: root NEST_GRPC_ADDRESS: static://room-server:3334 NGINX_HTTP_PORT: \u0026#34;80\u0026#34; NGINX_HTTPS_PORT: \u0026#34;443\u0026#34; OSS_BUCKET_NAME: assets OSS_CACHE_TYPE: minio OSS_CLIENT_TYPE: aws OSS_ENABLED: \u0026#34;true\u0026#34; OSS_HOST: assets OSS_TYPE: QNY1 PUBLIC_URL: \u0026#34;\u0026#34; RABBITMQ_HOST: rabbitmq RABBITMQ_PASSWORD: apitable@com RABBITMQ_PORT: \u0026#34;5672\u0026#34; RABBITMQ_USERNAME: apitable RABBITMQ_VHOST: / REDIS_DB: \u0026#34;0\u0026#34; REDIS_HOST: redis REDIS_PASSWORD: apitable@com REDIS_PORT: \u0026#34;6379\u0026#34; ROOM_GRPC_URL: room-server:3334 SERVER_DOMAIN: \u0026#34;\u0026#34; SKIP_REGISTER_VALIDATE: \u0026#34;true\u0026#34; SMS_ENABLED: \u0026#34;false\u0026#34; SOCKET_DOMAIN: http://room-server:3333/socket SOCKET_GRPC_URL: room-server:3007 SOCKET_RECONNECTION_ATTEMPTS: \u0026#34;10\u0026#34; SOCKET_RECONNECTION_DELAY: \u0026#34;500\u0026#34; SOCKET_TIMEOUT: \u0026#34;5000\u0026#34; SOCKET_URL: http://room-server:3002 TEMPLATE_PATH: ./static/web_build/index.html TEMPLATE_SPACE: spcNTxlv8Drra TIMEZONE: Asia/Singapore TZ: Asia/Singapore USE_CUSTOM_PUBLIC_FILES: \u0026#34;true\u0026#34; USE_NATIVE_MODULE: \u0026#34;0\u0026#34; expose: - \u0026#34;8081\u0026#34; healthcheck: test: - CMD-SHELL - curl -sS \u0026#39;http://localhost:8081\u0026#39; || exit 1 timeout: 5s interval: 5s retries: 60 start_period: 30s image: docker.io/apitable/backend-server:latest@sha256:8f5ba8f8bdee76c7981d92e8e9309403e8312c0795e7cac71cea2f8763f15bee networks: apitable: null pull_policy: always restart: always databus-server: depends_on: mysql: condition: service_healthy required: true environment: API_PROXY: http://backend-server:8081 ASSETS_BUCKET: assets ASSETS_URL: assets AWS_ACCESS_KEY: apitable AWS_ACCESS_SECRET: apitable@com AWS_ENDPOINT: http://minio:9000 AWS_REGION: us-east-1 BACKEND_BASE_URL: http://backend-server:8081/api/v1/ BACKEND_INFO_URL: http://backend-server:8081/api/v1/client/info CALLBACK_DOMAIN: \u0026#34;\u0026#34; CORS_ORIGINS: \u0026#39;*\u0026#39; DATA_PATH: . DATABASE_TABLE_PREFIX: apitable_ DATABUS_SERVER_BASE_URL: http://databus-server:8625 DB_HOST: mysql DB_NAME: apitable DB_PASSWORD: apitable@com DB_PORT: \u0026#34;3306\u0026#34; DB_USERNAME: root ENV: apitable HUAWEICLOUD_OBS_ACCESS_KEY: apitable HUAWEICLOUD_OBS_ENDPOINT: obs.cn-south-1.myhuaweicloud.com HUAWEICLOUD_OBS_SECRET_KEY: apitable@com IMAGE_BACKEND_SERVER: apitable/backend-server:latest IMAGE_DATABUS_SERVER: apitable/databus-server:latest IMAGE_GATEWAY: apitable/openresty:latest IMAGE_IMAGEPROXY_SERVER: apitable/imageproxy-server:latest IMAGE_INIT_APPDATA: apitable/init-appdata:latest IMAGE_INIT_DB: apitable/init-db:latest IMAGE_MINIO: minio/minio:RELEASE.2023-01-25T00-19-54Z IMAGE_MYSQL: mysql:8.0.32 IMAGE_PULL_POLICY: always IMAGE_RABBITMQ: rabbitmq:3.11.9-management IMAGE_REDIS: redis:7.0.8 IMAGE_REGISTRY: docker.io IMAGE_ROOM_SERVER: apitable/room-server:latest IMAGE_WEB_SERVER: apitable/web-server:latest MAIL_ENABLED: \u0026#34;false\u0026#34; MAIL_FROM: \u0026#34;\u0026#34; MAIL_HOST: \u0026#34;\u0026#34; MAIL_PASSWORD: \u0026#34;\u0026#34; MAIL_PORT: \u0026#34;\u0026#34; MAIL_SSL_ENABLE: \u0026#34;true\u0026#34; MAIL_TYPE: smtp MAIL_USERNAME: \u0026#34;\u0026#34; MINIO_ACCESS_KEY: apitable MINIO_SECRET_KEY: apitable@com MYSQL_DATABASE: apitable MYSQL_HOST: mysql MYSQL_PASSWORD: apitable@com MYSQL_PORT: \u0026#34;3306\u0026#34; MYSQL_ROOT_PASSWORD: apitable@com MYSQL_USERNAME: root NEST_GRPC_ADDRESS: static://room-server:3334 NGINX_HTTP_PORT: \u0026#34;80\u0026#34; NGINX_HTTPS_PORT: \u0026#34;443\u0026#34; OSS_BUCKET_NAME: assets OSS_CACHE_TYPE: minio OSS_CLIENT_TYPE: aws OSS_ENABLED: \u0026#34;true\u0026#34; OSS_HOST: assets OSS_TYPE: QNY1 PUBLIC_URL: \u0026#34;\u0026#34; RABBITMQ_HOST: rabbitmq RABBITMQ_PASSWORD: apitable@com RABBITMQ_PORT: \u0026#34;5672\u0026#34; RABBITMQ_USERNAME: apitable RABBITMQ_VHOST: / REDIS_DB: \u0026#34;0\u0026#34; REDIS_HOST: redis REDIS_PASSWORD: apitable@com REDIS_PORT: \u0026#34;6379\u0026#34; ROOM_GRPC_URL: room-server:3334 SERVER_DOMAIN: \u0026#34;\u0026#34; SKIP_REGISTER_VALIDATE: \u0026#34;true\u0026#34; SMS_ENABLED: \u0026#34;false\u0026#34; SOCKET_DOMAIN: http://room-server:3333/socket SOCKET_GRPC_URL: room-server:3007 SOCKET_RECONNECTION_ATTEMPTS: \u0026#34;10\u0026#34; SOCKET_RECONNECTION_DELAY: \u0026#34;500\u0026#34; SOCKET_TIMEOUT: \u0026#34;5000\u0026#34; SOCKET_URL: http://room-server:3002 TEMPLATE_PATH: ./static/web_build/index.html TEMPLATE_SPACE: spcNTxlv8Drra TIMEZONE: Asia/Singapore TZ: Asia/Singapore USE_CUSTOM_PUBLIC_FILES: \u0026#34;true\u0026#34; USE_NATIVE_MODULE: \u0026#34;0\u0026#34; expose: - \u0026#34;8625\u0026#34; image: docker.io/apitable/databus-server:latest@sha256:462fa8bea11df94642b80a58d683aaf9995d79061588843a9d6b7ee66a421600 networks: apitable: null ports: - mode: ingress target: 8625 published: \u0026#34;8625\u0026#34; protocol: tcp pull_policy: always restart: always gateway: depends_on: backend-server: condition: service_healthy required: true imageproxy-server: condition: service_started required: true init-appdata: condition: service_completed_successfully required: true room-server: condition: service_started required: true web-server: condition: service_started required: true environment: TZ: Asia/Singapore image: docker.io/apitable/openresty:latest@sha256:fea46da296a1f156cebf9d26e9b40c781690479fb7629dafb5f1411494b669a8 networks: apitable: null ports: - mode: ingress target: 80 published: \u0026#34;80\u0026#34; protocol: tcp - mode: ingress target: 443 published: \u0026#34;443\u0026#34; protocol: tcp pull_policy: always restart: always imageproxy-server: environment: BASEURL: http://minio:9000 TZ: Asia/Singapore expose: - \u0026#34;8080\u0026#34; image: docker.io/apitable/imageproxy-server:latest@sha256:09ce6fc6817c99247e40cfb52489f217481a867b45d308d9525e13d38aa1e340 networks: apitable: null pull_policy: always restart: always init-appdata: depends_on: init-db: condition: service_completed_successfully required: true mysql: condition: service_healthy required: true environment: API_PROXY: http://backend-server:8081 ASSETS_BUCKET: assets ASSETS_URL: assets AWS_ACCESS_KEY: apitable AWS_ACCESS_SECRET: apitable@com AWS_ENDPOINT: http://minio:9000 AWS_REGION: us-east-1 BACKEND_BASE_URL: http://backend-server:8081/api/v1/ BACKEND_INFO_URL: http://backend-server:8081/api/v1/client/info CALLBACK_DOMAIN: \u0026#34;\u0026#34; CORS_ORIGINS: \u0026#39;*\u0026#39; DATA_PATH: . DATABASE_TABLE_PREFIX: apitable_ DATABUS_SERVER_BASE_URL: http://databus-server:8625 DB_HOST: mysql DB_NAME: apitable DB_PASSWORD: apitable@com DB_PORT: \u0026#34;3306\u0026#34; DB_USERNAME: root ENV: apitable HUAWEICLOUD_OBS_ACCESS_KEY: apitable HUAWEICLOUD_OBS_ENDPOINT: obs.cn-south-1.myhuaweicloud.com HUAWEICLOUD_OBS_SECRET_KEY: apitable@com IMAGE_BACKEND_SERVER: apitable/backend-server:latest IMAGE_DATABUS_SERVER: apitable/databus-server:latest IMAGE_GATEWAY: apitable/openresty:latest IMAGE_IMAGEPROXY_SERVER: apitable/imageproxy-server:latest IMAGE_INIT_APPDATA: apitable/init-appdata:latest IMAGE_INIT_DB: apitable/init-db:latest IMAGE_MINIO: minio/minio:RELEASE.2023-01-25T00-19-54Z IMAGE_MYSQL: mysql:8.0.32 IMAGE_PULL_POLICY: always IMAGE_RABBITMQ: rabbitmq:3.11.9-management IMAGE_REDIS: redis:7.0.8 IMAGE_REGISTRY: docker.io IMAGE_ROOM_SERVER: apitable/room-server:latest IMAGE_WEB_SERVER: apitable/web-server:latest MAIL_ENABLED: \u0026#34;false\u0026#34; MAIL_FROM: \u0026#34;\u0026#34; MAIL_HOST: \u0026#34;\u0026#34; MAIL_PASSWORD: \u0026#34;\u0026#34; MAIL_PORT: \u0026#34;\u0026#34; MAIL_SSL_ENABLE: \u0026#34;true\u0026#34; MAIL_TYPE: smtp MAIL_USERNAME: \u0026#34;\u0026#34; MINIO_ACCESS_KEY: apitable MINIO_SECRET_KEY: apitable@com MYSQL_DATABASE: apitable MYSQL_HOST: mysql MYSQL_PASSWORD: apitable@com MYSQL_PORT: \u0026#34;3306\u0026#34; MYSQL_ROOT_PASSWORD: apitable@com MYSQL_USERNAME: root NEST_GRPC_ADDRESS: static://room-server:3334 NGINX_HTTP_PORT: \u0026#34;80\u0026#34; NGINX_HTTPS_PORT: \u0026#34;443\u0026#34; OSS_BUCKET_NAME: assets OSS_CACHE_TYPE: minio OSS_CLIENT_TYPE: aws OSS_ENABLED: \u0026#34;true\u0026#34; OSS_HOST: assets OSS_TYPE: QNY1 PUBLIC_URL: \u0026#34;\u0026#34; RABBITMQ_HOST: rabbitmq RABBITMQ_PASSWORD: apitable@com RABBITMQ_PORT: \u0026#34;5672\u0026#34; RABBITMQ_USERNAME: apitable RABBITMQ_VHOST: / REDIS_DB: \u0026#34;0\u0026#34; REDIS_HOST: redis REDIS_PASSWORD: apitable@com REDIS_PORT: \u0026#34;6379\u0026#34; ROOM_GRPC_URL: room-server:3334 SERVER_DOMAIN: \u0026#34;\u0026#34; SKIP_REGISTER_VALIDATE: \u0026#34;true\u0026#34; SMS_ENABLED: \u0026#34;false\u0026#34; SOCKET_DOMAIN: http://room-server:3333/socket SOCKET_GRPC_URL: room-server:3007 SOCKET_RECONNECTION_ATTEMPTS: \u0026#34;10\u0026#34; SOCKET_RECONNECTION_DELAY: \u0026#34;500\u0026#34; SOCKET_TIMEOUT: \u0026#34;5000\u0026#34; SOCKET_URL: http://room-server:3002 TEMPLATE_PATH: ./static/web_build/index.html TEMPLATE_SPACE: spcNTxlv8Drra TIMEZONE: Asia/Singapore USE_CUSTOM_PUBLIC_FILES: \u0026#34;true\u0026#34; USE_NATIVE_MODULE: \u0026#34;0\u0026#34; image: docker.io/apitable/init-appdata:latest@sha256:4fa2ed5d1a5a3e2f7bd449352ec3054747127aabe4f91c62fc13f4660b25558b networks: apitable: null pull_policy: always init-db: depends_on: mysql: condition: service_healthy required: true environment: ACTION: update DATABASE_TABLE_PREFIX: apitable_ DB_HOST: mysql DB_NAME: apitable DB_PASSWORD: apitable@com DB_PORT: \u0026#34;3306\u0026#34; DB_USERNAME: root TZ: Asia/Singapore image: docker.io/apitable/init-db:latest@sha256:31cdae8220bdda327e773c2854ced625704203c043774b0992bb13dbb510ae6c networks: apitable: null pull_policy: always minio: command: - server - --console-address - :9001 - /data container_name: minio environment: MINIO_ACCESS_KEY: apitable MINIO_ROOT_PASSWORD: apitable@com MINIO_ROOT_USER: apitable MINIO_SECRET_KEY: apitable@com TZ: Asia/Singapore expose: - \u0026#34;9000\u0026#34; - \u0026#34;9001\u0026#34; healthcheck: test: - CMD-SHELL - curl -sS \u0026#39;http://localhost:9000\u0026#39; || exit 1 timeout: 5s interval: 5s retries: 30 image: docker.io/minio/minio:RELEASE.2023-01-25T00-19-54Z@sha256:6a125ee7860f387d4b1d9aface8be01413e2a9f803508d23b5e9dd64b833e7a7 networks: apitable: null ports: - mode: ingress target: 9000 published: \u0026#34;9000\u0026#34; protocol: tcp - mode: ingress target: 9001 published: \u0026#34;9001\u0026#34; protocol: tcp pull_policy: always restart: always volumes: - type: bind source: /Users/since/zto/APITable/.data/minio/data target: /data bind: create_host_path: true - type: bind source: /Users/since/zto/APITable/.data/minio/config target: /root/.minio bind: create_host_path: true mysql: command: - --default-authentication-plugin=mysql_native_password - --character-set-server=utf8mb4 - --collation-server=utf8mb4_general_ci - --sql_mode=IGNORE_SPACE,NO_ENGINE_SUBSTITUTION - --lower_case_table_names=2 container_name: mysql environment: MYSQL_DATABASE: apitable MYSQL_ROOT_PASSWORD: apitable@com TZ: Asia/Singapore expose: - \u0026#34;3306\u0026#34; healthcheck: test: - CMD-SHELL - mysql apitable -uroot -papitable@com -e \u0026#39;SELECT 1;\u0026#39; timeout: 5s interval: 5s retries: 60 start_period: 30s image: docker.io/library/mysql:8.0.32@sha256:f496c25da703053a6e0717f1d52092205775304ea57535cc9fcaa6f35867800b networks: apitable: null ports: - mode: ingress target: 3306 published: \u0026#34;3306\u0026#34; protocol: tcp pull_policy: always restart: always volumes: - type: bind source: /Users/since/zto/APITable/.data/mysql target: /var/lib/mysql bind: create_host_path: true rabbitmq: container_name: rabbitmq environment: RABBITMQ_DEFAULT_PASS: apitable@com RABBITMQ_DEFAULT_USER: apitable expose: - \u0026#34;5671\u0026#34; - \u0026#34;5672\u0026#34; - \u0026#34;15672\u0026#34; image: docker.io/library/rabbitmq:3.11.9-management@sha256:742359d27f34c379585f46645a5b5a9a8e61877b7b3d8dc009b57701ab4b62c2 networks: apitable: null ports: - mode: ingress target: 5671 published: \u0026#34;5671\u0026#34; protocol: tcp - mode: ingress target: 5672 published: \u0026#34;5672\u0026#34; protocol: tcp - mode: ingress target: 15672 published: \u0026#34;15672\u0026#34; protocol: tcp pull_policy: always restart: always volumes: - type: bind source: /Users/since/zto/APITable/.data/rabbitmq target: /var/lib/rabbitmq bind: create_host_path: true redis: command: - redis-server - --appendonly - \u0026#34;yes\u0026#34; - --requirepass - apitable@com container_name: redis environment: TZ: Asia/Singapore expose: - \u0026#34;6379\u0026#34; image: docker.io/library/redis:7.0.8@sha256:6a59f1cbb8d28ac484176d52c473494859a512ddba3ea62a547258cf16c9b3ae networks: apitable: null ports: - mode: ingress target: 6379 published: \u0026#34;6379\u0026#34; protocol: tcp pull_policy: always restart: always volumes: - type: bind source: /Users/since/zto/APITable/.data/redis target: /data bind: create_host_path: true room-server: depends_on: mysql: condition: service_healthy required: true environment: API_MAX_MODIFY_RECORD_COUNTS: \u0026#34;30\u0026#34; API_PROXY: http://backend-server:8081 ASSETS_BUCKET: assets ASSETS_URL: assets AWS_ACCESS_KEY: apitable AWS_ACCESS_SECRET: apitable@com AWS_ENDPOINT: http://minio:9000 AWS_REGION: us-east-1 BACKEND_BASE_URL: http://backend-server:8081/api/v1/ BACKEND_INFO_URL: http://backend-server:8081/api/v1/client/info CALLBACK_DOMAIN: \u0026#34;\u0026#34; CORS_ORIGINS: \u0026#39;*\u0026#39; DATA_PATH: . DATABASE_TABLE_PREFIX: apitable_ DATABUS_SERVER_BASE_URL: http://databus-server:8625 DB_HOST: mysql DB_NAME: apitable DB_PASSWORD: apitable@com DB_PORT: \u0026#34;3306\u0026#34; DB_USERNAME: root ENABLE_SOCKET: \u0026#34;true\u0026#34; ENV: apitable HUAWEICLOUD_OBS_ACCESS_KEY: apitable HUAWEICLOUD_OBS_ENDPOINT: obs.cn-south-1.myhuaweicloud.com HUAWEICLOUD_OBS_SECRET_KEY: apitable@com IMAGE_BACKEND_SERVER: apitable/backend-server:latest IMAGE_DATABUS_SERVER: apitable/databus-server:latest IMAGE_GATEWAY: apitable/openresty:latest IMAGE_IMAGEPROXY_SERVER: apitable/imageproxy-server:latest IMAGE_INIT_APPDATA: apitable/init-appdata:latest IMAGE_INIT_DB: apitable/init-db:latest IMAGE_MINIO: minio/minio:RELEASE.2023-01-25T00-19-54Z IMAGE_MYSQL: mysql:8.0.32 IMAGE_PULL_POLICY: always IMAGE_RABBITMQ: rabbitmq:3.11.9-management IMAGE_REDIS: redis:7.0.8 IMAGE_REGISTRY: docker.io IMAGE_ROOM_SERVER: apitable/room-server:latest IMAGE_WEB_SERVER: apitable/web-server:latest INSTANCE_MAX_MEMORY: 4096M MAIL_ENABLED: \u0026#34;false\u0026#34; MAIL_FROM: \u0026#34;\u0026#34; MAIL_HOST: \u0026#34;\u0026#34; MAIL_PASSWORD: \u0026#34;\u0026#34; MAIL_PORT: \u0026#34;\u0026#34; MAIL_SSL_ENABLE: \u0026#34;true\u0026#34; MAIL_TYPE: smtp MAIL_USERNAME: \u0026#34;\u0026#34; MINIO_ACCESS_KEY: apitable MINIO_SECRET_KEY: apitable@com MYSQL_DATABASE: apitable MYSQL_HOST: mysql MYSQL_PASSWORD: apitable@com MYSQL_PORT: \u0026#34;3306\u0026#34; MYSQL_ROOT_PASSWORD: apitable@com MYSQL_USERNAME: root NEST_GRPC_ADDRESS: static://room-server:3334 NGINX_HTTP_PORT: \u0026#34;80\u0026#34; NGINX_HTTPS_PORT: \u0026#34;443\u0026#34; NODE_ENV: apitable NODE_OPTIONS: --max-old-space-size=2048 --max-http-header-size=80000 OSS_BUCKET_NAME: assets OSS_CACHE_TYPE: minio OSS_CLIENT_TYPE: aws OSS_ENABLED: \u0026#34;true\u0026#34; OSS_HOST: assets OSS_TYPE: QNY1 PUBLIC_URL: \u0026#34;\u0026#34; RABBITMQ_HOST: rabbitmq RABBITMQ_PASSWORD: apitable@com RABBITMQ_PORT: \u0026#34;5672\u0026#34; RABBITMQ_USERNAME: apitable RABBITMQ_VHOST: / REDIS_DB: \u0026#34;0\u0026#34; REDIS_HOST: redis REDIS_PASSWORD: apitable@com REDIS_PORT: \u0026#34;6379\u0026#34; ROOM_GRPC_URL: room-server:3334 SERVER_DOMAIN: \u0026#34;\u0026#34; SKIP_REGISTER_VALIDATE: \u0026#34;true\u0026#34; SMS_ENABLED: \u0026#34;false\u0026#34; SOCKET_DOMAIN: http://room-server:3333/socket SOCKET_GRPC_URL: room-server:3007 SOCKET_RECONNECTION_ATTEMPTS: \u0026#34;10\u0026#34; SOCKET_RECONNECTION_DELAY: \u0026#34;500\u0026#34; SOCKET_TIMEOUT: \u0026#34;5000\u0026#34; SOCKET_URL: http://room-server:3002 TEMPLATE_PATH: ./static/web_build/index.html TEMPLATE_SPACE: spcNTxlv8Drra TIMEZONE: Asia/Singapore TZ: Asia/Singapore USE_CUSTOM_PUBLIC_FILES: \u0026#34;true\u0026#34; USE_NATIVE_MODULE: \u0026#34;0\u0026#34; expose: - \u0026#34;3333\u0026#34; - \u0026#34;3334\u0026#34; - \u0026#34;3001\u0026#34; - \u0026#34;3002\u0026#34; - \u0026#34;3006\u0026#34; - \u0026#34;3005\u0026#34; - \u0026#34;3007\u0026#34; image: docker.io/apitable/room-server:latest@sha256:7fe50c091022eab7d8066e293c8c8543e064cb39f71e91fe5d5291acd2e85a72 networks: apitable: null pull_policy: always restart: always web-server: environment: API_PROXY: http://backend-server:8081 ASSETS_BUCKET: assets ASSETS_URL: assets AWS_ACCESS_KEY: apitable AWS_ACCESS_SECRET: apitable@com AWS_ENDPOINT: http://minio:9000 AWS_REGION: us-east-1 BACKEND_BASE_URL: http://backend-server:8081/api/v1/ BACKEND_INFO_URL: http://backend-server:8081/api/v1/client/info CALLBACK_DOMAIN: \u0026#34;\u0026#34; CORS_ORIGINS: \u0026#39;*\u0026#39; DATA_PATH: . DATABASE_TABLE_PREFIX: apitable_ DATABUS_SERVER_BASE_URL: http://databus-server:8625 DB_HOST: mysql DB_NAME: apitable DB_PASSWORD: apitable@com DB_PORT: \u0026#34;3306\u0026#34; DB_USERNAME: root ENV: apitable HUAWEICLOUD_OBS_ACCESS_KEY: apitable HUAWEICLOUD_OBS_ENDPOINT: obs.cn-south-1.myhuaweicloud.com HUAWEICLOUD_OBS_SECRET_KEY: apitable@com IMAGE_BACKEND_SERVER: apitable/backend-server:latest IMAGE_DATABUS_SERVER: apitable/databus-server:latest IMAGE_GATEWAY: apitable/openresty:latest IMAGE_IMAGEPROXY_SERVER: apitable/imageproxy-server:latest IMAGE_INIT_APPDATA: apitable/init-appdata:latest IMAGE_INIT_DB: apitable/init-db:latest IMAGE_MINIO: minio/minio:RELEASE.2023-01-25T00-19-54Z IMAGE_MYSQL: mysql:8.0.32 IMAGE_PULL_POLICY: always IMAGE_RABBITMQ: rabbitmq:3.11.9-management IMAGE_REDIS: redis:7.0.8 IMAGE_REGISTRY: docker.io IMAGE_ROOM_SERVER: apitable/room-server:latest IMAGE_WEB_SERVER: apitable/web-server:latest MAIL_ENABLED: \u0026#34;false\u0026#34; MAIL_FROM: \u0026#34;\u0026#34; MAIL_HOST: \u0026#34;\u0026#34; MAIL_PASSWORD: \u0026#34;\u0026#34; MAIL_PORT: \u0026#34;\u0026#34; MAIL_SSL_ENABLE: \u0026#34;true\u0026#34; MAIL_TYPE: smtp MAIL_USERNAME: \u0026#34;\u0026#34; MINIO_ACCESS_KEY: apitable MINIO_SECRET_KEY: apitable@com MYSQL_DATABASE: apitable MYSQL_HOST: mysql MYSQL_PASSWORD: apitable@com MYSQL_PORT: \u0026#34;3306\u0026#34; MYSQL_ROOT_PASSWORD: apitable@com MYSQL_USERNAME: root NEST_GRPC_ADDRESS: static://room-server:3334 NGINX_HTTP_PORT: \u0026#34;80\u0026#34; NGINX_HTTPS_PORT: \u0026#34;443\u0026#34; OSS_BUCKET_NAME: assets OSS_CACHE_TYPE: minio OSS_CLIENT_TYPE: aws OSS_ENABLED: \u0026#34;true\u0026#34; OSS_HOST: assets OSS_TYPE: QNY1 PUBLIC_URL: \u0026#34;\u0026#34; RABBITMQ_HOST: rabbitmq RABBITMQ_PASSWORD: apitable@com RABBITMQ_PORT: \u0026#34;5672\u0026#34; RABBITMQ_USERNAME: apitable RABBITMQ_VHOST: / REDIS_DB: \u0026#34;0\u0026#34; REDIS_HOST: redis REDIS_PASSWORD: apitable@com REDIS_PORT: \u0026#34;6379\u0026#34; ROOM_GRPC_URL: room-server:3334 SERVER_DOMAIN: \u0026#34;\u0026#34; SKIP_REGISTER_VALIDATE: \u0026#34;true\u0026#34; SMS_ENABLED: \u0026#34;false\u0026#34; SOCKET_DOMAIN: http://room-server:3333/socket SOCKET_GRPC_URL: room-server:3007 SOCKET_RECONNECTION_ATTEMPTS: \u0026#34;10\u0026#34; SOCKET_RECONNECTION_DELAY: \u0026#34;500\u0026#34; SOCKET_TIMEOUT: \u0026#34;5000\u0026#34; SOCKET_URL: http://room-server:3002 TEMPLATE_PATH: ./static/web_build/index.html TEMPLATE_SPACE: spcNTxlv8Drra TIMEZONE: Asia/Singapore USE_CUSTOM_PUBLIC_FILES: \u0026#34;true\u0026#34; USE_NATIVE_MODULE: \u0026#34;0\u0026#34; expose: - \u0026#34;8080\u0026#34; image: docker.io/apitable/web-server:latest@sha256:bc4c11eb1faec60f293c3392aa69e85f6fbc87817c15358917335053dcfade8f networks: apitable: null pull_policy: always restart: always networks: apitable: name: apitable_default driver: bridge 转换 那么有了yaml之后，就可以方便的执行转换了，因为我们已经拿到了启动各个pod需要的环境变量，虽然有些是冗余无效的配置，但是前\n期我们的目标是能在k8s上部署，后续配置我们再优化\n那么接下来把yaml发给GPT, GPT会生成一份简陋的配置，环境变量没贴完整\n这里deployment的配置是残缺的\n在经过多次询问之后，最终完整的将所有的environment转换成了env\n最终生成了如下的yaml配置\napiVersion: v1 kind: Service metadata: name: your-service spec: selector: app: your-app ports: - protocol: TCP port: 80 targetPort: 8080 # 适当替换为你的容器端口 --- apiVersion: apps/v1 kind: Deployment metadata: name: your-deployment spec: replicas: 1 # 根据需要的副本数进行调整 selector: matchLabels: app: your-app template: metadata: labels: app: your-app spec: containers: - name: your-container image: your-image ports: - containerPort: 8080 # 适当替换为你的容器端口 env: - name: API_MAX_MODIFY_RECORD_COUNTS value: \u0026#34;30\u0026#34; - name: API_PROXY value: \u0026#34;http://backend-server:8081\u0026#34; - name: ASSETS_BUCKET value: \u0026#34;assets\u0026#34; - name: ASSETS_URL value: \u0026#34;assets\u0026#34; - name: AWS_ACCESS_KEY value: \u0026#34;apitable\u0026#34; - name: AWS_ACCESS_SECRET value: \u0026#34;apitable@com\u0026#34; - name: AWS_ENDPOINT value: \u0026#34;http://minio:9000\u0026#34; - name: AWS_REGION value: \u0026#34;us-east-1\u0026#34; - name: BACKEND_BASE_URL value: \u0026#34;http://backend-server:8081/api/v1/\u0026#34; - name: BACKEND_INFO_URL value: \u0026#34;http://backend-server:8081/api/v1/client/info\u0026#34; - name: CALLBACK_DOMAIN value: \u0026#34;\u0026#34; - name: CORS_ORIGINS value: \u0026#39;*\u0026#39; - name: DATA_PATH value: \u0026#34;.\u0026#34; - name: DATABASE_TABLE_PREFIX value: \u0026#34;apitable_\u0026#34; - name: DATABUS_SERVER_BASE_URL value: \u0026#34;http://databus-server:8625\u0026#34; - name: DB_HOST value: \u0026#34;mysql\u0026#34; - name: DB_NAME value: \u0026#34;apitable\u0026#34; - name: DB_PASSWORD value: \u0026#34;apitable@com\u0026#34; - name: DB_PORT value: \u0026#34;3306\u0026#34; - name: DB_USERNAME value: \u0026#34;root\u0026#34; - name: ENABLE_SOCKET value: \u0026#34;true\u0026#34; - name: ENV value: \u0026#34;apitable\u0026#34; - name: HUAWEICLOUD_OBS_ACCESS_KEY value: \u0026#34;apitable\u0026#34; - name: HUAWEICLOUD_OBS_ENDPOINT value: \u0026#34;obs.cn-south-1.myhuaweicloud.com\u0026#34; - name: HUAWEICLOUD_OBS_SECRET_KEY value: \u0026#34;apitable@com\u0026#34; - name: IMAGE_BACKEND_SERVER value: \u0026#34;apitable/backend-server:latest\u0026#34; - name: IMAGE_DATABUS_SERVER value: \u0026#34;apitable/databus-server:latest\u0026#34; - name: IMAGE_GATEWAY value: \u0026#34;apitable/openresty:latest\u0026#34; - name: IMAGE_IMAGEPROXY_SERVER value: \u0026#34;apitable/imageproxy-server:latest\u0026#34; - name: IMAGE_INIT_APPDATA value: \u0026#34;apitable/init-appdata:latest\u0026#34; - name: IMAGE_INIT_DB value: \u0026#34;apitable/init-db:latest\u0026#34; - name: IMAGE_MINIO value: \u0026#34;minio/minio:RELEASE.2023-01-25T00-19-54Z\u0026#34; - name: IMAGE_MYSQL value: \u0026#34;mysql:8.0.32\u0026#34; - name: IMAGE_PULL_POLICY value: \u0026#34;always\u0026#34; - name: IMAGE_RABBITMQ value: \u0026#34;rabbitmq:3.11.9-management\u0026#34; - name: IMAGE_REDIS value: \u0026#34;redis:7.0.8\u0026#34; - name: IMAGE_REGISTRY value: \u0026#34;docker.io\u0026#34; - name: IMAGE_ROOM_SERVER value: \u0026#34;apitable/room-server:latest\u0026#34; - name: IMAGE_WEB_SERVER value: \u0026#34;apitable/web-server:latest\u0026#34; - name: INSTANCE_MAX_MEMORY value: \u0026#34;4096M\u0026#34; - name: MAIL_ENABLED value: \u0026#34;false\u0026#34; - name: MAIL_FROM value: \u0026#34;\u0026#34; - name: MAIL_HOST value: \u0026#34;\u0026#34; - name: MAIL_PASSWORD value: \u0026#34;\u0026#34; - name: MAIL_PORT value: \u0026#34;\u0026#34; - name: MAIL_SSL_ENABLE value: \u0026#34;true\u0026#34; - name: MAIL_TYPE value: \u0026#34;smtp\u0026#34; - name: MAIL_USERNAME value: \u0026#34;\u0026#34; - name: MINIO_ACCESS_KEY value: \u0026#34;apitable\u0026#34; - name: MINIO_SECRET_KEY value: \u0026#34;apitable@com\u0026#34; - name: MYSQL_DATABASE value: \u0026#34;apitable\u0026#34; - name: MYSQL_HOST value: \u0026#34;mysql\u0026#34; - name: MYSQL_PASSWORD value: \u0026#34;apitable@com\u0026#34; - name: MYSQL_PORT value: \u0026#34;3306\u0026#34; - name: MYSQL_ROOT_PASSWORD value: \u0026#34;apitable@com\u0026#34; - name: MYSQL_USERNAME value: \u0026#34;root\u0026#34; - name: NEST_GRPC_ADDRESS value: \u0026#34;static://room-server:3334\u0026#34; - name: NGINX_HTTP_PORT value: \u0026#34;80\u0026#34; - name: NGINX_HTTPS_PORT value: \u0026#34;443\u0026#34; - name: NODE_ENV value: \u0026#34;apitable\u0026#34; - name: NODE_OPTIONS value: \u0026#34;--max-old-space-size=2048 --max-http-header-size=80000\u0026#34; - name: OSS_BUCKET_NAME value: \u0026#34;assets\u0026#34; - name: OSS_CACHE_TYPE value: \u0026#34;minio\u0026#34; - name: OSS_CLIENT_TYPE value: \u0026#34;aws\u0026#34; - name: OSS_ENABLED value: \u0026#34;true\u0026#34; - name: OSS_HOST value: \u0026#34;assets\u0026#34; - name: OSS_TYPE value: \u0026#34;QNY1\u0026#34; - name: PUBLIC_URL value: \u0026#34;\u0026#34; - name: RABBITMQ_HOST value: \u0026#34;rabbitmq\u0026#34; - name: RABBITMQ_PASSWORD value: \u0026#34;apitable@com\u0026#34; - name: RABBITMQ_PORT value: \u0026#34;5672\u0026#34; - name: RABBITMQ_USERNAME value: \u0026#34;apitable\u0026#34; - name: RABBITMQ_VHOST value: \u0026#34;/\u0026#34; - name: REDIS_DB value: \u0026#34;0\u0026#34; - name: REDIS_HOST value: \u0026#34;redis\u0026#34; - name: REDIS_PASSWORD value: \u0026#34;apitable@com\u0026#34; - name: REDIS_PORT value: \u0026#34;6379\u0026#34; - name: ROOM_GRPC_URL value: \u0026#34;room-server:3334\u0026#34; - name: SERVER_DOMAIN value: \u0026#34;\u0026#34; - name: SKIP_REGISTER_VALIDATE value: \u0026#34;true\u0026#34; - name: SMS_ENABLED value: \u0026#34;false\u0026#34; - name: SOCKET_DOMAIN value: \u0026#34;http://room-server:3333/socket\u0026#34; - name: SOCKET_GRPC_URL value: \u0026#34;room-server:3007\u0026#34; - name: SOCKET_RECONNECTION_ATTEMPTS value: \u0026#34;10\u0026#34; - name: SOCKET_RECONNECTION_DELAY value: \u0026#34;500\u0026#34; - name: SOCKET_TIMEOUT value: \u0026#34;5000\u0026#34; - name: SOCKET_URL value: \u0026#34;http://room-server:3002\u0026#34; - name: TEMPLATE_PATH value: \u0026#34;./static/web_build/index.html\u0026#34; - name: TEMPLATE_SPACE value: \u0026#34;spcNTxlv8Drra\u0026#34; - name: TIMEZONE value: \u0026#34;Asia/Singapore\u0026#34; - name: TZ value: \u0026#34;Asia/Singapore\u0026#34; - name: USE_CUSTOM_PUBLIC_FILES value: \u0026#34;true\u0026#34; - name: USE_NATIVE_MODULE value: \u0026#34;0\u0026#34; 有了基本的架子之后，就可以在当前的模板上进行更新修改了，按需调整配置项，最终实现了make dataenv和make run涉及的所有组件\n在k8s deployment上部署的目标。\n","permalink":"https://blog.thend03.com/posts/apitable-from-docker-compose-to-k8s-deployment/","summary":"\u003cp\u003e此篇是apitable系列文章的第2篇，如何实现从本地的docker-compose部署到k8s集群使用deployment部署\u003c/p\u003e\n\u003cp\u003e附: \u003ca href=\"https://github.com/apitable/apitable\"\u003eapitable代码地址\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"背景\"\u003e背景\u003c/h2\u003e\n\u003cp\u003eapitable提供了makefile实现了本地环境部署，但是我们的目标是落地测试环境和生产环境。\u003c/p\u003e\n\u003cp\u003e为了实现可移植性和可扩展性，刚好我们有一个k8s集群，所以决定在k8s上进行部署\u003c/p\u003e","title":"apitable从docker compose到k8s deployment的转变"},{"content":"背景 此篇是apitable落地的第一篇，实现了nginx的可配。\n最近在预研一个开源项目，打算实现本地化部署，在测试环境的k8s集群中部署所有的服务\n那么流量入口是用的nginx，里面有server和upstream配置，也需要在k8s中部署\n由于upstream下游是写死的，我这边的需求是能在测试环境，动态调用不同的服务。\n如果按照代码里当前的配置，想调用不同的服务，那只能修改upstream地址，重新打镜像。\n所以我这边的想法是只打一个镜像，通过读取环境变量的方式，替换占位符。\n那么经过一番搜索，整理，最终实现了环境变量替换占位符的目标。\nnginx原生是不支持这种方式的，所以搜索的过程还有点艰难。\n项目信息 是一个开源的多维表格项目，代码地址: apitable\nnginx配置信息在gateway/conf.d目录下\n替换详细步骤 以ups-backend-server-conf为例，这个是访问java后端进程的地址配置\n在k8s中，如果存在backend-server这个service其实也还行，但是我的目的是可以方便的访问本地服务实现调试。\n所以默认的这种配置不大适合我，需要修改为占位符的方式。\n但是nginx有一个问题 ，就是 nginx约定好的$host/$remote等变量也会被这个命令替换掉，替换掉后基本上都会造成问题。\n所以占位符替换首要是要解决这么一个问题。\n经过搜索之后，可以先拿到当前环境所有已定义的环境变量，使用文本处理，得到所有想要替换的环境变量。\n此时使用envsubst指定替换功能，就不会替换掉$host/$remote等信息了。\n下面介绍下实现在k8s部署nginx，使用环境变量替换占位符的详细步骤。\n目录结构 在原有的目录结构上，新增了build_nginx.sh、docker-entrypoint.sh、Dockerfile这几个新文件。\n修改了upstream下所有的server配置，修改为占位符，启动之后从环境变量读取替换。\n修改配置文件 还是以以ups-backend-server-conf为例，进行修改\n修改之后的配置文件内容如下\n#upstream backend { # server backend-server:8081; #} upstream backend { server ${BACKEND_SERVER}; } 配置文件中将固定地址修改为配置项\ndocker build脚本 我们的目标是在k8s中部署Nginx，首先是要打个nginx镜像出来。\n使用如下的docker build脚本,在命令行执行./build_nginx.sh test打镜像，推到镜像仓库，版本号可以自定义\n#!/bin/bash version=\u0026#34;$1\u0026#34; docker build --platform=linux/amd64 -t \u0026#34;registry.self.com/apitable/nginx-server:$version\u0026#34; . docker push \u0026#34;registry.self.com/apitable/nginx-server:$version\u0026#34; echo \u0026#34;image url: registry.self.com/apitable/nginx-server:$version\u0026#34; Dockerfile 使用如下的dockerfile生成自己的nginx镜像，替换环境变量的操作在docker-entrypoint.sh里执行\nFROM --platform=linux/amd64 nginx:latest # 安装所需组件 RUN apt-get update \u0026amp;\u0026amp; apt-get install -y vim net-tools telnet iputils-ping dnsutils RUN mkdir -p \u0026#34;/etc/nginx/templates\u0026#34; #添加配置 COPY conf.d/default.conf /etc/nginx/conf.d/default.conf COPY conf.d /etc/nginx/templates RUN for f in /etc/nginx/templates/*/*.conf; do mv \u0026#34;$f\u0026#34; \u0026#34;${f%.conf}.conf.template\u0026#34;; done #添加替换占位符脚本 COPY docker-entrypoint.sh /usr/local/bin RUN chmod +x /usr/local/bin/docker-entrypoint.sh EXPOSE 80 ENTRYPOINT [\u0026#34;/usr/local/bin/docker-entrypoint.sh\u0026#34;] CMD [\u0026#34;nginx\u0026#34;, \u0026#34;-g\u0026#34;, \u0026#34;daemon off;\u0026#34;] docker-entrypoint.sh替换占位符 如下的是docker-entrypoint.sh里的内容，执行替换自定义占位符，不会替换nginx自带的占位符。\n注意最后一行，不添加最后一行会导致Dockerfile里的cmd无法执行。\n#!/bin/bash set -e ME=$(basename $0) # 打开文件描述符 3，将输出定向到标准错误 exec 3\u0026gt;\u0026amp;2 auto_envsubst() { local template_dir=\u0026#34;${NGINX_ENVSUBST_TEMPLATE_DIR:-/etc/nginx/templates}\u0026#34; local suffix=\u0026#34;${NGINX_ENVSUBST_TEMPLATE_SUFFIX:-.template}\u0026#34; local output_dir=\u0026#34;${NGINX_ENVSUBST_OUTPUT_DIR:-/etc/nginx/conf.d}\u0026#34; local template defined_envs relative_path output_path subdir # 这里拿到了所有定义的环境变量 # [root@iZwz9hmxhr8nh716gmser4Z tmp]# printf \u0026#39;${%s} \u0026#39; $(env | cut -d= -f1) # ${XDG_SESSION_ID} ${HOSTNAME} ${TERM} ${SHELL} ${HISTSIZE} ${SSH_CLIENT} ${NNHOST} ${OLDPWD} ${SSH_TTY} ${NGINX_HOST} ${USER} ${LS_COLORS} ${MAIL} ${PATH} ${PWD} ${LANG} ${HISTCONTROL} ${SHLVL} ${HOME} ${LOGNAME} ${SSH_CONNECTION} ${LESSOPEN} ${XDG_RUNTIME_DIR} ${_} defined_envs=$(env | cut -d= -f1 | awk \u0026#39;{printf \u0026#34;${%s} \u0026#34;, $1}\u0026#39;) echo \u0026#34;defined_envs: $defined_envs\u0026#34; [ -d \u0026#34;$template_dir\u0026#34; ] || return 0 if [ ! -w \u0026#34;$output_dir\u0026#34; ]; then echo \u0026gt;\u0026amp;3 \u0026#34;$ME: ERROR: $template_dir exists, but $output_dir is not writable\u0026#34; return 0 fi find \u0026#34;$template_dir\u0026#34; -follow -type f -name \u0026#34;*$suffix\u0026#34; -print | while read -r template; do relative_path=\u0026#34;${template#$template_dir/}\u0026#34; output_path=\u0026#34;$output_dir/${relative_path%$suffix}\u0026#34; subdir=$(dirname \u0026#34;$relative_path\u0026#34;) # 添加以下输出语句确认找到的文件 echo \u0026#34;Found template file: $template, output_dir: $output_dir, subdir: $subdir\u0026#34; # create a subdirectory where the template file exists mkdir -p \u0026#34;$output_dir/$subdir\u0026#34; echo \u0026gt;\u0026amp;3 \u0026#34;$ME: Running envsubst on $template to $output_path\u0026#34; # 这里指定只替换定义的环境变量，因此不会覆盖掉nginx约定好的$host...等变量 # 相当于执行了 # envsubst \u0026#34;${XDG_SESSION_ID} ${HOSTNAME} ${TERM} ${SHELL} ${HISTSIZE} ${SSH_CLIENT} ${NNHOST} ${OLDPWD} ${SSH_TTY} ${NGINX_HOST} ${USER} ${LS_COLORS} ${MAIL} ${PATH} ${PWD} ${LANG} ${HISTCONTROL} ${SHLVL} ${HOME} ${LOGNAME} ${SSH_CONNECTION} ${LESSOPEN} ${XDG_RUNTIME_DIR} ${_}\u0026#34; \u0026lt;\u0026#34;$template\u0026#34; \u0026gt;\u0026#34;$output_path\u0026#34; envsubst \u0026#34;$defined_envs\u0026#34; \u0026lt;\u0026#34;$template\u0026#34; \u0026gt;\u0026#34;$output_path\u0026#34; echo \u0026#34;输出替换后的实际文件: $output_path\u0026#34; cat \u0026#34;$output_path\u0026#34; done } auto_envsubst echo \u0026#34;begin start nginx\u0026#34; #添加这一行, 继续执行CMD,不然会卡住失败 exec \u0026#34;$@\u0026#34; k8s nginx deployment 那么经过上面的脚本，可以打包一个可以自定义环境变量的nginx镜像，下面需要在k8s上面部署nginx镜像\ndeployment配置如下, 在启动之后使用环境变量替换了占位符\nbackend-server-service.apitable.svc.cluster.local:8081这种是k8s service访问的形式，指向了backend-server的deployment\n关于service的详细信息可以见文档: K8S DNS\napiVersion: apps/v1 kind: Deployment metadata: name: nginx-server namespace: apitable #指定namespace component: apitable nginx server labels: app: nginx-server spec: replicas: 1 selector: matchLabels: app: nginx-server template: metadata: labels: app: nginx-server spec: containers: - name: nginx image: registry.self.com/apitable/nginx-server:latest #替换为自己镜像地址 imagePullPolicy: Always ports: - containerPort: 80 env: - name: BACKEND_SERVER value: \u0026#34;backend-server-service.apitable.svc.cluster.local:8081\u0026#34; - name: IMAGE_PROXY_SERVER value: \u0026#34;imageproxy-server-service.apitable.svc.cluster.local:8080\u0026#34; - name: MINIO_SERVER value: \u0026#34;minio-service.apitable.svc.cluster.local:9000\u0026#34; - name: ROOM_SERVER value: \u0026#34;room-server-service.apitable.svc.cluster.local:3333\u0026#34; - name: ROOM_SERVER_SOCKET value: \u0026#34;room-server-service.apitable.svc.cluster.local:3002\u0026#34; - name: ROOM_SERVER_SOCKET_ROOM value: \u0026#34;room-server-service.apitable.svc.cluster.local:3005\u0026#34; - name: ROOM_SERVER_DOCUMENT value: \u0026#34;room-server-service.apitable.svc.cluster.local:3006\u0026#34; - name: WEB_SERVER value: \u0026#34;web-server-service.apitable.svc.cluster.local:8080\u0026#34; service如下,使用nodeport进行访问，nodeport相当于在宿主机上起了个端口供外部访问，不然集群地址外部是访问不通的\napiVersion: v1 kind: Service metadata: name: nginx-server-service spec: type: NodePort selector: app: nginx-server ports: - name: nginx-server protocol: TCP port: 80 targetPort: 80 nodePort: 30017 在k8s本地化部署过程中，配置了如下的多种service，用于调试测试\n最终效果 进入pod，查看/etc/nginx/conf.d/upstream/ups-backend-server.conf\n","permalink":"https://blog.thend03.com/posts/nginx-replace-placeholder/","summary":"\u003ch2 id=\"背景\"\u003e背景\u003c/h2\u003e\n\u003cp\u003e此篇是apitable落地的第一篇，实现了nginx的可配。\u003c/p\u003e\n\u003cp\u003e最近在预研一个开源项目，打算实现本地化部署，在测试环境的k8s集群中部署所有的服务\u003c/p\u003e\n\u003cp\u003e那么流量入口是用的nginx，里面有server和upstream配置，也需要在k8s中部署\u003c/p\u003e\n\u003cp\u003e由于upstream下游是写死的，我这边的需求是能在测试环境，动态调用不同的服务。\u003c/p\u003e","title":"nginx替换占位符"},{"content":"时间不知不觉来到了2024年，是时候写2023年的下半年总结了。\n相比上半年，下半年总体平淡一点，确实也做了不少的事。\n回顾完下半年，再结合去年年初制定的2023年度计划，以及上半年总结，回忆2023年全年的得与失。\n2023年度规划-2023-01-05\n2023年上半年总结\nJuly 看车 7月由于亲爱的刚从新疆回来，以及入职新公司，所以7月总体周末没有跑太远\n去看了看车。\n看了比亚迪，吉利，以及韭菜厂小鹏，还有飞凡。\n由于我俩对车实在是没啥研究，缺乏基础知识，也懒得跑，所以基本上只看了这4家，从原来的觉得汉还行，变成一致觉得汉不行，非常的显老气。\n7月只是看，没有下手。\n以我俩的精气神，看4家已是极限，极限中的极限了。\n电车都会开在人流密集的商场，用户逛完商场路过一楼就能进去看看展车。比燃油车好不少，燃油车要去专门的4s店看，没那么方便。\n不得不说，韭菜车帅是真的帅\n红山动物园与紫金山 表弟把他妹和我妈带到了南京，所以7月我加上我妈，我弟，我表弟，我表妹一起在南京逛了一下。\n7月1号，是个周六，我和我弟中午到了南京，吃过午饭之后，就开始逛动物园了。\n7月正是天热的时候，下午2点那更是热上加热，热的离谱，难为我们4个人(胖子一步都走不动)那么热的天还在逛动物园。\n![image-20240122224125811](/Users/since/Library/Application Support/typora-user-images/image-20240122224125811.png)\n逛完了动物园之后都下午5点钟了，夏天5点钟还好，于是我们又相约去爬了个紫金山。\n下山之后吃了点棒冰，小时候的科技味十足\n还是我们4个，胖子在山下守着。沿着后山停车场的小路，一路往上爬。夏天傍晚的天气还很炎热的，一边走一边看看夏日林间微凉。\n看看这个瘦子，也热的不行\n在7点多的时候爬到了山顶，和紫金山合影留念\n这一爬就从傍晚爬到了深夜，上去一个半小时，下去一个半小时。和紫金山一起待了快3个小时\n到山顶观光台的时候，刚好是7点多，那会还有天刚暗下来，看着远处的万家灯火，也算是一道风景。\n买了个kfc甜筒，照亮夜的美\n观景台站了挺多人，在等待夜景出没，天黑之后，远处灯光绚烂，照亮每一个人\n这张没拍好，过曝了，沐浴在圣光之中\n下山的时候已经入夜，还有不少的人在沿着大路上山，可能夜爬紫金山不热且解暑吧。\n晚上9点多的时候，5个人在柴火灶吃了一顿，不得不说，好吃又便宜。\n就这样，7月第一天就在匆匆行程中结束了。虽然短暂，但也挺充实的。\n另外怀念远在新疆的亲爱的，没和我们一起爬山。亲爱的此刻在新疆天都还没黑呢，新疆远比紫金山辽阔美丽，可惜没时间一起加入新疆。\n填志愿 6月好大弟高考，7月初要填志愿。作为过来人说，好城市，好学校至少要占一个，只能说好大弟有个好姐，给她安排的明明白白的。\n不然随了好大弟的心，上了江苏大学，那后面有的哭的。\n最终虽然专业不行，但好城市和好学校占了俩，已经算不错的结果了。没报上理工科专业也不一定是坏事，个人有个人擅长的吧。\n希望好大弟好好珍惜他姐的付出吧，路铺好了，自己好好学习。\n接机 亲爱的从新疆回来了，我要去虹桥接机，结果虹桥机场没去过，我在一楼等，她下飞机之后和我不在一边，导致没接上，闹了个矛盾，深表歉意啊亲爱的，赶高铁差点迟到，阿门。\n换手机 6月19号的晚上，手机由于一个没拿稳，屏碎了。恰巧刚过618，手机折扣都没了，于是就想着旧手机换个屏在撑一撑。\n真的是，换屏干嘛呢。折磨自己，利好他人。\n换个屏280，结果亮度不行，刷新率不行，每天看着都要瞎眼。我自己是狗东西，维修店也是狗东西，这么个垃圾的屏幕能卖280我也是服气。\n后来咬咬牙买了新手机，拿到手机的那一刻，我直接哭了，这才是手机好吧，我换的是什么电子垃圾啊。\n换屏280，旧手机回收380，我可真是个小机灵鬼，服了我自己了。\n有些事，是真的不能省，屏幕作为手机的灵魂，没了屏就没了灵魂。切记，吃一堑长一智吧。\n另外值得一提的是我觉得送的这个音箱都比homepod mini好用，苹果设计的什么脑残产品，拖出去砍了吧。配对贼难，还没有电池，非得一直插着线才能用，真的垃圾\n逛上海 在上海市里逛了一下，体验了下小资下午茶，不得不说，消费是真高。另外上海的大house也挺贵的\nAugust 时间不知不觉就来到了8月。8月也没干其他事，主要是看车和看房。\n可以买不起，但是可以去看一看，看一看又不要钱。\n启东看海 在23年8月圆上了22年去启东看海的念想。\n亲爱的在南通出差，我从上海去南通，一气呵成。\n我到南通站都10点多了，打了顺风车，顺风车相比打车还是便宜，不过到的时候都凌晨2点了。\n然后是在美团定的海景房，到了之后才发现真的是个大大的骗局。冰箱里连瓶水都没有，就只有南北2个房间。\n房子是海景没错，但都是高层，高层里的公寓房间，那个地方是叫恒大海上威尼斯。是恒大开发的一片住宅。\n将近200栋30多层的高层住宅，非常的离谱，被美团上的图片骗了，商品图片拍的像独栋别墅，实际是高层里的公寓房。\n整体也不太干净，海景么也有，早上起来，再北面阳台也能看到海景不是。\n然后早上6点就起了，因为上午要赶时间去南京，所以上午时间也挺赶的。\n花了200吃了个酒店自助餐，见仁见智。然后在海里扑腾了一会，掐着点去酒店洗了澡，打车去了启东站。\n海水看着还不咋地 ，就圈了一小块来游泳\n一双大Jio，一双小jio在沙里并排排\n路上最后一段还一直红灯，还好是启东站比较小，没有误车，我们把景点买的泳圈送给了滴滴司机，结束了在启东的行程。\n由于买的是无票，我俩每流窜到一个座位上，乘务员都要过来登记一下，就这样晃了3个多小时到了南京。\n不怎么友好的启东之旅就此结束。\n萨利亚 我俩第一次吃萨利亚，还得追溯到21年，当时吃完都惊了，点了一堆，人均才50，不愧是国产意式餐厅\n今年在永旺又吃了一次，排队的还挺多的\n定车 为了选车，看了好多的视频，当时看到的好多up主的视频，现在都不看了。\n我最喜欢的还是新八的视频。接地气，高产，视频时长足够，内容丰富。我个人挺喜欢看的，做了好多之前我没听过，也没了解过的车的\n视频，让我除了对那些知名燃油车，还有对新势力混动和纯电车型，从0-20万这个区间，了解了很多车型的知识。新八是我23年看的最多的一个up了。感谢新八老师。\n说回车，那次去试驾了G6,我开了一段，高架上使用的小鹏的NGP开的，下了高架要等红绿灯，然后手足无措，下高架之后，手动接管，\n向左连续变了4个车道，彻底吓崩销售和后排亲爱的。现在来看，连续变道确认安全也没啥，不过新手紧张确实容易除问题，尤其是有大\n车出没的地方，非常危险。\n先看的G6, 然后在店里被销售那么一说，折服于P7的颜值，最终定了p7，销售说G6买了如果后面再看p7，大概率是要后悔的。\np7呢定了之后再看g6不会后悔，所以最终定了p7。\n那么有一说一，亲爱的敢打敢拼，脑子灵活，想法多是好的，但是想法多之后也会经常的变卦。比如内饰颜色要换，p7会不会有坑，为啥不看看volvo，volvo好帅之类的。我呢，就是那种想法定了不想更改的人。所以很多时候情绪容易对立。\n不过最终几个月开下来，P7整体来说没有太多的缺点，属于我俩都比较喜欢的车，现在在看G6，确实是容易后悔，不如去买年轻人理想的家-零跑C10吧[dog]，只要p7 六成的价格就能拿下。\n还得是亲爱的胆大心细，提车第2天就自己吭哧吭哧开好远了，太佩服了一路从湖东飙到尹山湖，再从尹山湖飙到西山岛\n看房 本着看看又不花钱的心态，去看了独墅湖板块一个小区，楼龄有10年了，整体偏旧，地库设计的不好。\n8月周末看了好几轮，最终看上了2套，分别和2拨中介谈，那么最后还是因为价格没谈拢，继续观望。\n看那个小区的挂牌价，从22年挂牌的，到23年8月，一路下调了7，80万，这么多钱够我打工存多少年的。\n更离谱的是，11月，12月价格继续下跌，相比最初挂牌价的时候跌了100-120万。\n现在整个二手房市场是买房市场了，可以再观望观望等一等，耐心久一点，出手错的话，可能就是一辆甚至多辆p7没了。\nSeptember 时间不知不绝就来到9月了，9月周末好像也挺丰富的。\n提车 具体可以看下这篇:买车日记\n为了领优惠券，跑去无锡提车了。专门摇了华子，从南京到无锡帮我们开回苏州去了，感谢华子的辛苦付出。\n另外还是得夸一下亲爱的，艺高人胆大，提车练了没多久，就敢开上高架了，第2天晃着晃着就开到了太湖西山。\n有车之后活动半径确实扩大了许多，也方便了许多，电车也便宜，外面的充电桩400公里只要60块钱，要是家充会更便宜。\n现在唯一的麻烦就是要去2公里之外的充电桩去充电，其他的体验就飞一般的上升了。\n团建 我公司的部门定了9月15团建，可以带家属，然后就带着家属一起参加了团建，从公司出发去了舟山。\n一路奔袭了好远，在舟山看了海，在夏末又一次体验到了海的感觉。\n其他的体验就比较一般了，周六出发，周日回，8个小时在路上。\n下午到的时候吃了顿海鲜大餐，菜咔咔往上上，丰盛的一次海鲜餐。\n晚上部门在海滩上烧烤，我俩想自己探索一下，就自己脱队去探索了一下，路边的风景还是不错的。\n在路边吃了2碗可能是过期海鲜做的海鲜面，路边买了点水果就回房间休息去了，天太黑了啥也看不到。\n第二天是个好天气，我俩又继续自己探索去了，租了个电瓶车去朱家尖码头，那边比较热闹，有很多的商铺，应该也是有很多人在那边坐船去对面普陀岛的。我俩看重了一块石头，不过是按克卖的，这个时候亲爱的反复的劲又上来了，选好了一块，都杀价杀了下去，结果觉得不好，又换了一块，结果这块石头比之前的贵还没法讲价。\n临近中午我俩在一个素食餐厅吃了午饭，都没几个人，一共2桌。吃完回来的时候电瓶都没啥电了，一路晃晃悠悠的，最终叫了店里的电瓶车救援，差点没赶上回来的车，太难了一点。\n然后就是坐车回去了，到了上海之后，蹭了周哥的车回了苏州，感谢周哥大好人。\n搬家 搬家这个周末可谓是损失惨重，由于上个房子退房到期了，需要在那个周末必须搬。由于上周去团建了，没时间看房了，最终是亲爱的工作日晚上挑了几家看了一下，最终定了一个房子。\n那么周末就开始搬的，周六上午在收拾，一直收拾到下午。租的搬家货车由于太高了，进不了地库。地面上离我们租的房子又非常的远。出去借小推车也没借到，只能人肉一趟一趟搬。\n最要命的是，雨越下越大了，还好是衣服啥的都有纸箱和袋子包着，不然真的损失惨重极大。\n我和我弟2个人冒着大雨一趟一趟的搬，拿衣架轮子当推车，推了一趟也坏了。最终冒着大雨，推了3个小时搬完了所有，真的是一次糟糕到家的体验。\n更要命的事，用车运行李，在地库撞了，送出了一血，还好买了车损，不然真的亏到姥姥家了。后面去修，我开错了道，又磕到了路边的花坛，轮毂花了，车轮废了一个，真的是，糟糕的连锁反应。\n下次搬家我决定自备小推车，就一个小推车，能节省很多的事，真的是。\n之前写了一篇文章，但是最终也没写完，下不去手: 损失惨重的周末\n就这样吧，看一次心痛一次，太痛苦了。\n冒雨人肉搬了2个多小时，太难太难了\n修车 和G6混了，没有不限次数取送车服务，还得顶着弹起的后备箱去修车，去的时候开车因为太紧张，在走左转专用道的时候，磕到了花坛上，废了一个轮胎，那可真的是损失太太太大了。\n没经验，没有在第一时间保险报案，第2天开到木渎再开回来报案再开回去，没有取送车服务，真的是来来回回的，费劲。\n后盖可以走保险，轮胎只能自费了。好吧，下次封禁我的手，不再开车了。\n这次修车，要国庆之后才能拿回车了，国庆之后见。\nOctober 川渝游记 10月在老丈人和丈母娘的赞助下，获得了一次川渝旅程，总体来说还行，不过好大弟的性格还要改改，不要对他姐和家里人那么冲。\n不得不说川渝真的是好吃的多，好玩的多: 川渝游记\n在赶飞机的时候，在农村发现有个车掉沟里去了，虽然但是，真的很好笑\n其他 10月回来之后，工作日比较短，很快就过去了，那么其他的工作日都比较平淡，没有去太多的地方，探索了下周边，尹山湖没啥可玩的。\nNovember 塔塔川川 某天在地库的时候，发现有个人在溜柯基，作为社牛的亲爱的，就主动打了个招呼。\n然后惊喜的发现，柯基刚下了一窝小崽子，一共5只。然后亲爱的一发不可收拾，天天去他家看崽子。\n由于小崽子还没满月，所以不能暴走，需要满月之后再抱走。\n没满月那几天天天去rua狗，买各种狗粮，狗围栏，狗玩具，狗尿垫，狗零食，狗盆，把狗相关的东西都买了一遍，然后最终发现随着狗的生长，这些东西迭代的都好快，完全跟不上狗生长的速度，一般狗3狗就相当于度过青少年期了。\n本来只打算养一只的，取名塔塔，但是另一只小黑头长的不好看，柯基爸就说这个养着也简单，养2个狗还能有个伴，真的信了他的鬼话。\n然后就2只了，另一只取名川川，只能说有川川，避免了塔塔过度肥胖，塔塔就是好吃懒做狗的代表，有川川还能带着塔塔跑一跑。\n前期给塔塔和川川喝的羊奶粉，搭配的狗粮，吃的非常的好，所以长的也挺壮实。\n小的时候贼可爱\n下面养狗呢，也挺开心的，但是2只狗的破坏力也挺惊人的。由于抱回来的时候只有1个月大，还小，所以后面养的时候没法控制自己，天\n天在屋里乱拉乱尿，真的天天和塔塔的屎尿味作伴，太难了，养狗如养小孩，太难了。\n而且从小就有坏习惯，喜欢叼鞋。长大了鞋一直在遭殃\n小时候待遇可好了，天天喝羊奶粉\n毛发光泽细腻有亮光\n塔塔初具肥猪体型了，好小的时候就显胖\n晚上还睡不好，容易叫，一叫就烦，我还好，亲爱的这几个月确实没有睡好觉。\n果然小时候多可爱，长大的过程就会多么的折磨自己的父母，养狗真的太难了，需要耗费很多的精力和耐心，慎重。\n接我回家 亲爱的在开车熟练之后，有一天下班的时候吭哧吭哧的来上海了，她驾照刚拿半年，开车不足2个月，一个人第一次开高速，我比她还紧\n张，好在第一次还比较顺利。然后一起在公司附近吃了饭。感谢亲爱的，跑大老远从苏州来带我回家，mua一个，爱你哟。\n后来亲爱的又来了一次，再次吃了个饭，吃了大盘鸡，那家大盘鸡还是挺好的。\n![image-20240122233121366](/Users/since/Library/Application Support/typora-user-images/image-20240122233121366.png)\n参加婚礼 初中同学在11月参加婚礼了，然后亲爱的带我去参加了婚礼，挑战200公里，不过还好作为优秀女司机，轻松拿下了。\n婚礼平平无奇，不知道上了啥饮料，差点给我送走，真的再多喝几口我就过去了。\n第2天有亮点，在泰兴高港发现了一个湖，叫凤栖湖，还挺好看的，好大一片湖，而且风景很好，人也很少。还有个塔，关键停车免费。\n但是我没找到凤栖湖的缆车过江在哪，削微有点遗憾。\nDecember 遛狗 12月主要的活动重心就是遛狗了，打疫苗的时候宠物店说打完3针疫苗之前，最好不要出门。\n现在天天出去溜都要把家拆碎了，天天不出门，房顶估计都被掀了好几次了。\n12月初连着带狗去了2次天平山，那会温度适宜，阳光明媚，非常的好。\n50天的狗在草地、步道上跑的非常的开心，那会还是2小只，跑步跑的不稳，非常的好看。\n那会塔塔和川川就可以跟着我们走1个小时了，现在他们俩直接可以走2个小时，没有2个小时走不累的那种，狗的精力实在太好了。\n这2个月看着他们从小不点，长成了大长条，一个还长成了猪的模样，说的就是你，塔塔。\n希望他们能长的再高一点，少拆点家，阿门。\n这是他们大概40天的样子，还是很小的一只，我还能抱得动2个，再大一点我就不行了，一个都抱不动了。\n睡觉的时候这会就已经想贴着我俩睡了\n左右夹击，交个狗朋友\n这会已经初具拆家能力了，真的又气又恨，每次家里就没保持整洁超过24小时\n还很喜欢吃营养糕，遛狗利器，贼喜欢吃\n真的和它的柯基妈一样的坐姿\n60天的时候，身子已经长的很长了，不知道能不能再长的高一点\n去宁波 21亲爱的从宁波离开，距今已经2年多了，去宁波的想法愈发的强烈，本来我们计划元旦去宁波的。但是由于执念太深，所以我们在元旦\n前一周周末巴拉巴拉去了宁波，亲爱的驾着她心爱的小car，载着我和她驶向宁波。\n路上会遇到杭州湾跨海大桥，全长大约35公里，北面是嘉兴，南面是慈溪。\n上桥的时候大概是下午4点左右，那天的天气好好，而且桥都刷了五颜六色的漆，非常的好看。隔几公里就会换一个颜色。\n杭州湾在靠近慈溪的地方，有一座海上酒店，叫海天一洲，这个是真正的海景酒店，酒店主体就在海上来着，但是人流量比较少，不知道\n是不是在高速上的原因。\n过了杭州湾跨海大桥之后，再开一个多小时就到了宁波。\n本着来到来了的心态，我俩把能回忆的地方都回忆了一遍。\n首先是去了亲爱的之前住的地方，吃了2碗烤鸭面。这个吃的是当晚最佳，价格便宜，味道鲜美量足。我俩瞬间找回了之前在宁波的感觉。\n吃完饭后散步消消食，去了三江超市买了点东西，买了一盒奉化草莓，准备晚上在酒店吃，然后买了一箱小饼干。\n买完之后时候还早，才8点钟，我俩又去了浙大软件学院门口的一家店，回顾了一下，这次回顾没有找到之前的味道，pass了，打包了点\n菜回去上班时候吃，阿门。\n然后我俩就找地方充电去了，宁波整体还是人口偏少，大晚上的都没啥人。我们在李惠丽附近充的。\n充电的时候逛了逛附近，大晚上的贼冷，也没啥人，唯独有一家碳火羊肉人比较多，门口摆了一排碳锅，我俩在那边蹭了会火，烤了手。\n充完电之后再次向下一个目的地出发，去前司参观了一下，成功的摸到了前司的门口，打卡留念了一下。\n这会才9点多，于是亲爱的提议我们去宁波大学夜市逛一圈。\n然后就去了，在宁波大学附近的冷风中吹成了2个冰棍。\n下车之后找了一圈没有找到所谓的夜市，然后亲爱的问了2个人，最终我们走了10分钟左右，走到了云创基地，由于城管取缔了摆摊的，\n所以路上没有了摆摊的，少了点热闹的氛围，不过店铺都还是开的，买了2杯蜜雪冰城，逛了逛服装店。\n在一家店铺买了条围巾120，在我们要走的时候，亲爱的又进了一家店，结果花了39买了一条围巾，真的离谱。\n又搭着买了其他的几件衣服鞋子，果然没有最低，只有更低。\n那么逛完夜市呢我们就结束了周六的所有外出活动，开始回酒店了，不得不说，石浦做的比我住过的大部分酒店服务都要到位，关键价格\n还便宜，真的是太赞了。下次去的话还住。\n晚上入住的时候，前台那还有很多的茶水饮料，还有粥，甚至还有茶叶蛋，是不是怕饿着晚到的客人。\n第二天一觉睡到了10点，之前约的人因为身体原因取消了会晤，所以我俩决定就在石浦吃了。\n在石浦吃了258的套餐，2个人根本就吃不完，味道还是那个味道，贼好吃。然后我俩吃到最后，打包了几个菜，打包盒还是免费的。。。。\n最关键的是，一楼的公共卫生间，都铺了垫子，真的离谱，我都怀疑这样不会亏本的吗\n最终在前台接了杯开水，离开了酒店。虽然用词可能不太好，但真的是吃干抹净离开了，再会石浦。\n离开酒店之后，在甬江逛了一会。\n甬江也包含了亲爱的浓厚的回忆，之前在这里上班的时候，下班之后会来甬江走一走，吹吹风。\n甬江附近的环境打理的是真的好，干净整洁，环境优雅，对面就是宁波大学，学术人文气息拉满，看着就特别适合遛狗。\n沿着甬江走了一个多小时，深刻回忆了甬江。最后在一个咖啡店买了2杯咖啡和小甜品，生意是真好，能挣好多钱。\n相比苏州园区来说，宁波高新区在观感上我觉得更好，基本上没什么人，整体都很干净整洁，而且车会让人。主要是宁波离家太远了。\n再会宁波，后续在来宁波逛逛。\n跨年 今年跨年没有安排跑特别远，就安排了海天一洲一晚，在海上跨年，31号磨蹭到了5点才出发，吭哧吭哧的6点半才到酒店，到的时候天\n都黑了，索性景色明天再看吧。\n然后吃了非常普通的晚饭，汤么不鲜，略冷，锅包肉也不好吃，唯一可取的就是一个面酱黄瓜了，讲究一个我上我也行。\n吃完之后我们在酒店逛了一下，四层有一些娱乐设施，在前台兑了几个币，就去玩了一会，投了2把篮。\n然后打了一会乒乓球，那个球还不行，不过总归是2个菜鸡互啄，啄的啄有成效。\n最后打了一局桌球收尾，依旧是2个菜鸡，最后几个球迟迟进不了洞，最后不知道谁手误打进了黑球，结束了菜鸡局。\n之后就在酒店吃着从老姐妹那买来的草莓，喝着rio, 静静等着倒计时。\n时间来到了2024年，2024年我们继续一起探索，一起互帮互助互爱互吵哦，爱你！！！亲爱的。\n第2天我俩就在观景塔上逛了一下，从酒店过去要过一个玻璃栈道，这不欺负恐高人么。\n由于海水质量不好，所以整体的景色也一般，体验一下就好了。\n11点左右就收拾收拾回家了，回家继续遛狗。\n展望 2023年全年还是做了不少事情的，除了没解决异地，没解决房子问题，其他的都有所突破，还得是亲爱的想法多，很努力。我就差了一点，做好了follower的角色。\n2024年以行稳致远为主题，继续努力。我继续加油，亲爱的继续探索吧。\n最后附上AI全家福\n","permalink":"https://blog.thend03.com/posts/second-half-of-2023/","summary":"\u003cp\u003e时间不知不觉来到了2024年，是时候写2023年的下半年总结了。\u003c/p\u003e\n\u003cp\u003e相比上半年，下半年总体平淡一点，确实也做了不少的事。\u003c/p\u003e\n\u003cp\u003e回顾完下半年，再结合去年年初制定的2023年度计划，以及上半年总结，回忆2023年全年的得与失。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://blog.thend03.com/post/2023%E5%B9%B4%E5%BA%A6%E8%A7%84%E5%88%92/\"\u003e2023年度规划-2023-01-05\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://blog.thend03.com/post/half-of-2023/\"\u003e2023年上半年总结\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"july\"\u003eJuly\u003c/h2\u003e\n\u003ch3 id=\"看车\"\u003e看车\u003c/h3\u003e\n\u003cp\u003e7月由于亲爱的刚从新疆回来，以及入职新公司，所以7月总体周末没有跑太远\u003c/p\u003e","title":"2023年下半年总结"},{"content":"前言 最近在研究建站的事情，wordpress不论从保有量还是生态丰富的层面，并且作为一个老牌的开源系统，解决方案非常丰富，所以我打\n算使用wordpress作为建站工具，研究下如何使用wordpress建站。\n研究过程中踩了不少的坑，记录下，提供下简洁明了可用的安装过程。\n遇到的坑 php版本过高的问题 本来买的1c1g的小水管机器，为了节约机器，打算使用免费的数据库云服务。\n找到了2个产品，分别的plantscale和supabase，第一个是mysql的云服务，但是要绑信用卡，就放弃了。第二个是postgressql,免费的服务，不需要绑定信用卡，所以就注册了一个pg库。\n我在冲浪的时候看到别人也推荐pg，占用资源少，性能更好，所以我也倾向于使用\n然后磨人的就来了，由于wordpress原生只支持MySQL，想使用pg就得找个插件，这一步就掉坑里了，我冲浪的时候发现pg4wp这个插\n件最新版需要php8.1以上，然后安装这个插件之后各种连接超时，权限问题，我是真的被折磨的有点惨。\n通过Nginx访问wp-admin/install.php，报错connection timeout，各种搜索解决不了。后来灵机一动，把pg4wp插件挪走，php版本从\n8.2降到7.4就好了。。。。\n嘿，果然安装还是按照文档来，切忌一上来就想法比较多，使用其他最新的组件，比如pg。\n各种403，404，502，504，搜遍英文网站找不到结果，试了又试，错误依旧，绝望，我都有点怀疑自己了。\nwordpress6.4.2要求php7.4+，但是pg4wp要求php8.1+，虽然一般会版本向下兼容，但是不兼容的事还是被我遇到了,看pg4wp的\nreadme，在6.4.1上通过了兼容性测试，6.4.2就多了一个小版本，真的是。\n安装文档缺失关键步骤 wordpress有一个经典的五步安装法，但是缺少了一些关键的描述，比如如何访问install.php，文档介绍是使用web服务器，但具体怎么\n做没有详细介绍，导致我进去就掉坑里了。还有一些其他的细节没有补充。\n而且基本是英文文档，看下来略微有点吃力。\n这是wordpress开发者网站的安装步骤，我最需要的一步，如何在浏览器里访问install.php没写，让你用web浏览器去访问，用apache还\n是用nginx还是别的，一点都没写。\n英文文档看下来还是要点时间的。\n文件权限问题 由于是使用root用户登录的，所以我第一次安装目录是/root/wordpress，nginx访问报文件权限问题，挪到非root目录nginx访问就正常了。\n所以省事起见，wordpress不要放在root。\n另外wordpress目录的用户组和目录权限需要为www-data:www-data和755。其中www-data是php7.4-fpm进程的用户组。\n本篇文章力求把一些配置，关键步骤解释清楚，不踩无谓的坑。\n前置依赖 Wordpress是一个服务，需要我们部署服务之后去访问wordpress的页面，最少需要一台机器部署wordpress整套服务.\n如果需要使用域名访问的话，还需要买一个域名，解析到我们机器的ip上才行。\nwordpress自身需要如下的组件\n一台linux机器，我这次安装的机器版本是ubuntu222.04 wordpress安装包，在wordpress.org下载最新的安装包，最新版本是6.4.2 机器上安装了php，版本最好是7.4 一个可用的mysql服务，版本需要5.7或者8.0+或者对应版本的mariadb(和mysql同一个作者) 机器上安装Nginx，nginx版本为1.18.0+ 如果需要域名访问，则需要购买一个域名，购买域名之后解析到自己的linux机器上\n购买一个域名 将域名解析到linux机器所在ip 以下将基于如上的依赖条件，逐步进行安装\n手动安装 安装的机器系统是ubuntu22.04，1c1g的配置，在racknerd上购买的一个低配机器\nubuntu的包管理工具为apt，可以使用apt执行安装、更新、卸载应用等功能\n更新系统 登录机器之后，终端执行如下命令，查看系统版本\nlsb_release -a 可以看到如下输出，系统版本为ubuntu22.04 LTS(长期支持版本)\nNo LSB modules are available. Distributor ID:\tUbuntu Description:\tUbuntu 22.04.3 LTS Release:\t22.04 Codename:\tjammy 然后执行如下命令，先将系统的应用更新到最新版本,如果缺失其他的包，使用apt install进行安装即可\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade 安装nginx 我们需要通过nginx访问wordpress页面，所以我们需要先安装一个nginx\n刚安装的系统没有自带nginx，系统提示我们可以自行安装\nroot@racknerd-7c9c56:~# nginx -v Command \u0026#39;nginx\u0026#39; not found, but can be installed with: apt install nginx-core # version 1.18.0-6ubuntu14.4, or apt install nginx-extras # version 1.18.0-6ubuntu14.4 apt install nginx-light # version 1.18.0-6ubuntu14.4 执行如下命令安装nginx\nsudo apt install nginx 安装完之后查看nginx版本,可以看到不指定版本，默认是安装了1.18.0\nroot@racknerd-7c9c56:~# nginx -v nginx version: nginx/1.18.0 (Ubuntu) 查看nginx服务状态，当前服务状态正常\nroot@racknerd-7c9c56:~# sudo systemctl status nginx ● nginx.service - A high performance web server and a reverse proxy server Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled) Active: active (running) since Tue 2023-12-12 13:20:47 UTC; 3min 15s ago Docs: man:nginx(8) Process: 1415 ExecStartPre=/usr/sbin/nginx -t -q -g daemon on; master_process on; (code=exited, status=0/SUCCESS) Process: 1416 ExecStart=/usr/sbin/nginx -g daemon on; master_process on; (code=exited, status=0/SUCCESS) Main PID: 1511 (nginx) Tasks: 2 (limit: 1013) Memory: 6.3M CPU: 50ms CGroup: /system.slice/nginx.service ├─1511 \u0026#34;nginx: master process /usr/sbin/nginx -g daemon on; master_process on;\u0026#34; └─1513 \u0026#34;nginx: worker process\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; Dec 12 13:20:47 racknerd-7c9c56 systemd[1]: Starting A high performance web server and a reverse proxy server... Dec 12 13:20:47 racknerd-7c9c56 systemd[1]: Started A high performance web server and a reverse proxy server. 安装MySQL nginx安装好之后,我们需要安装mysql。 mysql是wordpress默认的数据库，如果想少折腾，安装mysql是最稳妥的方式。\n安装步骤 执行如下命令安装mysql\nsudo apt install mysql-server 安装好之后启动mysql服务\nsudo systemctl start mysql 启动之后查看mysql服务状态\nroot@racknerd-7c9c56:~# sudo systemctl status mysql ● mysql.service - MySQL Community Server Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled) Active: active (running) since Tue 2023-12-12 13:28:53 UTC; 1min 57s ago Process: 2326 ExecStartPre=/usr/share/mysql/mysql-systemd-start pre (code=exited, status=0/SUCCESS) Main PID: 2334 (mysqld) Status: \u0026#34;Server is operational\u0026#34; Tasks: 37 (limit: 1013) Memory: 357.3M CPU: 3.053s CGroup: /system.slice/mysql.service └─2334 /usr/sbin/mysqld Dec 12 13:28:52 racknerd-7c9c56 systemd[1]: Starting MySQL Community Server... Dec 12 13:28:53 racknerd-7c9c56 systemd[1]: Started MySQL Community Server. 查看mysql版本，可以发现是8.0\nroot@racknerd-7c9c56:~# mysql -v Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 8 Server version: 8.0.35-0ubuntu0.22.04.1 (Ubuntu) Copyright (c) 2000, 2023, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Reading history-file /root/.mysql_history Type \u0026#39;help;\u0026#39; or \u0026#39;\\h\u0026#39; for help. Type \u0026#39;\\c\u0026#39; to clear the current input statement. 安装以及启动之后我们需要为root用户设置密码，执行以下命令，会进行mysql终端\nsudo mysql 进入终端之后我们需要在终端为root用户创建密码,最后一\nroot@racknerd-7c9c56:~# sudo mysql Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 9 Server version: 8.0.35-0ubuntu0.22.04.1 (Ubuntu) Copyright (c) 2000, 2023, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type \u0026#39;help;\u0026#39; or \u0026#39;\\h\u0026#39; for help. Type \u0026#39;\\c\u0026#39; to clear the current input statement. mysql\u0026gt; ALTER USER \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED WITH mysql_native_password BY \u0026#39;password123\u0026#39;; 如下命令会修改root用户的密码为password123\nmysql\u0026gt; ALTER USER \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED WITH mysql_native_password BY \u0026#39;password123\u0026#39;; 修改好root密码之后退出\nmysql\u0026gt; exit 然后使用账号密码重新登录，输入root密码会再次进入mysql终端\nmysql -u root -p 创建wordpress数据库 为wordpress创建一个数据库，用于存放wordpress数据\nmysql\u0026gt; create database wordpress; Query OK, 1 row affected (0.01 sec) 安全配置(可选) 虽然是自用的机器和服务，不过安全服务还是要考虑一下，万一以后做大做强了呢\n命令行执行如下命令,会有一些交互\n需要不需要校验密码，需要的话下一步 密码强度级别选择，Low的话相当于弱密码，比较危险，级别越高，密码复杂度要求越高 是否更新root密码，更新之后会根据之前选择的密码校验级别，要求你输入新的root密码 是否需要移除匿名用户，移除之后登录mysql必须要使用密码了 是否需要禁用root远程登录，禁用之后只能在本机登录mysql 是否需要移除test库和其访问权限，移除之后就无法访问test库了 刷新权限之后以上修改则生效 root@racknerd-7c9c56:~# sudo mysql_secure_installation Securing the MySQL server deployment. Enter password for user root: VALIDATE PASSWORD COMPONENT can be used to test passwords and improve security. It checks the strength of password and allows the users to set only those passwords which are secure enough. Would you like to setup VALIDATE PASSWORD component? Press y|Y for Yes, any other key for No: y There are three levels of password validation policy: LOW Length \u0026gt;= 8 MEDIUM Length \u0026gt;= 8, numeric, mixed case, and special characters STRONG Length \u0026gt;= 8, numeric, mixed case, special characters and dictionary file Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 2 Using existing password for root. Estimated strength of the password: 50 Change the password for root ? ((Press y|Y for Yes, any other key for No) : y New password: Re-enter new password: Estimated strength of the password: 100 Do you wish to continue with the password provided?(Press y|Y for Yes, any other key for No) : y By default, a MySQL installation has an anonymous user, allowing anyone to log into MySQL without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users? (Press y|Y for Yes, any other key for No) : y Success. Normally, root should only be allowed to connect from \u0026#39;localhost\u0026#39;. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely? (Press y|Y for Yes, any other key for No) : y Success. By default, MySQL comes with a database named \u0026#39;test\u0026#39; that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y - Dropping test database... Success. - Removing privileges on test database... Success. Reloading the privilege tables will ensure that all changes made so far will take effect immediately. Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y Success. All done! root@racknerd-7c9c56:~# sudo mysql ERROR 1045 (28000): Access denied for user \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; (using password: NO) root@racknerd-7c9c56:~# 以上mysql就安装好了，也为wordpress创建了一个库\n安装php 由于wordpress是php写的，所以需要在机器上安装php，目前最新的wordpress版本是6.4,安装php7.4就好了，不要安装8.0+的版本，\n感觉兼容有问题，折磨了我好久。\n先添加php仓库\nsudo add-apt-repository ppa:ondrej/php 执行到下面最后一行提示的时候按enter继续安装\nCAVEATS: 1. If you are using php-gearman, you need to add ppa:ondrej/pkg-gearman 2. If you are using apache2, you are advised to add ppa:ondrej/apache2 3. If you are using nginx, you are advised to add ppa:ondrej/nginx-mainline or ppa:ondrej/nginx PLEASE READ: If you like my work and want to give me a little motivation, please consider donating regularly: https://donate.sury.org/ WARNING: add-apt-repository is broken with non-UTF-8 locales, see https://github.com/oerdnj/deb.sury.org/issues/56 for workaround: # LC_ALL=C.UTF-8 add-apt-repository ppa:ondrej/php More info: https://launchpad.net/~ondrej/+archive/ubuntu/php Adding repository. Press [ENTER] to continue or Ctrl-c to cancel. 上面执行完后，再执行以下命令安装php7.4以及相关插件和服务\nsudo apt install php7.4 php7.4-fpm php7.4-mysql php7.4-curl php7.4-xml 然后使用ps命令查看fpm服务是否启动,可以看到如下fpm服务以及在运行了\nroot@racknerd-7c9c56:~# ps -ef|grep fpm root 18996 1 0 14:04 ? 00:00:00 php-fpm: master process (/etc/php/7.4/fpm/php-fpm.conf) www-data 18997 18996 0 14:04 ? 00:00:00 php-fpm: pool www www-data 18998 18996 0 14:04 ? 00:00:00 php-fpm: pool www root 19118 2708 0 14:05 pts/0 00:00:00 grep --color=auto fpm 后面nginx需要通过unix socket访问，socket地址具体在/etc/php/7.4/fpm/pool.d/www.conf文件里，这个配置文件有如下几个配置项值得关注一下\nlisten = /run/php/php7.4-fpm.sock listen.owner = www-data listen.group = www-data ;listen.mode = 0660 listen = /run/php/php7.4-fpm.sock这个是后续要配置到nginx配置文件中的地址，nginx通过这个地址访问php-fpm服务，然后访问我们的wordpress文件。\nlisten支持unix和port 2种配置方式，二选一\nlisten = /run/php/php7.4-fpm.sock 或者\nlisten = 127.0.0.1:9000 这里配置成哪种格式后面Nginx就配哪种地址，我们这里就采用默认的unix socket的模式就行\nlister.owner和list.group以及list.mode这3个配置项涉及fpm进程的权限和用户组问题，nginx需要和这里保持一致，不然可能会报\n奇怪的文件权限问题。\n如上这几个配置项我们保持默认即可，不要去动。\n下载wordpress 其他的依赖组件都处理好之后，我们下载wordpress安装包，wordpress安装包可以去wordpress.org下载\n点击get wordpress，跳转到wordpress下载页\n下载页左边是wordpress的安装包下载地址，当前最新的版本是6.4.2，官方推荐使用php7.4+，mysql5.7+或者mariadb10.4+， mysql\n和mariadb算是同一个作者出品的，2者是兼容的，可以算同一种类型的数据库。\n下载页右边是主机厂商提供的付费解决方案，wordpress已经帮你搭好了，需要按需付费购买。我为了省钱以及可控，就选择了自己搭。\n安装包下载方式 那么wordpress安装包有2种下载方式\n第一种是浏览器页面点击下载，下载到本地之后，通过scp、ftp等方式上传到linux上 另一种是到机器上使用wget下载安装包 我这里使用第二种，右键复制链接地址，安装包下载地址为https://wordpress.org/latest.zip\n到机器上执行wget https://wordpress.org/latest.zip将安装包下载到linux机器上，这样下载会方便一点\nroot@racknerd-7c9c56:/opt# wget https://wordpress.org/latest.zip --2023-12-12 14:24:43-- https://wordpress.org/latest.zip Resolving wordpress.org (wordpress.org)... 198.143.164.252 Connecting to wordpress.org (wordpress.org)|198.143.164.252|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 25954973 (25M) [application/zip] Saving to: ‘latest.zip’ latest.zip 100%[==================================================================================\u0026gt;] 24.75M 30.0MB/s in 0.8s 2023-12-12 14:24:44 (30.0 MB/s) - ‘latest.zip’ saved [25954973/25954973] root@racknerd-7c9c56:/opt# ll total 25356 drwxr-xr-x 2 root root 4096 Dec 12 14:24 ./ drwxr-xr-x 19 root root 4096 Aug 10 2022 ../ -rw-r--r-- 1 root root 25954973 Dec 6 16:26 latest.zip 我将wordpress放在了opt目录，切忌wordpress不要放在/root目录，不然nginx会有奇怪的文件权限问题，解决不了的那种\n解压安装包 解压wordpress安装包，wordpress文件都在/opt/wordpess目录下\nsudo apt install unzip wordpress文件结构如下所示\n修改wordpress用户组和权限 这一步的权限比较重要，不然会有奇怪的权限问题，到opt目录下执行如下授权命令，解压之后wordpress目录的用户组都是root，需要\n修改为www-data:www-data，目录权限修改为755，需要用到chown和chmod命令， -R为递归执行所有的子目录和文件\n为何用户组要修改为www-data:www-data，因为php7.4-fpm的pool的用户组就是www-data:www-data\nroot@racknerd-7c9c56:/opt# pwd /opt root@racknerd-7c9c56:/opt# ll total 25360 drwxr-xr-x 3 root root 4096 Dec 12 14:27 ./ drwxr-xr-x 19 root root 4096 Aug 10 2022 ../ -rw-r--r-- 1 root root 25954973 Dec 6 16:26 latest.zip drwxr-xr-x 5 root root 4096 Dec 6 16:25 wordpress/ root@racknerd-7c9c56:/opt# sudo chown -R www-data:www-data wordpress/ root@racknerd-7c9c56:/opt# sudo chmod -R 755 wordpress/ root@racknerd-7c9c56:/opt# ll total 25360 drwxr-xr-x 3 root root 4096 Dec 12 14:27 ./ drwxr-xr-x 19 root root 4096 Aug 10 2022 ../ -rw-r--r-- 1 root root 25954973 Dec 6 16:26 latest.zip drwxr-xr-x 5 www-data www-data 4096 Dec 6 16:25 wordpress/ 生成wp-config.php 从wp-config-sample.php复制一份wp-config.php出来，修改里面的db配置，改为之前本地安装的Mysql的账号密码数据库。\n这一步如果不做的话，在安装页面会引导你填写配置生成一个wp-config.php文件。\nroot@racknerd-7c9c56:/opt/wordpress# cp wp-config-sample.php wp-config.php root@racknerd-7c9c56:/opt/wordpress# vi wp-config.php 配置nginx 下载好wordpress安装包之后，下面就是配置nginx访问wordpress了，这样就可以在浏览器页面访问wordpress安装页面\nnginx配置文件在/etc/nginx/nginx.conf，/etc/nginx/conf.d/用于放自定义配置文件，nginx版本为1.18.0\n自定义wordpress配置文件 不修改默认的配置文件，我们在/etc/nginx/conf.d目录下新建wordpress自己的配置文件\nroot@racknerd-7c9c56:/etc/nginx/conf.d# touch wp.conf root@racknerd-7c9c56:/etc/nginx/conf.d# vi wp.conf 将以下配置更新到wp.conf里,有几个比较重要的配置解释一下\nroot，这个地方配置的你的wordpress安装包的路径，配置错误会发生404等错误 server_name，这个如果没域名的话就配置localhost fastcgi_pass， 这个地方要配置fpm的服务地址，注意fpm的版本，由于安装的是7.4，所以fastcpgi配置的如下unix地址 修改好自己机器的实际配置，粘贴到wp.conf，执行:wp 保存配置\nserver { listen 80; root /opt/wordpress; index index.php index.html; server_name localhost; location / { try_files $uri $uri/ /index.php?$args; } location ~ \\.php$ { include snippets/fastcgi-php.conf; fastcgi_pass unix:/run/php/php7.4-fpm.sock; } location ~ /\\.ht { deny all; } location = /favicon.ico { log_not_found off; access_log off; } location = /robots.txt { allow all; log_not_found off; access_log off; } location ~* \\.(js|css|png|jpg|jpeg|gif|ico)$ { expires max; log_not_found off; } } 删除default配置 nginx安装好会有一个default配置，这个配置会影响我们自定义的配置，需要删掉或者重命名这个文件，文件路径为/etc/nginx/sites-available/default，执行以下步骤去掉default\n#在sites-enable目录备份default文件 root@racknerd-7c9c56:/etc/nginx/sites-available# mv default default.bak root@racknerd-7c9c56:/etc/nginx/sites-available# cd ../sites-enabled/ root@racknerd-7c9c56:/etc/nginx/sites-enabled# ll total 8 drwxr-xr-x 2 root root 4096 Dec 12 13:20 ./ drwxr-xr-x 8 root root 4096 Dec 12 14:31 ../ lrwxrwxrwx 1 root root 34 Dec 12 13:20 default -\u0026gt; /etc/nginx/sites-available/default #在sites-enabled目录删掉软链接 root@racknerd-7c9c56:/etc/nginx/sites-enabled# rm -f default 确认nginx worker的用户 /etc/nginx/nginx.conf的第一行有关于Nginx user的设置，这个需要设置为www-data，和php7.4-fpm保持一致，nginx默认用户就是www-data，检查下即可\n验证配置 执行如下命令验证nginx配置文件是否正确\nroot@racknerd-7c9c56:/etc/nginx# nginx -t nginx: the configuration file /etc/nginx/nginx.conf syntax is ok nginx: configuration file /etc/nginx/nginx.conf test is successful 重启Nginx 配置文件验证没问题之后，重启Nginx\nsudo systemctl restart nginx 如果启动失败，执行以下2个命令排查错误原因\nsudo systemctl status nginx.service journalctl -xe nginx默认日志路径为/var/log/nginx/access.log和/var/log/nginx/error.log,也可以通过nginx日志排查问题\n安装wordpress 上面步骤一切顺利的话，接下来就到了安装wordpress的环节了，打开浏览器，输入以下地址，其中107.173.87.238是我机器的ip，80是nginx http的端口,替换为自己的ip即可\nhttp://107.173.87.238/wp-admin/install.php 进入安装页面，语言选择简体中文\n输入必要信息之后进行安装，密码可以自定义，也可以用wp生成的强密码\n之后进行登录，就会进入wordpress管理后台，装修自己的网站了\n配置ssl 上述步骤使用nginx+wordprss+mysql安装好了wordpress，已经可以访问了。\n为了网站安全性以及隐藏服务器ip，下面为我们的网站配置ssl以及域名解析。\n配置ss之后，所有的请求都会走https，安全会会得到很大的提高，通过域名访问，也会显得更加的专业，以及保护我们的服务器的ip，减\n少被黑的风险。配域名相比ip也比ip更容易记一点。\n前置依赖 一个属于你的域名，域名需要购买，便宜的比如godaddy上10块，20块左右就能买到一个域名了。其他的google,namecheap之类的也能买到。 一个dns解析器，将域名解析到服务器ip。一般域名厂商都有这个功能。 我个人比较喜欢cloudflare，功能强大，国际知名大厂，个人免费，还好使，支持中文，还能生成免费的ssl证书。\n接下来以cloudflare为例，介绍如何配置域名解析，生成ssl证书，以及Nginx如何配置ssl。\n生成ssl证书 没账号的可以先注册一个cloudflare账号，用邮箱注册。\n打开cloudflare控制台，需要先将域名托管到cloudflare，才能配置域名解析。其他厂商自行搜索解决。\n选中要配置解析的域名，打开左侧的SSL/TLS，选中源服务器，右侧点击创建证书。这个证书是用来安装到服务器上的。\n进入创建页面，会有一些选项，默认即可。主机名对应nginx server{}块里的server_name，可以自定义，创建证书的时候和服务器上配\n置的server_name保持一致即可。支持通配符。证书有效期最长是15年，够用了。\n点击创建之后，会生成一个key和pem文件。key和pem都是要保存下来放到服务器上的。\n私钥只有这一次机会可以复制，关闭这个页面之后就找不到了，所以私钥需要妥善保管，丢失或者遗忘只能重新创建证书了。\n和私钥不同，pem文件之后还可以下载。\n将源证书内容复制，粘贴到xxx.pem文件里。\n将私钥复制，粘贴到xxx.key里。\n点击确定之后，会回到证书页面，可以看到，只能下载pem文件，key文件被隐藏，无法下载与访问了\nnginx配置强制跳转https 前面几步，我们监听了80端口，这是Nginx的http接口，现在我们要监听443端口(https)，将80端口的请求强制跳转到443端口。\n首先进入/etc/nginx/config.d/目录，将wp.conf重命名为wp.conf.bak，这样原先的文件就不生效了。\n然后执行touch wp.conf，重新生成空白的wp.conf文件\ncd /etc/nginx/config.d mv wp.conf wp.conf.bak touch wp.conf 然后将下方的配置文件修改后粘贴到wp.conf里\n有如下几次地方需要改成你自己的配置\n2个server块里的server_name，这个地方要配置为上一步创建证书时选择的主机名，我这里要保护的是三级域名，符合通配条件 记得将ssl_certificate和ssl_certificate_key的位置配置正确 这个域名的日志重新写到新的文件名了，按需放开或者注释掉 其他的配置和之前80的配置一致，没有改动\n# Redirect HTTP -\u0026gt; HTTPS server { listen 80; server_name www.racknerd.thend03.com racknerd.thend03.com; return 301 https://$host$request_uri; } server{ listen 443 ssl http2; server_name www.racknerd.thend03.com racknerd.thend03.com; root /opt/wordpress; index index.php index.html; # SSL parameters ssl_certificate /root/thend03.com.pem; ssl_certificate_key /root/thend03.com.key; # log files access_log /var/log/nginx/resource.thend03.com.access.log; error_log /var/log/nginx/resource.thend03.com.error.log; location = /favicon.ico { log_not_found off; access_log off; } location = /robots.txt { allow all; log_not_found off; access_log off; } location / { try_files $uri $uri/ /index.php?$args; } location ~ \\.php$ { include snippets/fastcgi-php.conf; fastcgi_pass unix:/run/php/php7.4-fpm.sock; } location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ { expires max; log_not_found off; } } 在服务器生成证书 基于上面nginx证书的路径配置，在/root目录生成key和pem证书,并且编辑文件，将在cloudflare页面上生成的key和pem字符串复制到对应的文件里。\nroot@racknerd-7c9c56:/etc/nginx/conf.d# cd /root root@racknerd-7c9c56:~# touch thend03.com.pem root@racknerd-7c9c56:~# touch thend03.com.key root@racknerd-7c9c56:~# vi thend03.com.pem root@racknerd-7c9c56:~# vi thend03.com.key 重启nginx 配置好nginx 443配置文件后，执行命令重启nginx\nroot@racknerd-7c9c56:~# sudo systemctl restart nginx cloudflare配置域名解析 nginx处理好之后，回到cloudflare页面，配置域名到ip的解析，添加一条A记录，就可以在访问域名的时候请求到后端服务器。\n添加好之后，在域名管理那可以看到最新添加的解析记录\n配置ssl/tls客户端策略 打开SSL/TLS概述，设置下客户端策略，这里选择端到端，加密等级比较高，并且我们使用的是自签名的证书\n浏览器访问 解析配置好之后，就是浏览器使用域名访问了。\n访问wp-admin管理后台，这时会跳转到ip，需要我们登录进去之后设置一下\n可以看到域名跳转到了ip\n打开设置，可以看到现在的站点还是ip的方式。需要修改为域名。\n再次登录，地址栏就还是域名，没有变成ip。以后都可以用域名的方式访问了。\n至此，wordpress的手动部署就告一段落了。后续再介绍宝塔面板，docker,docker-compose之类的安装部署。\n以及如何选择模板搭建自己的目标站。\n参考链接 wordpress+postgresql\npg4wp plugin\ndebian安装php8.1\nubuntu安装mysql\ndebian安装mysql\nubuntu18.04安装wordpress\nnginx+wordpress ssl配置\nwordpress经典五步安装法\n","permalink":"https://blog.thend03.com/posts/install-wordpress-on-ubuntu22.04/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e最近在研究建站的事情，wordpress不论从保有量还是生态丰富的层面，并且作为一个老牌的开源系统，解决方案非常丰富，所以我打\u003c/p\u003e\n\u003cp\u003e算使用wordpress作为建站工具，研究下如何使用wordpress建站。\u003c/p\u003e\n\u003cp\u003e研究过程中踩了不少的坑，记录下，提供下简洁明了可用的安装过程。\u003c/p\u003e\n\u003ch2 id=\"遇到的坑\"\u003e遇到的坑\u003c/h2\u003e\n\u003ch3 id=\"php版本过高的问题\"\u003ephp版本过高的问题\u003c/h3\u003e\n\u003cp\u003e本来买的1c1g的小水管机器，为了节约机器，打算使用免费的数据库云服务。\u003c/p\u003e","title":"Ubuntu22.04安装wordpress"},{"content":"工作上公司在主推okr工作法，每年年初会制定年度OKR，每个季度，会制定季度OKR，每个月会有月度目标，每周要写周报，甚至于一些项目，要精确到天进度。\n而我自己，却没有什么长期目标，在我这个年纪，无时无刻不在焦虑，那么悲观者往往正确，乐观者往往成功，基于此，每天无意义的焦虑内耗没什么意义，不如行动起来，制定自己的长期目标和短期目标，先做起来，在行动中追求内心的安宁。\n本篇文章用于设立自己的OKR，并定期复盘，复盘结果，复盘目标，复盘过程，在反思与实践中谋求成长。\n目标围绕3个方面: 健康、亲密关系、事业，这三个方向展开\n","permalink":"https://blog.thend03.com/posts/goal-setting-and-self-reflection/","summary":"\u003cp\u003e工作上公司在主推okr工作法，每年年初会制定年度OKR，每个季度，会制定季度OKR，每个月会有月度目标，每周要写周报，甚至于一些项目，要精确到天进度。\u003c/p\u003e\n\u003cp\u003e而我自己，却没有什么长期目标，在我这个年纪，无时无刻不在焦虑，那么悲观者往往正确，乐观者往往成功，基于此，每天无意义的焦虑内耗没什么意义，不如行动起来，制定自己的长期目标和短期目标，先做起来，在行动中追求内心的安宁。\u003c/p\u003e","title":"goal-setting and reflection"},{"content":"今年的双十一,不知道是不是我打开淘宝、京东、拼多多的次数太频繁了，看着这几家的价格一天一个样，有种说不出的感觉，我总感觉被电商平台玩弄于股掌之中。\n由于亲爱的手机电池不行了，于是打算趁着双十一换个手机，本来打算考虑买下14pro，旧机以旧换新，能优惠点，我依稀记得618的京东自营256G的版本最低是到了7500左右的，想着双十一换个14pro。\n然后魔幻的就来了，前一两周吧，京东自营的14pro 256售价是8699,15pro 256是8999，就这价格，但凡想买pro的，我觉得都会选择15pro了，本来么苹果牙膏这几年就挤得厉害，直接售价上搞人心态是吧。\n:) 14pro的暗紫色是真的好看,15pro的都是些啥配色\n大概1周前吧，京东自营14pro-8699，15pro-8999, 拼多多百亿补贴14pro-8298,15pro8298\n这个价格实在是无法下手14pro，于是就在等等，等等党永远不亏。。。。。。\n时间来到了上周五晚上，眼瞅着旧手机不行了，于是在拼夕夕下单了手机，当时百亿补贴价格是8298，下单了2天之后还没发货。\n然后我又打开京东自营看了一下，京东自营的价格跳到了8399，比百亿补贴贵了100块钱，但是时效快，当天下单，第2天就能到。\n这是第一波价格跳水，京东自营都开始和拼夕夕比价格了，于是取消了拼夕夕的单，下了京东自营的单，果然第2天就到了。\n到货的时候都10月30号了，到货第2天就是10月31号-11月1号大促，也就是昨天晚上，京东晚8点开始搞活动，好家伙，价格又便宜了200块，来到了8199，我早上想保价一下，结果不支持保价，血亏200块。\n可恶的是京东写了7天价保，但是不给我退钱，真的可恶，势必和狗东斗争到底，把差价退回来，不然省个200，这样碎屏保的钱就多出来了，哭泣。\n刚才的时候我打开拼夕夕看了一下，售价又降了，老话怎么说来着，等等党永远不亏，古人诚不欺我\n做个表格，看下机型随着时间推移价格变化\n10月29号之前 10月29号~10月31号 10月31号晚上 11月1号 15pro(256)-京东自营 8999 8399 8199 8399 14pro(256)-京东自营 8699 8699 8699 8699 15pro(256)-拼多多百亿补贴 8298 8298 8098 7998 14pro(256)-拼多多百亿补贴 8298 8298 8098 7998 这是11月1号晚上的拼多多百亿补贴的售价\n这是11号晚上京东自营的售价\n从目前来看，双十一京东从10月23号开始预售，iphone价格实际到29号30号左右才开始降价，拼多多一开始百亿补贴就降了700，如果着急用其实可以先买拼多多的。只能说最终还是拼多多百亿补贴更胜一筹。\n但是，京东自营从23号预售开始，14pro的价格就没动过，真的离谱。\n10月31号晚上京东8点的活动在京东渠道来说，其实是最划算的，第2天，也就是1号，价格就又上去了，回到了8399。\n我们的拼多多百亿补贴仍然发挥稳定，最低都到了7948了。\n再次喊出我们的口号，等等党永远不亏。\n为了保15的销量，14pro的价格还是下不去，只能说略微有点遗憾，看来买苹果最好的时机是在次年的618了，相对低点的价格，买到只落后半代的苹果手机。\n这几天打开这2个平台，价格随时都有可能给你变一下，刷一遍心波动一遍，真的是难顶，以后但凡要买东西，都撑到具体的活动当天再买，这样就能等等享最大的折扣了。\n不急着用可以等大促各个平台的活动日再买，着急用果然拼多多的价格优势无敌。\n至于淘宝，现在打开都打开的少了，毕竟淘宝主营的美妆类我不是目标用户，现在是能用京东自营就自营，毕竟自营的物流是真的快。\n想省钱的话打开拼多多百亿补贴比比价格，拼多多的百亿补贴，价格是真的便宜的多。\n这次双十一大家都放下身价开始搞补贴，让消费者低价买东西了，我只能说补贴这种东西请加大力度，能便宜多少便宜多少，阿门。\n算了，这次双十一就这了，该买的也买了，价格波动随着去吧，等到最后几天的时候再观察下价格，为这次价格比对画上一个句号。\nBy the way，苹果发布了新的MacBook Pro，8+512的配置，卖12999，每加配8G要1500块，硬盘就更离谱了，加512要加1500，死贵死贵的，而且内存和硬盘是板载，后期无法假装，安卓手机现在配置都动辄12+512起了。\n我觉得苹果死不悔改，每一位买mac的人都有责任，营造出的高级感让人趋之若鹜，轻薄、长续航、颜值在线，以及windows用户未体验的macos系统，将用户轻松拿捏。\n但是，还是要说但是，希望其他厂商努力争气一点，不要让苹果把钱都赚了，多努力努力掀厨子的桌子，iphone现在挤牙膏感觉比intel还厉害。\n还有官网美其名曰的为了环保，不赠送充电头，我寻思不造手机不是更环保吗，还有以旧换新，其他的windows/安卓机可以免费帮忙回收，你看看苹果，多么的体贴，还能免费帮忙回收电子垃圾，你就偷着乐吧。\n干死厨子，人人有责\n","permalink":"https://blog.thend03.com/posts/price-go-and-down/","summary":"\u003cp\u003e今年的双十一,不知道是不是我打开淘宝、京东、拼多多的次数太频繁了，看着这几家的价格一天一个样，有种说不出的感觉，我总感觉被电商平台玩弄于股掌之中。\u003c/p\u003e\n\u003cp\u003e由于亲爱的手机电池不行了，于是打算趁着双十一换个手机，本来打算考虑买下14pro，旧机以旧换新，能优惠点，我依稀记得618的京东自营256G的版本最低是到了7500左右的，想着双十一换个14pro。\u003c/p\u003e","title":"变来变去的价格"},{"content":"ssh在了Iinux系统中有着比较重要的位置，想要远程连接服务器进行操作，ssh是不可或缺的步骤。\n我有一台海外的vps，系统是ubuntu，由于使用的机场把22端口封了，导致ssh连接vps非常的不方便，连接一直报如下的错\n ~/ ssh root@107.173.87.238 -p 22 kex_exchange_identification: Connection closed by remote host Connection closed by 107.173.87.238 port 22  ~/ 咨询过机场，机场方出于端口被滥用的目的，将22端口封禁了，这就会导致想使用ssh连接vps，或者使用github ssh，要先关闭代理，关了代理之后其他的网站又无法访问了，非常的麻烦。\n所以本文以此为背景，了解下ssh的配置，达到更换端口，不受限制的目的。\n另外为了使用简便出发，介绍下使用私钥登录，以及将登录配置写进配置文件，以简化连接。\n背景知识 什么是ssh 简单说，SSH是一种网络协议，用于计算机之间的加密登录。使用ssh我们可以从本地机器连接到远程的服务器。\nssh的简单使用 一般我们有2种方式进行ssh连接，一个是使用账号密码，另一个是使用公私钥进行连接\n以账号密码的方式登录,\n ~/ ssh root@107.173.87.238 -p 22 root@107.173.87.238\u0026#39;s password: 解释下如上命令\nssh就是我们本文介绍的工具 root是要登录的目标机器的用户 107.173.87.238是我们要登录的服务端的ip -p是指定使用连接的服务端的端口，默认是22 本次目标就是修改22端口，使用别的端口进行ssh连接\n命令行输入命令回车之后，需要我们输入服务端机器的root账号的密码，输入成功之后，就会登录到107.173.87.238，可以使用root账号在这台机器进行操作了。\n另一种是使用秘钥的方式进行登录，首先是生成公钥和私钥，私钥客户端机器自己留着，公钥上传到服务端机器\n ~/ ssh -i ~/.ssh/racknerd_107.173.87.238 -p 2222 root@107.173.87.238 如果私钥正确，输入如上命令回车即可登录远端机器\n-i是指定私钥文件 ~/.ssh/racknerd_107.173.87.238,是我用工具生成的私钥文件 -p是指定连接的端口，默认是22，这里是我修改过的 root@107.173.87.238是指以root用户登录远端机器 修改ssh连接端口 我们主要是要把默认的22端口改掉，换成其他的没有被禁用的端口，保证挂代理的同时，可以使用ssh访问远端服务器\n基本概念 ssh客户端: 这个是我们要通过某台机器访问目标端的机器，假如我们想在自己的电脑上，使用命令行或者xshell/putty等工具连接服务器，那我们的命令行、xshell、putty等就是ssh客户端\nssh服务端: 我们要连接的目标机器\n机器信息 本次服务端是购买的一台vps，系统是ununtu 22.04 LTS\nroot@racknerd-7c9c56:~# uname -a Linux racknerd-7c9c56 5.15.0-76-generic #83-Ubuntu SMP Thu Jun 15 19:16:32 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux root@racknerd-7c9c56:~# lsb_release -a No LSB modules are available. Distributor ID:\tUbuntu Description:\tUbuntu 22.04.2 LTS Release:\t22.04 Codename:\tjammy 客户端是我自己的电脑，命令行执行ssh命令\n修改ssh连接端口 ubuntu系统的ssh配置在/ect/ssh下\n我们如果想修改服务端端口的话，可以选择直接修改sshd_config的文件。\n这里有一个注意点，我们可以放开22端口的注释，然后在port 22下面新增一个port 2222的配置，这样就可以通过22和2222进行ssh连接，如果2222配置错误，我们还可以留有余地，使用22端口进行连接。\n这里解释下ssh_config和sshd_config的区别，ssh_config是ssh客户端的配置，sshd_config是服务端的配置。\n由于我们这次是修改服务端的配置，所以我们需要修改sshd_config的配置\n如果不想修改现有文件，导致错误的话，其实也可以在sshd_config.d/目录下新增xxx.conf文件，在里面新增配置，在这个目录添加配置文件可以生效是因为sshd_config文件里引入了sshd_config.d/*.conf文件\n我是在目录下新建了一个my_sshd.conf文件\n里面有如下配置项，可以看到配置了2个端口，22和2222，如果sshd_config文件里已经放开了22端口，则可以只添加2222\nPort 22 Port 2222 然后将2222端口加入防火墙以放行端口\n使用iptables则执行如下命令\niptables -A INPUT -p tcp --dport 2222 -j ACCEPT 如果使用firewall-cmd则执行如下命令\nfirewall-cmd --zone=public --add-port=2222/tcp --permanent firewall-cmd --reload 如果是公有云平台，则在对应公有云平台的安全组进行设置\n然后执行如下命令重启sshd，则服务端的配置就重启好了\nsudo service sshd restart 执行命令查看ssh端口是否可以启动\nnetstat -nlp|grep 22 可以看到22和2222端口都以正常启动\n接下来就可以使用ssh命令进行连接了，使用 ssh -p 2222 root@107.173.87.238进行账号密码连接，这样就可以避免22端口被禁导致的连接失败的问题了\n详细步骤 这一步只讲步骤，不讲其他的额外知识\n1.使用ssh -p 22 root@107.173.87.238连接到机器上，我们的任何修改都是要先连接到目标机器上，所以这次我们还是先使用22端口连接上去进行修改\n2.在/etc/ssh/sshd_config.d/目录下新增my_sshd.conf文件, 然后使用vim编辑my_sshd.conf,将新的端口配置写入my_sshd.conf里\n首先执行cd /etc/ssh/sshd_config.d/，进入要修改的目录 然后执行touch my_sshd.conf，新增配置文件 执行vim my_sshd.conf ，编辑文件，添加Port 22和Port 22222个端口配置(分2行，详情见上方)，修改完之前:wq保存 最后检查/etc/ssh/sshd_config，看文件里的PermitRootLogin yes配置项是否打开，如果被注释掉，需要去掉#，值为no的话需要修改为yes，这样可以支持使用root用户登录 3.将2222端口添加到防火墙\n如果使用iptables则执行如下命令iptables -A INPUT -p tcp --dport 2222 -j ACCEPT 如果是firewall-cmd则执行如下命令firewall-cmd --zone=public --add-port=2222/tcp --permanent 然后执行reload加载firewall-cmd --reload 如果是公有云则去对应厂商的网络安全策略那里修改 4.重启sshd服务,使用如下命令sudo service sshd restart\n5.重启之后验证端口是否正常启动，使用netstat -nlp|grep 22查看端口占用，如果22和2222都已经启动，则sshd服务正常，否则需要检查原因\n6.客户端重新连接，验证22和2222端口功能是否正常，分别使用ssh -p 22 root@107.173.87.238和ssh -p 2222 root@107.173.87.238，如果2个都能正常连接，则修改成功\n使用公钥和私钥进行连接 在上一步中我们修改了ssh连接的端口，可以使用2222端口进行ssh连接，免去了代理封禁了22端口的困扰。但是每次进行连接的时候总要输一大串的连接命令，还要输入繁杂的密码，相信机器的密码都不会太简单，每次复制粘贴密码比较繁琐。\n那么ssh除了账号密码的方式，还支持公私钥的方式，客户端拿着私钥去连接服务端，我们这一小节就介绍ssh使用秘钥进行连接的方式\n生成公钥和私钥 我们可以使用ssh-keygen命令生成秘钥\n ~/ ssh-keygen -t rsa -f ~/.ssh/test -b 4096 Generating public/private rsa key pair. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in test Your public key has been saved in test.pub The key fingerprint is: SHA256:yL155XDEOzFmSlHcOvUVTyOrduhjWtfakA9gJhVWBUg since@fengchuangdeMacBook-Pro.local The key\u0026#39;s randomart image is: +---[RSA 4096]----+ | oE+=o+o| | .+o =.+| | ..B+ .o| | . o ..==+ .| | o S.oB=o | | o*=o.o | | o .=.= . | | .+ o * | | . . o | +----[SHA256]-----+ 解释下这个命令，这个命令是用来生成ssh密钥对的\n-t用于指定使用的加密算法，支持如下几种加密算法: dsa 、 ecdsa 、 ecdsa-sk 、 ed25519 、 ed25519-sk 、 rsa -b是bits，用来指定生成的密钥对的密钥位数，上述命令是生成4096位密钥文件 -f用于指定生成的秘钥文件名称和存储路径，不止定-f的话会默认生成~/.ssh/id_rsa和~/.ssh/id_rsa.pub -C用于添加评论，本次命令没有使用这个参数 使用上述命令就生成了一个可用的ssh秘钥对，其中~/.ssh/test文件是私钥，ssh客户端连接服务端的时候拿私钥进行连接，~/.ssh/test.pub是公钥文件，需要上传到服务端，客户端连接请求过来的时候，服务端拿着公钥判断权限用的，关于服务端公钥配置，待会再详细介绍。\n服务端设置公钥 上一步生成公钥和私钥之后，私钥客户端留着自己连接的时候用，公钥需要上传到要连接的服务端，建立ssh连接的时候，服务端使用公钥进行鉴权，这一小节介绍服务端如何设置公钥文件\n以下操作会指明各个文件和步骤是服务端操作还是客户端操作，请明确操作环境。\n目前的大前提我们只配置了账号密码登录，配置了22和2222端口用于进行ssh连接。\n首先我们在客户端有~/.ssh/test.pub这个公钥文件，我们需要把公钥信息上传到服务端去，可以看到公钥文件里是一些加密后的字符串，如何把公钥文件上传到服务端，有如下几种方式\n第一种是使用ssh-copy-id\n我们使用ssh-copy-id将test.pub公钥文件，从客户端机器上传到服务端\n ~/.ssh/ ssh-copy-id -i ./test.pub -p 2222 root@107.173.87.238 /usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \u0026#34;./test.pub\u0026#34; /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys root@107.173.87.238\u0026#39;s password: Number of key(s) added: 1 Now try logging into the machine, with: \u0026#34;ssh -p \u0026#39;2222\u0026#39; \u0026#39;root@107.173.87.238\u0026#39;\u0026#34; and check to make sure that only the key(s) you wanted were added. 看上方的命令和执行结果，-i指定要上传的公钥文件，-p指定端口，其中需要我们输入root账号的密码，然后可以看到公钥就被成功安装了。\n然后上服务器检查，可以发现下原来没有.ssh文件夹，也没有/.ssh/authorized_keys文件，ssh-copy-id为我们创建了目录和文件，且把公钥文件写入到authorized_keys文件里了。\n如果没有/root/.ssh文件以及/root/.ssh/authorized_keys文件，需要手动创建目录和文件，再执行上述的ssh-copy-id命令。\n然后在服务端执行以下2个命令,切记要复制这2个命令执行，不要随意修改\nchmod 700 ~/.ssh chmod 600 ~/.ssh/authorized_keys 然后检查~/.ssh/authorized_keys的文件内容是否和test.pub一致，如果一致那就上传公钥成功了\n然后就可以在客户端执行ssh命令进行连接了，尝试一下，可以看到已经可以正常连接了\n ~/.ssh/ ssh -i ~/.ssh/test -p 2222 root@107.173.87.238 root@racknerd-7c9c56:~# 第二种是使用ssh命令执行上传和写入\n第二种我们使用ssh命令，读取test.pub，并执行命令写入服务端的~/.ssh/authorized_keys文件，再执行第2种之前，我们先删掉服务器上的~/.ssh目录，然后再执行命令上传\n详细命令如下,执行之后输入密码，即可将本地的公钥文件写入服务端的~/.ssh/authorized_keys文件里\n ~/.ssh/ ssh -p 2222 root@107.173.87.238 \u0026#39;mkdir -p ~/.ssh \u0026amp;\u0026amp; cat \u0026gt;\u0026gt; ~/.ssh/authorized_keys\u0026#39; \u0026lt; ~/.ssh/test.pub root@107.173.87.238\u0026#39;s password: 这个命令里包含了多个步骤，依次解释下命令含义\nssh -p 2222 root@107.173.87.238这个就是使用ssh连接服务端 mkdir -p /.ssh是在服务端创建/.ssh目录 \u0026lsquo;cat \u0026raquo; .ssh/authorized_keys\u0026rsquo; \u0026lt; /.ssh/id_rsa.pub的作用是，将本地的公钥文件/.ssh/id_rsa.pub，重定向追加到远程文件authorized_keys的末尾，注意\u0026raquo;表示的是追加写入，不会覆盖原文件 然后在服务端执行以下2个命令,切记要复制这2个命令执行，不要随意修改\nchmod 700 ~/.ssh chmod 600 ~/.ssh/authorized_keys 然后就可以在客户端执行ssh命令进行连接了，尝试一下，可以看到已经可以正常连接了\n ~/.ssh/ ssh -i ~/.ssh/test -p 2222 root@107.173.87.238 root@racknerd-7c9c56:~# 第三种是使用scp命令，先将本地的公钥文件上传到服务端，然后在服务端执行cat命令将公钥文件内容写入authorized_keys文件\n第三种就是先将客户端本地的公钥文件上传到服务端，然后使用ssh连接到服务端，执行命令将公钥文件内容写入authorized_keys文件\n照例先删除服务端的~/.ssh文件夹，具体命令如下\n ~/.ssh/ scp -P 2222 ~/.ssh/test.pub root@107.173.87.238:~/ root@107.173.87.238\u0026#39;s password: Permission denied, please try again. root@107.173.87.238\u0026#39;s password: test.pub 解释下具体的含义，这行命令就是使用scp将客户端本地的~/.ssh/test.pub文件上传到服务端的~/目录下，注意P是大写，代表连接使用的端口\n然后ssh连接到服务端，使用如下命令创建~/.ssh目录和~/.ssh/authorized_keys文件\nmkdir ~/.ssh touch ~/.ssh/authorized_keys 然后服务端执行如下命令授权，不要随意修改\nchmod 700 ~/.ssh chmod 600 ~/.ssh/authorized_keys 然后执行cat命令，将已经上传到服务器的test.pub文件的内容写入~/.ssh/authorized_keys\ncat ~/test.pub \u0026gt;\u0026gt; ~/.ssh/authorized_keys 然后就可以在客户端执行ssh命令进行连接了，尝试一下，可以看到已经可以正常连接了\n ~/.ssh/ ssh -i ~/.ssh/test -p 2222 root@107.173.87.238 root@racknerd-7c9c56:~# 接下来有些注意事项，如果使用ssh -i无法连接，需要检查下/etc/ssh/sshd_config这个文件，看看如下几个配置项是否被注释掉\n如果有#就是被注释了，未生效，需要去掉#号放开，放开之后需要执行service sshd restart重启服务端ssh服务\nRSAAuthentication yes PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys 综合看下来，还是使用ssh-copy-id比较简单省事，其他两种为我们展示了具体的为服务端添加公钥的过程\n详细步骤 以ssh-copy-id为例，说明下详细步骤\n1.执行ssh-copy-id命令将客户端公钥文件上传到服务端ssh-copy-id -i ./test.pub -p 2222 root@107.173.87.238\n2.检查服务端是否存在~/.ssh目录，是否存在~/.ssh/authorized_keys文件，如果任一不存在，则执行mkdir ~/.ssh \u0026amp;\u0026amp;touch ~/.ssh/authorized_keys 创建路径和文件之后，重复执行第一步\n3.执行命令为服务端公钥文件授权,需要执行chmod 700 ~/.ssh和chmod 600 ~/.ssh/authorized_keys\n4.检查服务端~/.ssh/authorized_keys文件内容是否和客户端的公钥文件内容一致，一致则说明上传成功\n5.客户端使用ssh -i ~/.ssh/test -p 2222 root@107.173.87.238尝试连接，如果成功则添加秘钥方式修改成功\n6.如果客户端连接失败，检查下/etc/ssh/sshd_config文件的RSAAuthentication，PubkeyAuthentication，AuthorizedKeysFile等key是否放开，如果注释掉需要放开，执行``service sshd restart`重启sshd服务\nssh使用config进行登录 上面2种登录方式，不管是使用使用用户密码，还是使用公私钥，都需要在命令行输入一大串命令，比较繁琐。\n使用命令行进行ssh连接的时候，虽然有历史记录，但仍比较繁琐，需要频繁复制输入密码，有了私钥认证之后好一点，但还是比较繁琐。\n本小节介绍如何使用配置文件的方式，将连接配置写到配置文件里，简化操作，提高使用ssh连接的效率\nssh有个配置文件，路径是~/.ssh/config，可以在这个文件里面配置ssh连接信息，另外一个配置文件地址是/etc/ssh/ssh_config，这个上一小节有介绍\n我本地有如下3个配置，写在了~/.ssh/config文件里\nHost github.com HostName ssh.github.com User git Port 443 Host vps-racknerd-id HostName 107.173.87.238 User root Port 2222 IdentityFile ~/.ssh/test Host vps-racknerd-pwd HostName 107.173.87.238 User root Port 2222 第一个是github的配置，由于22端口被封，每次git push非常的费劲，后面根据搜索，将端口换成了443,问题得以解决\n第二个是vps的配置，使用了私钥文件鉴权的方式\n第三个是vps的配置，使用了用户密码的鉴权方式\n解释下配置项的含义\nHost配置的要连接的主机名，github的Host好像是固定的，github.com， *为默认值，匹配所有的Host的行为，我理解这里的Host可以相当于别名使用了，ssh 匹配Host，然后执行Host的逻辑 HostName，这个是指定ssh连接的目标地址，可以是域名，也可以是ip User是指定ssh连接的用户 Port是指定ssh连接的端口 IdentityFile是指定的ssh连接的私钥文件地址 我本地连接vps,现在可以使用vps-racknerd-id和vps-racknerd-id进行连接了\n使用vps-racknerd-pwd，还是使用用户密码的方式登录，仍需输入用户对应的密码，优点是少输很多东西\n /etc/ssh/ ssh vps-racknerd-pwd root@107.173.87.238\u0026#39;s password: root@racknerd-7c9c56:~# 使用vps-racknerd-id，使用私钥方式登录，不用输入密码，即可直接连接，只需执行一步就可连接\n ~/.ssh/ ssh vps-racknerd-id root@racknerd-7c9c56:~# 总结 本文介绍了3个功能: 修改ssh默认端口，使用私钥登录，使用配置进行登录\n第一个功能实现了修改端口，可以避免代理禁用22端口导致的连接问题\n第二个功能实现了使用私钥文件登录，不用再每次输入密码\n第三个功能实现了将配置信息写到config文件里，简化了连接的命令\n上面介绍的是命令行使用ssh连接的方式，如果有条件的话，可以使用其他的ssh客户端，比如xshell、putty、secureCRT、mobaXterm等工具，这些工具带了界面，可以在界面上进行操作，并且有秘钥文件管理和存储密码的功能\n参考链接 openssh config file examples for linux/unix\nSSH原理与运用-阮一峰\n设置SSH通过秘钥登录\nSSH教程\n","permalink":"https://blog.thend03.com/posts/ssh-config/","summary":"\u003cp\u003essh在了Iinux系统中有着比较重要的位置，想要远程连接服务器进行操作，ssh是不可或缺的步骤。\u003c/p\u003e\n\u003cp\u003e我有一台海外的vps，系统是ubuntu，由于使用的机场把22端口封了，导致ssh连接vps非常的不方便，连接一直报如下的错\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e ~/ ssh root@107.173.87.238 -p \u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ekex_exchange_identification: Connection closed by remote host\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConnection closed by 107.173.87.238 port \u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e ~/\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e咨询过机场，机场方出于端口被滥用的目的，将22端口封禁了，这就会导致想使用ssh连接vps，或者使用github ssh，要先关闭代理，关了代理之后其他的网站又无法访问了，非常的麻烦。\u003c/p\u003e","title":"ssh配置"},{"content":"周末和亲爱的一起看了由马伯庸的同名小说「两京十五日」改编的舞台剧，原著精彩，舞台剧则在200分钟内给我们展现了一个丰富、震撼、恢弘的场景，浓缩了小说的精华，给我们展现了更好的视听体验。\n马伯庸是我个人非常喜欢的一个作者了，以史料为背景，勾勒了一个又一个古代的故事，文笔精彩，情节动人，内容丰富，之前小说改编的电视剧也都非常的成功。像「长安十二时辰」、「风起陇西」、「古董局中局」等改编为电视剧的也很精彩。\n还有之前在微博连载的「太白金星有点忙」，从职场各自利益点，重新分析了一下西游记，那简直是活脱脱现代版职场变形记了。\n说回正题，这本小说主角是朱瞻基，朱瞻基是朱棣的孙子，故事背景是朱瞻基去南京考察，然后接到他爸生病的消息，要在15天内从南京赶回北京，15天要走2000多里路，大概1000多公里吧，在古代那是非常的遥远的路途。\n要不怎么说人家是知名作家呢，这么点一个小角度，都能写出这么丰富的故事出来。马伯庸通过史书上短短几行字，挖掘到其背后隐藏的丰富的创作养料，在那个车马很慢的年代，用十五日跑完南京到北京的两千两百余里路。\n精彩，相当精彩。\n宣传海报内容如下\n落难的当朝太子、郁郁不得志的芝麻官\n身份扑朔迷离的小捕快、背负血海深仇的女医生\n两千两百里上演“绝地求生大逃亡”\n这背后到底有怎么样的玄机与阴谋？\n讲究一个非正史但有趣。\n说回正事，当时在剧院看了孟京辉的「两条狗的生活意见」，然后就关注了公众号，好巧不巧的就看到了关于「两京十五日」的舞台剧的文章，感谢亲姐妹带头看的戏剧。\n当时才8月份，十动然拒，虽然我之前看过小说，还买了本书看，知道故事很精彩，但是奈何单张票价太贵了，两个人就更贵的离谱了。\n当时想的是反正还有2个月，国庆后才演出，到国庆再看吧，唉，好巧不巧的，亲爱的还记得这个事，在万般的纠结中，靠亲爱的出马，以合适的价格买到了票，不愧是亲爱的，一出手就知有没有。\n看完了之后，只能说这个物超所值，整个舞台剧表演共200分钟，除去中场休息15分钟，也就是说看了3个小时的表演。主演4人，配角4，5个，次配4，5个，光露脸的演员就有10多个了，再加上没台词的，不露脸的，场上表演人员得20-30人了。只能说值，非常的值。\n不仅看了场视听盛宴，顺便还回顾了下小说剧情，再顺带了解了下朱瞻基的生平，真的是充实的一晚上。\n再次感谢亲爱的出资赞助我俩来看这场，只能说看了之后才知道看了绝对不后悔，相当的Nice。夸一夸亲爱的聪明灵活的小脑袋瓜子。\n关于这场演出，剧院自己也写了好几篇文章来宣传，里面有表演的图，还有故事背景的介绍，非常的全面，感兴趣的可以看一下。\n《两京十五日》马伯庸同名小说改编 两千里日夜兼程逆转命局\n明朝命运的齿轮差点锈在了这里？！\n看两京十五日之前，记得补习这些知识点！\n这是亲爱的在现场拍的宣传海报\n这是亲爱的做的演员谢幕视频，这个剧组谢幕也挺有意思的，中间还有个小姐姐想抢跑，有点乐\n您的浏览器不支持播放该视频！\n最后再次感谢亲爱的赞助门票看演出，感谢亲姐妹带头看戏剧，感谢马伯庸的原著，感谢舞台剧的剧组。\n此致\n行礼\n","permalink":"https://blog.thend03.com/posts/fifteen-days-in-beijing-and-nanjing/","summary":"\u003cp\u003e周末和亲爱的一起看了由马伯庸的同名小说「两京十五日」改编的舞台剧，原著精彩，舞台剧则在200分钟内给我们展现了一个丰富、震撼、恢弘的场景，浓缩了小说的精华，给我们展现了更好的视听体验。\u003c/p\u003e\n\u003cp\u003e马伯庸是我个人非常喜欢的一个作者了，以史料为背景，勾勒了一个又一个古代的故事，文笔精彩，情节动人，内容丰富，之前小说改编的电视剧也都非常的成功。像「长安十二时辰」、「风起陇西」、「古董局中局」等改编为电视剧的也很精彩。\u003c/p\u003e","title":"两京十五日"},{"content":"序 亲爱的的好大弟，国庆在学校不回家，亲爱的的爸爸和妈妈热情的邀请我俩去他那和他一起玩耍，十动然拒，最后实在太热情了，然后我俩就安排了一场9天的川渝之旅。\n感谢老丈人、丈母娘的赞助，感谢好大弟提供了机会，感谢亲爱的规划行程，和我一起去玩，感谢ccav，提供感谢机会。\n行程规划 这次中秋国庆双节一起放，明面有8天的时间，然后行程大致是成都和重庆两个地方，去了成都周边，都江堰、青城山、乐山，然后本次行程就差不多了。\n本来打算走川西小环线进藏的，但是时间比较赶，可能会有点累，所以最终选了成都周边和重庆耍一耍。\n虽然川西风景很美，但是下次一定。\n原计划是租车走川西的，但是国庆租车比较贵，而且川西都是山路，我俩新手小菜鸡，还是算了。\n最终定下行程，成都-都江堰-青城山-成都-乐山-成都-重庆，冲。\n第一站-成都 天府机场与二环内 我们的第一站是成都，课文里的天府之国，四川其他地方都是山地，只有成都那一块盆地，四川盆地，所以成都的地理位置非常的好。\n在南通候机的时候，奢侈了一把，点了starbucks\n刮了个刮刮乐，还亏了10块钱，果然是在做慈善\n到成都之前机舱外是夕阳，没想到这是假期里为数不多的太阳了，大部分天气都是阴雨天\n提到成都的第一印象是什么? 我的印象是大熊猫，火锅和川菜，所以到了成都之后我们猛干了好几顿火锅。\n但是在成都光顾着干火锅了，大熊猫和三星堆都没去看，这个国庆，想去热门景点，得提前预约了，不预约都没门票进去了。\n感谢亲爱的做的攻略，我们住成都二环内，学校边上，别的热门景点的酒店都是3倍5倍的翻，我们只花了300多一晚，就在二环内住下了。\n坐地铁的时候，发现有二仙桥站，我们不用像谭sir视频里的老大爷一样，走成华大道违章才能到二仙桥了\n而且地理位置非常的好，老城区，学校边上，非常的僻静，吃的玩的也非常的多，离好大弟也近，可以非常方便的见面social。\n我们是在29号到的成都，天府机场真的老大了，有句话来形容天府机场非常的好: 天府机场去全国各地2小时可达，去成都市区2小时也可达。\n我们坐地铁坐了一个半小时到了酒店，真的是探险，然后在学校北门那吃了第一顿，是烧烤，虽然是科技，但味道还可以，我吃了一晚抄手，不得不说，成都的抄手确实可以。\ncitywalk与火锅 第二天早上醒了之后，去溜达发掘早餐，发现酒店楼下有一家面馆比较火爆，然后我们就去吃了下，点了份抄手和面，果然香香的，加了点辣椒之后，更香了，辣的嘻哈的但更想吃。\n吃完早饭之后就开始了city walk，继续溜达，沿着花照壁中横街瞎溜达，二环内的大部分都是老房子，但是有部分高楼大厦，我俩完全不能理解，非常的高，大概有30多层，在一群6层的老房子里，非常的突兀，而且为了提高土地利用率，横排之间会插一栋竖着的楼，更离谱了。\n然后继续city walk，在一个小公园里，看到一堆大爷在那遛狗，我俩更加的羡慕了，好多大狗子在公园里撒欢。\n走到了一处菜市场，二环内的菜市场也和我们小地方的菜市场差不多，里面好多卖腊肉的，我们买了点枣和葡萄花生，一边city walk一边吃，巴适得板。\n这边的老楼，贴了点贴纸还是啥的涂层，很有意思\n路边有个运动器材，和老奶奶一起运动一下\nCity walk之后咸鱼一号准备去尝试下肠胃按摩，咸鱼二号准备回去躺尸，高端的肠胃按摩，往往看着非常的朴实无华。\n然后就是我俩加好大弟去学校路边找了个火锅吃了下，看着人还挺多的亚子，而且锅非常的艳，一看就很辣。\n亲爱的吃一口红锅，就辣一口，好大弟表示洒洒水辣，根本不辣，果然是亲姐弟，不对方跃然纸上。\n猝不及防的平板 下午继续city walk，消食，逛了附近的小巷子和商场，也非常的热闹。\n然后好大弟说要买平板学习看视频，然后下午去了凯德广场的华为店，买了遥遥领先家的华为pad，11寸的，看中直接下手，非常的豪爽，果然好大弟的实力还是惊人啊。\n然后买了平板之后，亲爱的作为好大弟的亲姐，给他买了2年的碎屏保，花了有539块钱，非常的贵，但好歹也防摔坏了不是，好大弟这样就有了学习的平板了。\n至于花多少时间学习，那就只能emmm,en en en。毕竟我俩的平板，大部分时间都在爱奇艺，芒果，腾讯等地切换，是时候提升我俩的平板的生产力了。\n回到大学校园 和好大弟一起去他的学校参观一下，我俩溜达着就到了操场上，找几位小朋友借了个篮球，亲爱的为我表演了一场江湖中失传已久的拖鞋投篮，失敬失敬，小三井寿是吧\n好吃不贵的串串 晚上吃酒店附近的串串，5毛一个签子，真的非常的便宜，他家的酥肉炸的深得我心，果然还是串串便宜，价格只有火锅的1/3。\n打卡网红景点 为了饭后消食，选择了去宽窄巷子和春熙路太古里，怎么说呢，这2个地方繁华是繁华，但是不适合我俩了，所以觉得索然无味。\n宽窄巷子相当于南京版夫子庙，苏州版平江路，春熙路太古里，相当于南京版新街口，苏州版苏州中心，大概是这么个意思，索然无味。\n果然不是消食的好去处。\n打车去宽窄巷子，司机是个大姐，给我们分享川西的美景，讲她自驾西藏的旅程，果然还得是川西美，川西有机会再去看看。\n我们在宽窄巷子里的五粮液体验店，点了一杯浓香拿铁，往拿铁里面倒五粮液，非常的暴力，55一杯，削微有点贵，虽贵但难喝，还是没有酱香拿铁好喝，酱香拿铁里都是奶油和糖，相对好喝一点，五粮液可能倒的有点多，酱香只到了一滴，还不知道是不是飞天，阿门。\n在成都的第一天就在逛和吃中结束了，火锅、串串、面、抄手、冰粉，味道都不错，暂时没有踩雷的，本次估计得胖个几斤才能罢休了。\n第二站-都江堰\u0026amp;青城山 虽不懂但凑热闹的都江堰景区 第二天就是国庆了，我们这天排了去都江堰和青城山逛一逛，都江堰这次非常的热门，总共可以容纳6万人，一直在人流告警，最多的一次我记得是预约了5.5万人，非常的多。\n从都江堰站出来，坐旅游巴士去景区，由于我们没有提前买票，且景区关闭了线上购票入口，我们又不知道现场可不可以买票，所以只能去现场碰碰运气，万幸现场还能有机会购票，不然就白来了。\n进去就是在安澜索桥排队，然后排队过索桥排了40分钟，过了索桥之后就是景区，景区虽然壮阔，但是看不懂，闲逛了一会我们就出去了。果然还得是请讲解才行，不然看不明白，但是讲解又太贵了，全程要300，果然咸鱼不配去看人文景观。\n出来之后就南桥古镇了，古色古香的，保留的比较完整，沿着古镇找了个吃的，吃了个腊排骨，回归了清淡的口味，还可以。\n风味腊排骨\n风景佳人少的青城后山 吃完之后打车去青城山，40公里只要80块钱，真的相当的划算，那个路一直在山上走，一会上一会下的，看的我心惊胆跳的，右边排水渠没封上，路边上就是坑，一不小心车就会掉下去，真的感叹司机师傅驾驶技术惊人，就我俩这样，青城山的路都驾驭不了，还是别自驾川西了。\n到达青城山后山已经7点了，青城山的住宿后面算下来，是比较贵的，而且一份柴火鸡，好几家的店都统一定价，小份288，神仙鸡的价格吧。然后在民宿简单吃了点，点了一份小炒鸡，味道也还可以。\n民宿是在河边的半山腰，一大块玻璃墙，可以看到外面的水在哗哗的流，但是由于在山上，雨又比较多，所以很潮湿，而且蚊虫多，而且亲爱的体质有点吸虫，真的对她来说太不友好了。\n第二天就准备上山了， 我们沿着后山入口，从后山上山。\n入口是在一个古镇那，叫泰安古镇，里面还有一个寺庙呢，亲爱的还买了几炷香烧了一下，是个虔诚的信徒。\n山上的风景非常的好，空气新鲜，净化空气，净化心灵，由于下雨，路有点滑，然后很多路都是石头路，凿了个台阶出来，有的路就在山壁边上搭了一个木头桥通行，相当的害怕，有的人下山，那么点小小的桥还非常的小，堵车了。\n全程我们大概走了4个小时左右，然后走到了半山腰，由于要赶车回成都，所以就从半山腰坐索道下来了，爬山4小时，坐索道15分钟，真的是差距极大，果然人力有穷尽，这个在重庆体现的更加明显。\n第三站-成都中转 买票困难的铁路 从青城山回了成都中转休息，成都这几天的酒店价格还合适，另外去乐山要走成都坐高铁，所以我们回成都中转一下。\n真的恐怖，从青城山回成都没有直达的票，我们打算坐到都江堰再候补回成都，结果候补的票也没了，一张站票都没有，乘务员让我们坐\n到站就下车，没票了。但是我们决定坐到成都再说，只能说遵守规则有利于管理，削微不遵守规则会方便自己。假如我们下了，就会好久都买不到票，打车回去还可能堵车，还更贵。\n果然到成都之后，放我们在车站补票之后然后出站了。\n不愧是好大弟心心念念的火锅 晚上吃了好大弟心心念念的商场里的火锅，好大弟觉得第一天路边的火锅不大行，又贵，服务又不好，还不好吃，然后遵从好大弟的想法，吃了商场里的连锁火锅，果然，嗯，服务好，味道好，便宜，刚吧带。\n吃完之后好大弟回学校去了，我俩回酒店收拾了一下，然后亲爱的团了个按摩，去按摩去了。\n我去按摩店附近的龙湖逛了一下，果然是繁华的大商场，边上的楼也灯火通明的。\n我们在成都街头走一走 按完之后诗兴大发，我俩打了个车，横穿二环，从北到南，从北面的金牛区，到了南面的武侯区，开始了我俩的在成都的街头走一走，哦哦哦。\n到那都11点了，整个玉林西路还是非常的热闹，人很多，小酒馆开始了限流，等着人排队叫号进去，我俩没凑那个热闹，就在路边随意找了家街头小店，点了2杯鸡尾酒，我俩这2位伪摇滚人士，端着酒，走在玉林西路上，非常的融入，且场面很和谐。\n摇滚人生啊，rock and roll，呼呼呼。\n摇完之后回学校附近和好大弟约了个夜宵，吃的时候都12点多了，阿门，太放纵了，回去再减肥吧\n喝早茶的日子 前2天没时间喝茶，还好今天早上有时间喝个早茶，酒店附近有条街，一溜烟都是茶馆，我俩点了杯茶，然后就米西了起来，讲究一个融入成都老大爷的退休生活\n第四站-乐山 乐山美食 四川的第四站，选在了乐山，乐山除了大佛，就是吃的比较出名了，像乐山的钵钵鸡，甜皮鸭，冰粉，翘脚牛肉，吃的非常的多。\n由于好大弟在车站突然发脾气、尥蹶子不去了，我俩又收获了2人行程，非常的自在和愉快，只能流泪感谢好大弟的支持与理解了。\n到了乐山站后，我们打了个出租，让师傅推荐了一家翘脚牛肉的店，司机师傅把我们拉去了当地的一家小巷子里，说是本地人常吃的店。\n我们到了之后一看，真的是好家伙，人非常的多，非常的热闹，地上乱糟糟的，真的是充实和热闹。\n我俩点了一份火爆牛肉，和几个小碟，火爆牛肉68一份，算是比较实惠了。虽辣虽麻但好吃，亲爱的一边喊着辣，一边继续吃，那真的是疼死我了，虽菜但勇的样子好喜欢啊，多吃点，因为这，她都多干了几口米饭。\n吃完翘脚牛肉之后，又让店员推荐了甜皮鸭哪家好吃，然后沿着店员的推荐，我俩骑着共享单车，发现了一个公园，里面好多大爷大妈在里面打牌，非常的热闹，一个小小的公园里，承载的是大爷大妈们打牌的场地和快乐，多好。\n然后在公园边上拐到了一个小巷子里，发现了里面的街上和赶集一样热闹，到处都是摆摊的，我俩在里面逛的目不暇接，买了一份钵钵鸡，20块一盒子，买了一份叶儿粑，最后没吃完扔了，买了一串葡萄，当地最低，买了4个石榴，也没吃完，最后还坏了几个，还买了点辣椒粉准备带回来吃，只能说逛不过来，根本逛不过来，太快乐了。\n然后我们骑车到了甜皮鸭那，这条小街也非常的热闹，朱三甜皮鸭那排队排了老长了，我俩排队了串妹花式冰粉，点了一份丈母娘冰粉和一份芒果绵绵冰，味道确实不错，乐山的物价果然相对成都来说还是低了一些的。\n庄严恢弘的大佛景区 回到民宿修整一下我们就去看大佛了，白天人挤人的，我们晚上到的，可以夜游凌云山看大佛。\n感谢成都的大运会，观光车免费，让我们可以丝滑的去景区入口了。\n不过排队检票的时候下起了雨，这几天的天气是差了些，从北门进之后，我们开始上台阶，由于大佛在检修，没法下到佛脚那边，只能从侧面看看大佛的头了，大佛是真的 宏伟，在山壁上凿了个佛像出来。\n买了个宝塔形状的冰棍，奶油的，果然糖分才是第一生产力\n还有个好玩的事是，有人买了白天的游船票看大佛，然后排队2小时，坐船半小时，然后一声预报即将接近大佛，然后54321大佛就过去了，非常的搞笑，坐船看做了个寂寞。\n游船票又贵，体验又不好，还好没坐船，不然要错过好多风景了。\n我们在边上的凌云寺逛了一下，里面也有很多的佛像，非常的庄严肃穆，亲爱的拉着我一起拜了一下佛，非常的虔诚，希望佛祖保佑，我俩感情蒸蒸日上，财运滚滚，身体健康，家庭和谐，父母身体倍棒。\n出了凌云寺之后，沿着指示牌，我俩心想在随便逛逛吧，然后就逛去了东方佛都地宫，我感觉地宫才是本次的精髓，刚入地宫就是一座很高的大佛，大概得有几个几十米高吧，继续往下就是地宫了，里面类似于壁画，雕刻了很多的佛像，讲解了一些乐山和佛教的渊源，以及一些佛像的含义，再往下又是一尊几十米高的大佛，整个地宫的雕刻都非常的庄重肃穆，令人敬佩。\n出了地宫之后我们在路边摊买了一个木刻玩具，知足长乐，一只小Jiojio送给亲爱的。\n出来之后坐观光车坐错了方向，还到了北游客中心，北门那也挺壮观的\n探索景区附近小镇子 第二天我们退房的时候，想去尝试下甜皮鸭，然后经民宿老板推荐，去了镇上的一家小档口买了点尝尝，果然味道不错，然后逛了逛镇上的小街，里面是些卖日用品和水果蔬菜的摊子。\n然后经鸭子店老板推荐，吃了他家对面的早餐店，点了面，抄手，豆花，果然是好吃的早餐店，非常的偶一西，我俩都觉得非常的棒，虽然放了红油，但是香而不辣，非常的成功，比我俩前几天吃的面和抄手好吃多了。\n后来我俩又真空买了几只鸭子寄回来，但是吧真空包装容易漏气，有几个就漏了，真的损失惨重，这种还是不太靠谱，真空包装太容易漏气了。\n奥兰多的最后一战 然后我俩坐着观光巴士，去了上中顺街区，里面的人真的是太多了，一趟趟旅游大巴把游客往里送，恐怖，我俩就只能坐了个三轮车去昨天的奥兰多那继续探索午饭了，路过张公桥，那就更恐怖了，人挤人的，可怕。\n然后我们在那吃上了牛华麻辣烫，红汤锅，但不辣，非常的好吃，而且也便宜。\n亲爱的也趁着空档，买上了心心念念的锅巴馒头，一个馒头2块钱，苏苏软软的，底部类似锅巴的样子，味道还不错。\n最后赶车来不急了，我俩打包了油炸，带上了火车吃。\n乐山旅途画上了句号，非常的完美，乐山著名美食该吃的都吃的差不多了，吃的玩的非常的开心。\n第五站-成都中转 偶一西的川菜 考虑时间，成本的问题，我们从乐山继续回成都中转，酒店的价格也降下来了，非常的合适。\n这次晚上我们没吃火锅，找了家川菜馆吃一下，我们找了一家店，虽然比较艰难，但还是靠着亲爱的聪明的小脑袋瓜子，选中了一家店，然后去吃了，只能说不愧是川菜，而且这家店也不错，点了4个菜，其中有2个菜，盘子比我的大脸盘子还大了许多，而且味道非常的好。\n毛血旺里面的料非常的多，有虾仁，毛肚，血，黄喉之类的，看着很红，其实非常的香。\n那个小炒鸡的盘子真的比我的脸都大，味道非常的香，但是亲爱的吃起来有点辣，嘻哈嘻哈的，非常的可爱。\n点的萝卜炒苕皮和回锅肉，只能沦落为配角了。\n以我的大头做为参照物的图片\n吃完好吃的川菜，我俩再次诗兴大发，决定继续打车去酒吧，这次找了家民谣吧，在建设路上的塘谣酒吧，成华区，不知道有没有路过成华大道。\n里面每整点都会有歌手唱歌，唱的民谣，还有点歌环节，听了驻唱歌手版「再见杰克」，一边摇晃着鸡尾酒在那酌，一边听歌，成都也圆满了，又是凌晨睡觉的一天，回去再规律作息和减肥，阿门。\n有点多余的特产 第二天喝了个汤，买了点特产，虽然特产没啥意思，但还是得带点回来不是，然后就准备出发去下一站了。\n特产只能说有点多余，每一袋只有几包牛肉丝，还死贵，非必要不买特产，费钱还费力。\n第六站-重庆 巷子口的江湖菜 川渝最后一站就留给我们的重庆了，由于好大弟非常的努力，要学习和写作业，这次去重庆仍然只有我俩，只能我俩逛山城重庆了。\n我们住在了渝中区，离热门景点解放碑非常的近，临近假期末尾，酒店的价格也回落了，500块就能住上五星级酒店，我俩也奢侈了一把，高端了一下。\n然后在酒店边上找了个小巷子，吃了个重庆江湖菜，好吃不贵，那个辣子鸡也挺香的，水煮鱼比较嫩，也没踩雷，开心。\n参观宋庆龄故居 入住之后我俩就逛了起来，巷子口就有个宋庆龄故居，门票2元，去参观了一下伟大女性的人生。\n轻轨穿楼 这个地方离李子坝比较近，所以先去了这个地方，体验下轻轨穿楼，但是重庆这个路真的是，一直在上坡下坡，不愧是山城重庆，但是这还只是毛毛雨，更苦逼的还在后面。\n我俩沿着导航到了李子坝地铁站，看了下轻轨穿楼的景观，就是地铁从居民楼里穿过去了，我俩看下面江边站了好多人，就准备下坡去看一下人挤人，然后看完人挤人之后准备去坐地铁，结果坐个地铁要爬6层楼，真的离谱第一步。\n这里就是我的一楼，你的六楼的真实体验。\n初茶花月 然后就坐了地铁到了解放碑那了，喝了本地的奶茶，初茶花月，可能是重庆版茶颜悦色。这个奶茶也是非常的偶一西。\n拿着奶茶就路过了解放碑，到了洪崖洞之后人太多了，我们就放弃了往回走。\n第一天因为随意就把洪崖洞和解放碑给逛了，遥遥领先的重庆解放碑。\n烤鱼 搞人的来了，亲爱的特别的想吃重庆的烤鱼，逮了几个路人问，第一个老大爷给我们指了一个方向，我们沿着走，路上遇到了一个大妈，亲爱的问大妈哪里有好吃的烤鱼，然后大妈给我们推荐了前面烧烤家的烤鱼，然后我们就进去了。\n只能说这是这几天的第一个雷，鱼是那种一条条的，而且烧烤贼辣，说了微辣，还能辣死人，而且非常的贵，我俩心态崩了，吃了几口就走了。\n然后回到中午的店，点了2个菜，点了一份毛血旺，里面都是猪血，猪肉，猪肝，没有毛肚，晚饭在失败中结束。\n巷子口的早午饭 第二天早上早饭尝试了下巷子口的小面，点了份小面和酸辣粉，只能说还可以。\n中午吃了同一个巷子口的火锅，说是30年老火锅，这家好吃，味道好，但是也很辣，比成都的火锅辣，这是我这几天吃的最辣的一顿火锅，太顶了，然后我俩把辣椒捞了一部分出来，才能勉强吃的下去，不过是真的好吃，点了好多肉，价格才是成都的2/3。\n白象居里凑热闹 然后我们就换了一个地方入住了，住到了解放碑附近。然后我们跟着亲爱的做的攻略，准备去白象居打卡，这个地方是少年的你的取景地。\n我们跟着导航去，导航显示没多远，但是要下坡上坡，下坡，出了解放碑就是老旧的居民楼，而且天还下雨了，我俩路过老楼里的一个地下菜市场，昏暗的菜市场里有卖菜的和卖肉的，果然景区只是游览，这些老旧居民楼才是生活。\n最终走了半小时左右走到了白象居，这里也是个老旧的居民楼，上一层台阶之后就到了里面，沿着里面的走廊走可以看到很多人在这里拍照打卡，辅以各种烤肠烤串，共同营造了这里。\n在里面给亲爱的拍照，被喷了半天，果然我的拍照技术还是不过关啊，继续努力。\n江对面有个金色双子楼，非常的亮眼\n然后我看到下楼是啥啥路，然后我俩就沿着楼道下去，结果一层一层又一层的，下了14层才到一楼，我俩准备去坐长江索道，然后问了一个大爷怎么走，大爷说沿着这个楼梯上去，到顶楼往那走，就到了，我俩瞬间灰心了，又得爬到楼顶，但是没办法，只能走楼梯原路返回了。\n我俩爬了14楼之后，又回到了白象居，然后下一级台阶，过个马路就到了入口往那去了，真的是，我的一楼是你的14楼，阿门。\n探索洪崖洞 继续努力上了好几个坡之后，终于到了长江索道的入口，坐索道可以穿过长江，去江对面，结果索道要排队取号，叫到号的人才能允许去排队，只能放弃了。\n路上拍的重庆长江大桥(应该是长江大桥)\n还好这里离洪崖洞不远，我俩就准备去参观洪崖洞了，到处都有卖游船票的，但是江太浑浊了，而且有点贵，有大冤种买吗？反正我俩没买，我俩进洪崖洞景区参观去了，里面是一级一级的往下进，每进一层都有很多商业，安排的非常的满，有几层还臭臭的，我这鼻子不好的人都闻出来了。\n后面还有个类似水帘洞的地方，瀑布在落水，站边上非常的好看，这是唯一可取的地方了，洪崖洞里面不行，晚上亮灯的时候，整个景区上的灯都会亮，从外面看会非常的好看。\n我和亲爱的在这个小洞口凹角度拍照中\n我们的梦-吃好吃的烤鱼 逛完了洪崖洞之后，开始进行本次重庆之旅的最终的梦想\u0026mdash;\u0026mdash;吃烤鱼。\n我俩美团选了一个店，准备步行过去，显示1.5公里，开路导航之后要走2公里，阿门，要冒雨走2公里，真的非常的难顶。\n路上还遇到了一个小学生，亲爱的问他有没有好吃的烤鱼推荐，小学生说烤鱼没有，前面有烤肉，烤肉也不错，亲爱的听了直摇头，不一会儿小学生就走远了，对路人重拳出击，对烤鱼念念不忘，阿门。\n缺德地图带着我们走过街天桥，绕路，上坡，转弯，再上坡，再转弯，再上坡之后终于到了，然后现实给了我俩一记暴击:这家店关门了，走了半天，这家店竟然关门了，而且再美团上排名结果前2，真的太离谱了。\n真的非常的离谱，再重庆走山路冒雨走了2公里，结果店关门了，然后抱着来都来了的心态，美团重新找了一家店。又走了10来分钟之后，我俩到了这家叫农夫烤鱼的店，这会已经8点了，为了吃口烤鱼太难了。\n还好这家店还在营业，店里只有我俩这一桌，应该是一家三口，我俩点了一个烤鱼，是草鱼，还有一份黄瓜汤，一份酥肉。\n我俩就坐那等，小哥炸酥肉，大妈上汤，大爷搁那烤鱼，烤鱼是最后上来的，都8:20了，上了之后，是我们想要的烤鱼的亚子，滋滋冒油，铺满了辣椒，闻着非常的香，我俩吃的第一口就觉得值了。\n老板说这是炭火烤的鱼，比油炸的好吃很多，我俩一顿饭干到了9点，摸着圆滚滚的肚子，美滋滋的出来了，这顿饭还非常的便宜，只花了122，非常的好。\n我们的梦-拦车走重庆的山路 亲爱的在路边随手拦了一辆出租车，在重庆打车出行的愿望也实现了，结果刚走3分钟就到目的地了，原来这家烤鱼离我们住的地方真的非常的近，只有大概1公里的亚子，果然我俩一直在舍近求远，阿门，司机师傅说别看很快，但是其实走路也很走很久的，那一想，确实，在重庆走1公里，那得累死人。\n回去之后亲爱的还蹭酒店的健身房运动了一会，真的是行业标杆，运动典范呢，真健康。\n被重庆的路教育的最后一程 第二天吃了酒店中规中矩的自助餐早饭，我们踏上了回去的路，由于升舱了，把打车的钱花了，我俩打算坐地铁过去。\n本来也就是个普通的路，结果又被重庆的路教育了一把，要过街，要走天桥上下，然后还要上坡去地铁站，最后一公里多走了20分钟才到。我们去的那个地铁站，是七星岗地铁站，这个站台下去坐车，要下6级电扶梯，真的下了一层还有一层，真的服了，完全看不到头。\n因为这，登机的时间非常的紧张，差点赶不上飞机，下次坐飞机还是老老实实提前2个小时到，不要存侥幸心理了，重庆的路以及地铁以及拖延症会好好教育我的。\n顺带一题，顺丰都占领了江北机场，货运飞机遥遥领先，出口的南通机场，顺丰和京东也有货运飞机，现在航空件已经这么发达了吗\n重庆还有一个最深的地铁站红岩村站，据说深度有116米，是重庆最深的地铁站了，下了6层扶梯已经要了我的命了，不敢想象116米要折磨到什么程度，如果以后有机会再体验一下吧。\n重庆再见，我们回去咯。\n川渝之行到此结束。\n其他 衣 成都周边和重庆一直在阴天下雨，还好带了一件外套，不然我俩要冻死在川渝，另外也没法洗衣服，基本上在一家酒店不会待超过2晚，所以攒了很多衣服，带回来洗，真的狼狈。\n还在那边扔了些衣服，在川渝做了回断舍离，阿门。\n食 川渝地区的吃的，和江浙地区区别较大，苏州这边的菜基本都偏甜，偏淡，而川渝地区的吃的，都偏麻，偏辣，还好我这次顶住了，吃红锅也没啥问题，亲爱的虽然吃的辣，但也还能接受，喝点水就过去了。\n吃多了川渝地区的美食，看江浙沪的菜，都是啥玩意啊，火锅、串串，抄手、辣鸡、血旺走起。\n这次吃的基本上没有踩雷的，大部分都很好吃，那家微辣也让人吃不下去的烧烤建议开除渝籍。\n住 这次住的由于前面住的偏离热门景区，花的相对还好，像新都桥那边，前几天每晚都上千了，真的太贵了，景点民宿略微贵一点，在乐山和青城山的时候价格偏高，不过也能接受了。\n我觉得性价比比较高的是成都的桔子酒店，装修比较简洁明亮，智能化或者说自动化比较高，还上门送了一盘小水果，亲爱的选的好啊。\n华住会app上的价格比携程和美团还高，用完券都比不过他们，真的是服了，自己的app下单有啥用，难搞。\n在重庆奢侈了一把，住了一晚某希，一晚某豪，某希是我在官网下的单，房间只要460，但是税加服务费要80块，那个服务我只感受到了门口有人给我推箱子的服务，其他服务真的是一点都没感受到，阿门，不过房间确实相对会看着高级一点。\n最后一晚是住的某豪，还得是亲爱的小脑袋瓜子聪明灵活，某豪的房子看着比某希的更高级一点，价格也更贵，不过简单体验了下午茶和早饭，房间里红色的沙发好好看。\n这次住的整体卫生条件都还行，再次点名批评武功山，那些都是啥，海拔2000米的地方，哪个地方都比不过。\n青城山在山上，离河太近，太潮湿了，小虫子也多，本次相对差一点吧。\n还得是居住在城市里，体验才会更好一点。\n行 本次出行是飞机+高铁+打车+公交地铁+共享单车组成了本次全部行程。\n29号机票买在了南通，因为南通最便宜，但是我们忽略了一个情况，就是去南通要过江。\n我们打了个顺风车，顺风车大哥说要不要早点，可能会堵车，然后我们就提前1个小时出发了，但是还是堵在了过江那，离长江还有100多公里的时候，沈海高速常熟那堵了，无奈只能绕道张家港，准备坐汽渡。\n早饭亲爱的点了2杯酱香拿铁，果然有酒味，名不虚传\n本来还有一个机会，从张家港买火车票去南通的，到南通再打车，但是我的一个犹豫，车票就没了，无奈只能继续往汽渡出发了，结果到了汽渡那，汽渡入口就开始排长队了，2公里通行要6小时，车在入口那根本寸步难行，后来我去看了，汽渡是可以购买散客票坐船过去的。然后我俩就抛弃了顺风车大哥，走路去坐船过去了，顺风车大哥还给我退了一半的路费，真的是好人，感谢大哥，大哥一生平安。\n勇当弃车人，没想到出行第一步，就受此重挫，不过还好我们坐船过去了，赶上了飞机。\n过江之后亲爱的看还有时间，然后我俩找了个地方还吃了个午饭，果然天大地大，吃饭最大。\n然后在成都周边玩的时候，都是高铁，城际列车的组合，成都的城际列车，一排只有4个座位，acdf，非常的宽敞，这个值得点赞。\n但是国庆期间的票真的太难买了，嘎嘎难买，如果不是提前买，基本很难了，真的困难。\n去乐山的时候没有票了，体验了一把一等座，一等座还送水和小食，这个再次点赞，酸角汁好喝，外面饭店可是能卖到10块钱的存在。\n能地铁到的就坐地铁，成都基本都是地铁，在重庆坐了几回公交。\n打车的话成都市内以及乐山市内，都江堰，青城山都是打的车，他们的驾驶技术真的牛，可能在成都高架那种复杂的路况，以及青城山那狭窄的路上稳当驾驶，真的佩服，我俩是没这个技术了。\n另一个在成都的重要交通工具就是共享单车了，到处都是哈罗，美团，青桔，去好大弟那骑个车非常的方便，而且路上车也少，可以骑的很开心。\n景 景的话乐山的东方佛都地宫在我这排第一，比较震撼，第二是青城山，第三是重庆市容市貌，比较立体，老房子比较有沧桑感，都江堰就看个大坝和大河，看不懂，成都自身景色倒没啥，老城区绿化率高，道路宽敞，车少，不像姑苏，路又窄，车又多的。\n终 本次行程还是比较圆满的，在那里的几天也比较快乐，再次感谢亲爱的，亲爱的的好大弟，老丈人和丈母娘。\n我们下次旅程再会。\n","permalink":"https://blog.thend03.com/posts/sichuan-chongqing-travel-notes/","summary":"\u003ch2 id=\"序\"\u003e序\u003c/h2\u003e\n\u003cp\u003e亲爱的的好大弟，国庆在学校不回家，亲爱的的爸爸和妈妈热情的邀请我俩去他那和他一起玩耍，十动然拒，最后实在太热情了，然后我俩就安排了一场9天的川渝之旅。\u003c/p\u003e\n\u003cp\u003e感谢老丈人、丈母娘的赞助，感谢好大弟提供了机会，感谢亲爱的规划行程，和我一起去玩，感谢ccav，提供感谢机会。\u003c/p\u003e\n\u003ch2 id=\"行程规划\"\u003e行程规划\u003c/h2\u003e\n\u003cp\u003e这次中秋国庆双节一起放，明面有8天的时间，然后行程大致是成都和重庆两个地方，去了成都周边，都江堰、青城山、乐山，然后本次行程就差不多了。\u003c/p\u003e","title":"川渝游记"},{"content":"糟糕的周末 起源 加剧 崩溃 ","permalink":"https://blog.thend03.com/posts/disastrous-weekend/","summary":"\u003ch2 id=\"糟糕的周末\"\u003e糟糕的周末\u003c/h2\u003e\n\u003ch2 id=\"起源\"\u003e起源\u003c/h2\u003e\n\u003ch2 id=\"加剧\"\u003e加剧\u003c/h2\u003e\n\u003ch2 id=\"崩溃\"\u003e崩溃\u003c/h2\u003e","title":"损失惨重的周末"},{"content":"最终选了它？？？ 看车时长6个月，最终选择了这款，当了纯纯韭菜？？？？\n考驾照 买车这个事得追溯到2022年的某个没有印象的某天了，当时亲爱的嘟囔着26岁啥也没有，是不是该买了车了，然后驾校报起来，所以在果断的执行力下，终于在2022年的5月份成功报上了名，然后22年嘛，疫情还在，拖拖拉拉的，只能说，考个驾照一波三折又三折又三折又三折，且听我细细道来。\n报名之后6月考科一，7月天太热没去，8月天太热稀稀拉拉的练了几回，教练教的s弯，看到马路牙子消失就多打一点，消失少就少打一点，压线？怎么可能！！！！\n在9月高强度联系之后，预约了国庆之后考科二，考完科二考科三，真的是连轴转啊，真的辛苦我的宝子了。\n然后不出意外要出意外了，由于教练教的好，以及现场坡道整的好，一车只有我的宝子科二没过，死在了坡道和S弯上，坡道-20分，S弯-100分。\n但是科三宝子表现挺好，一车只有她自己过了，真的是，还好一周后的科三过了，不然真的就伤心太平洋了。\n然后就继续和科二杠上了，11月中科二又双叒叕挂在了坡道和s弯，再次伤心大夕阳\n12月准备继续考的时候，然后突然放开，阳了一批又一批，然后无奈取消，然后就是元旦，然后春节，然后在然后，就到3月份了。\n期间每个周末和亲爱的耗在科二场地，2个人转了一圈又一圈，对科二付出了无限的爱与坚持，阿门。\n无数次的汗水和争吵，终于在23年的3月份发芽了。\n3月5号下午，在驾校场地做了最后一次考场模拟，在场地又练了2圈，教练听了直摇头，对我说：知道她为啥不过不，就是练的太多了，紧张，没谁练的比她多。狗听了都摇头，阿门。\n然后5号下午坐了个高铁去做了在安庆听了痛仰的现场，不得不说，老男人的魅力啊，不仅歌唱的好听，还连唱了2个小时没歇，50多岁的人了，比我这个半拉子好多了，22年8月听新裤子的时候，中间小眼镜还划了不少水呢。\n然后6号在南京看了牙，7号就是科二的最终一站了，终于啊终于，在第三次的时候，终于一把过了，我宣布亲爱的终于亲手打破了科二魔咒，撒花。\n由衷的为亲爱的感到开心，不然驾照老悬着，太难受了，一次又一次的，心理压力太大了。\n看车 3月份考完驾照之后，亲爱的开始将我们的买车计划提上日程了。\n虽然但是我们2个对车完全不懂，油车、混动、纯电，合资、进口、国产，好复杂的。\n然后开始了随缘佛系无目的地看车过程。\n我俩在b站看了不少的买车推荐，什么「预算15万到20万该买什么车」、「20万到25万油车推荐」、「20万到25万电车推荐」，五花八门的，真的羡慕。\n然后在4月开始开始了随缘看车，本来之前听说别人买了byd的汉，所以去4s店里看了一下，那会对车没啥基本知识，所以在店里就走马观花的看了一下。\n然后我俩就后面两个月就再也没看任何车了，果不其然，6月份的时候我就被喷了，说好的买车，也不做攻略，也不去看车，你倒是看起来呀，然后我就开始了努力，哼哧哼哧做攻略，开始看了，b站视频刷起来，某车帝看起来。\n凭借着我的固有印象，和浅薄的知识，在腾讯文档上做了如下的表格\n可以看到很多项都是空的，以我俩浅薄的认知，只能做到这种程度了，b站的视频继续刷起来吧\n再次看车 遭遇4月看车滑铁卢之后，沉寂了2个月，到了7月，因为宝子换了工作，每天通勤巨远，痛苦啊痛苦，打车太贵，坐公交太慢，早高峰打车还堵车，晚上下班骑共享单车还晒，每天2小时通勤，于是，买车计划再次提上了日程。\n然后继续去了奥体，byd 4s店，再次聆听销售介绍汉，唐，元，秦等热销车型，然后在销售的亲切慰问下，试乘了汉，汉坐着还挺舒服的说，但是销售拒绝了我们的试驾请求，一个拿驾照不满一年，一个拿了驾照5年半一次方向盘没摸过的人，想想都刺激。\n得，试驾梦想破灭。\n然后坐了迪子之后，沉寂了一周。看车是真的累啊，休息一周再战。\n下周再次加入奥体，本来打算去看看吉利的星越L的，结果奥体只有吉利几何，无奈只能进店去看看吉利的电车了，该说不说的，几何的进店率真的低，车嘛也一般般，看一会就走了。\n韭菜第一步 然后好巧不巧的，在迪子和几何中间还有一家电车的店，那天想着来都来了，进去看看吧，看看又不要钱，没想到进去看就迈出了韭菜生的第一步。\n我们的预算当时设置的是最高20，迪子的汉dmi勉强可以往这个数字上靠了靠，新势力3家给我的固有印象是得30万到40万了，我们这预算够不上，没想到这个新款车型起步21，最高27，嘿，你说，真的是。\n然后当时新车G6刚上市，估计因为G6，吸引了很多的到店流量，然后贼丑的G6边上放了一辆贼靓的P7i，果然，颜值才是第一生产力，阿门。\n小鹏打动我俩的点，一个是智能驾驶，智驾是国内品牌比较领先的，另一个就是颜值了。阿门\n虽然但是，G6这个前脸和配色，真的难以接受，800V和扶摇架构也让我俩不是很能接受，好好和特斯拉打起来吧\n看了P7i之后，再看看汉，汉？汉个锤子汉，太老气了,pass。\n展车就是官网这个绿色的，颜值杀伤力太大了，可惜绿色选装要加5000，果然哪哪都是韭菜。\n然后就是预约了试驾，这次我这个菜鸟坐上了主驾，然后雨天开着G6在高架上尝试NGP，前半程销售开，后半程我在高架上开，下高架那一下给车上另外2个都整不会了，开车技术相当离谱，风险极大，吓的我后面再也不敢试驾了。\n然后小鹏就这了，在G6和p7之间纠结，不管如何，带max的都贵，g6是新上市的车，买max提车得等3个月，然后合计了一下g6和p7的价格，发现长续航max售价差不多，最后一次去店里选择了p7。\n韭菜第二步 在不那么冲动的冲动的某个周日的晚上，下定了小鹏的p7，这下就是纯纯韭菜了，下单之后销售就操作锁单了，锁了之后就不能退了，于是开启了漫长的等车过程，第一辆车等车时，有个优惠要等社保，然后这个过程中因为更喜欢别的内饰，最终到的这台车退掉了重新配车了。\n7月底下的单，兜兜转转，等等等，也过了一个月，中间配了2次车，才等到提车，第一次配车比较快，估计是库存车，第二次申请之后过了一周才配车，估计是新生产的车。\n韭菜第三步 韭菜第三步，那当然就是提车了，当时苏州的电动车补贴没了，为了领无锡的消费补贴，所以选了无锡提车，到了提车的那天，特意从南京叫了个朋友，帮我们开回来，我俩打车去苏州北，坐高铁去无锡东，朋友从南京出去，我们在无锡东汇合之后打车去提车。\n打车有个小插曲，打车的司机问我们去提车啊，买的小鹏啊，咋不买特斯拉啊，这附近就有特斯拉，电动车还得是特斯拉，我疯狂附和：是啊，买车还得买特斯拉，买小鹏纯纯韭菜。\n我们把小鹏当鹏友，小鹏拿我们当韭菜，阿门。\n然后就是验车，签合同，办保险，打临牌了，前几天在b站知乎刷了很多验车的相关知识点，还是挺有用的，验车验的非常的细致，还把车升起来看了下底盘，虽然看不懂，但我大受震撼。\n由于验的比较细致，所以也就比较慢，在交付中心白嫖了一顿午饭，10点到的，下午1点半把车开走了，历时3个半小时，不知道有没有比我们验的慢的。\n再次吐槽一下小鹏这个交付中心，没有水泥地，下雨轮胎上全是泥，提车也不送个赠品啥的，拍照的摆件相当随意，也没个好的背景，阿门。\n韭菜第四步 然后就是出发阳澄湖，当时坐比亚迪的时候，试乘的师傅说提车之后可以把车开阳澄湖练一练，我信他个鬼，糟老头子坏的很，阳澄湖的车一点也不少。\n无奈只能找了条没啥车的小路练了一会，最后还是亲爱的宝子，艺高人胆大，直接从阳澄湖开回去了，中间还途径了车贼多的中环东线，只能说佩服宝子，虽慢但到，安全的开到终点了，女司机的首驾获得了巨大成功，唯一的小瑕疵就是停车不大好停，只能考自动泊车抢救一下了。\n提车留念 下面看下实车展示环节，5米长的车为了帅，车头做的那么长，导致后排空间有点点小，不过瑕不掩瑜了。\n恭喜下面这2位喜提人生第一辆车，👏 👏 👏 👏 👏 👏\n恭喜女司机成为马路高手，可以想开去哪就去哪，而且驾驶技术一流，令人放心，继续加油，小心驾驶。\n号外 提车之后又分别蹭了Model 3和Model y坐了一下，感觉还是tesla稳，p7i底盘感觉不稳，有点晃。 销售说这是纯电轿跑，保时捷调教的底盘，但是我感觉还是tesla坐着舒服一点，不管是副驾还是后排，都是tesla领先。 而且前排主驾和副驾腰部会漏空，开久了坐久了不舒服。 果然买电车还得是看行业标杆啊，行业标杆遥遥领先，虽然内饰是毛坯，但是其他地方还是有可取之处的。 当然model3新版把拨档换到了屏幕上，那我只能说一句:遥遥领先，遥遥领先，遥遥领先\n","permalink":"https://blog.thend03.com/posts/buy-a-xp-car/","summary":"\u003ch2 id=\"最终选了它\"\u003e最终选了它？？？\u003c/h2\u003e\n\u003cp\u003e看车时长6个月，最终选择了这款，当了纯纯韭菜？？？？\u003c/p\u003e\n\u003ch2 id=\"考驾照\"\u003e考驾照\u003c/h2\u003e\n\u003cp\u003e买车这个事得追溯到2022年的某个没有印象的某天了，当时亲爱的嘟囔着26岁啥也没有，是不是该买了车了，然后驾校报起来，所以在果断的执行力下，终于在2022年的5月份成功报上了名，然后22年嘛，疫情还在，拖拖拉拉的，只能说，考个驾照一波三折又三折又三折又三折，且听我细细道来。\u003c/p\u003e","title":"买车日记"},{"content":"问题 测试环境的某台机器运行一段时间后发生了oom，类型是heap oom,即堆内存溢出，用不了了，然后由于配置了-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/data/logs/，在发生oom后，会自动生成dump文件，所以可以拿着dump进行分析，进程先重启恢复使用。\n前置信息 java进程的JVM参数如下,堆内存2g，其中老年代1g，新生代1g\n-Xmx2048M -Xms2048M -Xmn1024M -XX:MaxMetaspaceSize=512M -XX:MetaspaceSize=512M -XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 -XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses -XX:+CMSClassUnloadingEnabled -XX:+ParallelRefProcEnabled -XX:+CMSScavengeBeforeRemark -XX:+HeapDumpOnOutOfMemoryError -XX:ErrorFile=/data/logs/hs_err_pid%p.log -Xloggc:/dev/shm/gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=2 -XX:GCLogFileSize=16M -XX:HeapDumpPath=/data/logs/ -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintClassHistogramBeforeFullGC -XX:+PrintClassHistogramAfterFullGC -XX:+PrintCommandLineFlags -XX:+PrintGCApplicationConcurrentTime -XX:+PrintGCApplicationStoppedTime -XX:+PrintTenuringDistribution -XX:+PrintHeapAtGC 排查过程 MAT 使用mat分析dump文件\n选择leak suspect，检测下内存泄露\nOverview 然后会给一个基本的报告，这个报告就比较明显了，dump文件1.9个g，其中1.8g是problem suspect1，而下面problem suspect1全是\njava.lang.Thread对象，413个线程占了1.8g内存，平均每个线程占用了4m的内存，看线程名称的话，初步分析是rocketmq消费的时候出了问题\nhistogram 直方图以类为维度，展示了类有多少个实例，shallow heap和retained heap的内存大小\nshallow heap翻译过来是浅堆，就是类对象自身占用的内存，retained heap翻译过来就是深堆，就是类对象本身以及对象的成员变量占用的内存\n看如下的直方图，可以看到2g的对，排名第一的java.lang.StackTraceElement这个类，对象数是29344740个，2900万个，然后shallow heap和retained heap大概是895m，占了一半的堆内存，问题可能就出现在这了。继续往下看\ndominator tree 下一步就是看一下支配树这一项了，会按照内存占用比例从高到低展示对象排序。\n支配树内存占用排名前32位全都是java.lang.Thread,每个线程内存占用量按照55m算，55*32=1760m,大概占了堆的85%+，和overview给出的数据基本一致\n这32个线程都是rocketmq的消费线程，那应该是消费出问题了，继续点开线程查看详情\n展开第一个线程详情之后，可以看到具体的内存占用来源了，thread_local持有的map占用了所有的内存，层层展开之后，可以看到每个key只有0.01m内存占用，但是数量比较多，一共有3874个entry，折合下来38m，差不多都是org.mybatis.spring.MyBatisSystemException这种异常造成的了\n复制下cause信息看下\nData too long for column \u0026#39;name\u0026#39; at row 1 堆栈信息如下，其他的线程也是类似，那可以得到如下结论：mq消费的时候，由于mybatis执行更新发生异常，cat的context持有了异常信息，异常过多导致了oom\n小结 本次的oom原因比较直观，基本上看下overview,histogram,dominator tree就可以得出结论了\n修复也比较简单，要么限制下入库时name字段的长度，要么将name字段的长度调大一点就好了\n","permalink":"https://blog.thend03.com/posts/heap-oom/","summary":"\u003ch2 id=\"问题\"\u003e问题\u003c/h2\u003e\n\u003cp\u003e测试环境的某台机器运行一段时间后发生了oom，类型是heap oom,即堆内存溢出，用不了了，然后由于配置了\u003ccode\u003e-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/data/logs/\u003c/code\u003e，在发生oom后，会自动生成dump文件，所以可以拿着dump进行分析，进程先重启恢复使用。\u003c/p\u003e","title":"heap-oom"},{"content":"问题背景 生产环境有机器产生了oom，一开始怀疑是heap oom，因为之前配置了发生oom，自动进行dump，所以分析了dump文件之后，发现4g的heap，最终dump只有300多m，没有分析出有用的内容。\n后来又一次oom之后，终于在容器控制台发现了错误根因，是Metaspace发生了oom。\n所以着重分析下Metaspace为什么会oom。\n前置知识 启动参数 先看下启动参数，看下JVM具体的参数配置\n-Xmx4096M -Xms4096M -Xmn2048M -XX:MaxMetaspaceSize=512M -XX:MetaspaceSize=512M -XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 -XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses -XX:+CMSClassUnloadingEnabled -XX:+ParallelRefProcEnabled -XX:+CMSScavengeBeforeRemark -XX:+HeapDumpOnOutOfMemoryError -XX:ErrorFile=/data/logs/hs_err_pid%p.log -Xloggc:/dev/shm/gc.log -XX:HeapDumpPath=/data/logs/ -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintClassHistogramBeforeFullGC -XX:+PrintClassHistogramAfterFullGC -XX:+PrintCommandLineFlags -XX:+PrintGCApplicationConcurrentTime -XX:+PrintGCApplicationStoppedTime -XX:+PrintTenuringDistribution -XX:+PrintHeapAtGC -Ddubbo.reference.check=false -XX:+UnlockDiagnosticVMOptions 这个是公司默认的jvm参数，可以看到，堆最大是4g，metaspace最大是512m，metaspace给的空间已经很大了，但还是发生了oom。\n关于metaspace的大小的配置项，我们后面再提一下具体含义。\nMetaspace里有什么 分析Metaspace oom之前，先确认下metaspace里会有哪些东西。jdk1.8相比1.7，移除了perm gen，把class,method,constant pool等内容移到了metaspace，单独的一块区域，和机器内存直接相关，不受堆管控。\n在底层，MetaSpace 主要由 Klass Metaspace 和 NoKlass Metaspace 两大部分组成。\nKlass MetaSpace： 就是用来存 Klass 的，就是 Class 文件在 JVM 里的运行时数据结构，这部分默认放在 Compressed Class Pointer Space 中，是一块连续的内存区域，紧接着 Heap。\nCompressed Class Pointer Space 不是必须有的，如果设置了 -XX:-UseCompressedClassPointers，或者 -Xmx 设置大于 32 G，就不会有这块内存，这种情况下 Klass 都会存在 NoKlass Metaspace 里。\nNoKlass MetaSpace： 专门来存 Klass 相关的其他的内容，比如 Method，ConstantPool 等，可以由多块不连续的内存组成。虽然叫做 NoKlass Metaspace，但是也其实可以存 Klass 的内容，上面已经提到了对应场景。\nMetaSpace 的对象为什么无法释放，我们看下面两点\nMetaSpace 内存管理： 类和其元数据的生命周期与其对应的类加载器相同，只要类的类加载器是存活的，在 Metaspace 中的类元数据也是存活的，不能被回收。每个加载器有单独的存储空间，通过 ClassLoaderMetaspace 来进行管理 SpaceManager* 的指针，相互隔离的。 MetaSpace 弹性伸缩： 由于 MetaSpace 空间和 Heap 并不在一起，所以这块的空间可以不用设置或者单独设置，一般情况下避免 MetaSpace 耗尽 VM 内存都会设置一个 MaxMetaSpaceSize，在运行过程中，如果实际大小小于这个值，JVM 就会通过 -XX:MinMetaspaceFreeRatio 和 -XX:MaxMetaspaceFreeRatio 两个参数动态控制整个 MetaSpace 的大小，这个方法会在 CMSCollector 和 G1CollectorHeap 等几个收集器执行 GC 时调用。这个里面会根据 used_after_gc，MinMetaspaceFreeRatio 和 MaxMetaspaceFreeRatio 这三个值计算出来一个新的 _capacity_until_GC 值（水位线）。然后根据实际的 _capacity_until_GC 值使用 MetaspaceGC::inc_capacity_until_GC() 和 MetaspaceGC::dec_capacity_until_GC() 进行 expand 或 shrink。 为了避免弹性伸缩带来的额外 GC 消耗，一般要将 -XX:MetaSpaceSize 和 -XX:MaxMetaSpaceSize 两个值设置为固定的，但是这样也会导致在空间不够的时候无法扩容，然后频繁地触发 GC，最终 OOM。\n所以关键原因就是 ClassLoader 不停地在内存中 load 了新的 Class ，一般这种问题都发生在动态类加载等情况上。\n可能出现问题的点有如下几个\ngroovy动态加载类 反射使用不当频繁创建类 Orika 的 classMap JSON 的 ASMSerializer 基本都集中在反射、Javasisit 字节码增强、CGLIB 动态代理、OSGi 自定义类加载器等的技术点上。\n排查手段 有了上面的背景之后，我们排查方向分为2部分，一部分是看发版记录，最近有哪些改动，哪些地方可能会频繁创建类，二是从jvm层面排查。我们重点说一下jvm层面的排查方向。\n注意事项: 写这篇文章的时候，问题已经解决，所以部分数据不是出问题时采集的数据，是为了写文章使用对应的排查工具生成的数据，具体位置处会标明数据来源和时机\nJVM排查 jdk自带的排查工具，我们可以用的有jps,jstat,jmap等\n其中jmap看的是堆的内存大小和分配\njstat可以看gc相关信息.\ngc.log里的gc日志也可以辅助我们排查\njmap jmap -heap pid的信息如下，这个可以辅助我们看下堆内分代的内存使用情况，当然这个对我们的排查帮助不大，下面看一下命令效果\nAttaching to process ID 5311, please wait... Debugger attached successfully. Server compiler detected. JVM version is 25.73-b02 using parallel threads in the new generation. using thread-local object allocation. Concurrent Mark-Sweep GC Heap Configuration: MinHeapFreeRatio = 40 MaxHeapFreeRatio = 70 MaxHeapSize = 4294967296 (4096.0MB) NewSize = 2147483648 (2048.0MB) MaxNewSize = 2147483648 (2048.0MB) OldSize = 2147483648 (2048.0MB) NewRatio = 2 SurvivorRatio = 8 MetaspaceSize = 536870912 (512.0MB) CompressedClassSpaceSize = 1073741824 (1024.0MB) MaxMetaspaceSize = 536870912 (512.0MB) G1HeapRegionSize = 0 (0.0MB) Heap Usage: New Generation (Eden + 1 Survivor Space): capacity = 1932787712 (1843.25MB) used = 735313536 (701.2496337890625MB) free = 1197474176 (1142.0003662109375MB) 38.04419551276617% used Eden Space: capacity = 1718091776 (1638.5MB) used = 733845856 (699.8499450683594MB) free = 984245920 (938.6500549316406MB) 42.71284376370823% used From Space: capacity = 214695936 (204.75MB) used = 1467680 (1.399688720703125MB) free = 213228256 (203.35031127929688MB) 0.683608654800061% used To Space: capacity = 214695936 (204.75MB) used = 0 (0.0MB) free = 214695936 (204.75MB) 0.0% used concurrent mark-sweep generation: capacity = 2147483648 (2048.0MB) used = 613751744 (585.3192749023438MB) free = 1533731904 (1462.6807250976562MB) 28.580042719841003% used 66527 interned Strings occupying 7048176 bytes. 还有一个命令是jmap -histo pid，这个可以看堆内存活的对象类型和实例数量\nnum #instances #bytes class name ---------------------------------------------- 1: 5478775 506824136 [C 2: 1421313 315369496 [B 3: 3791992 91007808 java.lang.String 4: 2593077 82978464 java.util.HashMap$Node 5: 730043 78351624 [I 6: 1393624 67623928 [Ljava.lang.Object; 7: 712992 62743296 java.lang.reflect.Method 8: 317758 48979560 [Ljava.util.HashMap$Node; 9: 178237 32795608 com.fasterxml.jackson.core.json.UTF8StreamJsonParser 10: 513502 20540080 java.util.LinkedHashMap$Entry 11: 639968 20478976 com.mysql.cj.conf.BooleanProperty 12: 941240 18059848 [Ljava.lang.Class; 13: 353510 16968480 java.util.HashMap 14: 241178 13505968 sun.nio.cs.UTF_8$Encoder 15: 539462 12947088 java.lang.StringBuilder 16: 178448 12848256 com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl 17: 218814 12253584 com.fasterxml.jackson.core.io.IOContext jstat 使用jstat观察gc和metaspace的使用情况，jstat主要输出各个区域的使用量比例(写这篇文章的时候问题已修复，所以metaspace使用占比比较平稳)\njstat -gcutil 5311 这个命令以1000ms为间隔，输出pid 5311的进程的gc情况，从这里可以看出metaspace的使用比例的变化\n比如s0是survivo 0当前空间的已使用比例，s1的survivo 1当前空间的已使用比例，E是eden区的已使用比例，O是old gen的已使用比例\nS0 S1 E O M CCS YGC YGCT FGC FGCT GCT 0.00 1.04 57.32 27.40 92.59 86.14 125511 1969.952 28 5.062 1975.014 0.00 1.04 78.69 27.40 92.59 86.14 125511 1969.952 28 5.062 1975.014 0.00 1.04 97.81 27.40 92.59 86.14 125511 1969.952 28 5.062 1975.014 0.98 0.00 32.47 27.40 92.59 86.14 125512 1969.968 28 5.062 1975.031 0.98 0.00 66.19 27.40 92.59 86.14 125512 1969.968 28 5.062 1975.031 0.98 0.00 91.34 27.40 92.59 86.14 125512 1969.968 28 5.062 1975.031 0.00 0.81 17.07 27.41 92.59 86.14 125513 1969.980 28 5.062 1975.042 0.00 0.81 39.36 27.41 92.59 86.14 125513 1969.980 28 5.062 1975.042 0.00 0.81 60.87 27.41 92.59 86.14 125513 1969.980 28 5.062 1975.042 0.00 0.81 89.84 27.41 92.59 86.14 125513 1969.980 28 5.062 1975.042 0.89 0.00 9.76 27.42 92.59 86.14 125514 1969.995 28 5.062 1975.058 0.89 0.00 25.07 27.42 92.59 86.14 125514 1969.995 28 5.062 1975.058 0.89 0.00 44.26 27.42 92.59 86.14 125514 1969.995 28 5.062 1975.058 gc.log 另一个就是从gc.log里查看metaspace的日志,下面一段日志是gc前和gc后各个区域的内存变化\n可以观察下heap before gc和heap after gc2处的metaspace空间使用变化(此处是问题解决后的gc.log,仅供参考)\nmetaspace数据如下，可以看到距离512m还有足够的空间，注意此处是问题解决后的数据，仅供排查参考\nused 176869K， 已使用大概是172m capacity 189800K， 容量大概是185m committed 190848K，已提交大概是186m reserved 1216512K，保留大概是1188m 2023-09-12T09:03:08.449+0800: 1249459.698: Total time for which application threads were stopped: 0.0195137 seconds, Stopping threads took: 0.0001738 seconds 2023-09-12T09:03:11.392+0800: 1249462.641: Application time: 2.9429699 seconds 2023-09-12T09:03:11.396+0800: 1249462.646: Total time for which application threads were stopped: 0.0046629 seconds, Stopping threads took: 0.0002150 seconds 2023-09-12T09:03:11.397+0800: 1249462.646: Application time: 0.0000922 seconds 2023-09-12T09:03:11.400+0800: 1249462.649: Total time for which application threads were stopped: 0.0034414 seconds, Stopping threads took: 0.0001087 seconds 2023-09-12T09:03:14.304+0800: 1249465.553: Application time: 2.9035482 seconds {Heap before GC invocations=130961 (full 14): par new generation total 1887488K, used 1679309K [0x00000006c0000000, 0x0000000740000000, 0x0000000740000000) eden space 1677824K, 100% used [0x00000006c0000000, 0x0000000726680000, 0x0000000726680000) from space 209664K, 0% used [0x0000000733340000, 0x00000007334b34a0, 0x0000000740000000) to space 209664K, 0% used [0x0000000726680000, 0x0000000726680000, 0x0000000733340000) concurrent mark-sweep generation total 2097152K, used 1209833K [0x0000000740000000, 0x00000007c0000000, 0x00000007c0000000) Metaspace used 176869K, capacity 189800K, committed 190848K, reserved 1216512K class space used 19973K, capacity 22145K, committed 23168K, reserved 1048576K 2023-09-12T09:03:14.307+0800: 1249465.557: [GC (Allocation Failure) 2023-09-12T09:03:14.307+0800: 1249465.557: [ParNew Desired survivor size 107347968 bytes, new threshold 6 (max 6) - age 1: 674280 bytes, 674280 total - age 2: 177208 bytes, 851488 total - age 3: 238904 bytes, 1090392 total - age 4: 191384 bytes, 1281776 total - age 5: 38080 bytes, 1319856 total - age 6: 40232 bytes, 1360088 total : 1679309K-\u0026gt;1868K(1887488K), 0.0143320 secs] 2889142K-\u0026gt;1211742K(3984640K), 0.0146560 secs] [Times: user=0.03 sys=0.01, real=0.01 secs] Heap after GC invocations=130962 (full 14): par new generation total 1887488K, used 1868K [0x00000006c0000000, 0x0000000740000000, 0x0000000740000000) eden space 1677824K, 0% used [0x00000006c0000000, 0x00000006c0000000, 0x0000000726680000) from space 209664K, 0% used [0x0000000726680000, 0x0000000726853010, 0x0000000733340000) to space 209664K, 0% used [0x0000000733340000, 0x0000000733340000, 0x0000000740000000) concurrent mark-sweep generation total 2097152K, used 1209874K [0x0000000740000000, 0x00000007c0000000, 0x00000007c0000000) Metaspace used 176869K, capacity 189800K, committed 190848K, reserved 1216512K class space used 19973K, capacity 22145K, committed 23168K, reserved 1048576K } jcmd 最后一个可用的jvm工具就是cmd，使用jcmd打印下class数量，看下哪些包下的类增长比较快\n使用命令如下\njcmd \u0026lt;PID\u0026gt; GC.class_stats|awk \u0026#39;{print$13}\u0026#39;|sed \u0026#39;s/\\(.*\\)\\.\\(.*\\)/\\1/g\u0026#39;|sort |uniq -c|sort -nrk1 实际进程打印如下,可以看到最多的是sun.reflect包下的class最多\n2283 sun.reflect 416 com.xx.xx.xx.xx.impl 316 java.lang.invoke 306 com.sun.proxy 275 reactor.core.publisher 268 java.util 198 com.google.common.collect 189 com.google.protobuf 181 io.netty.channel 174 java.lang dump分析 dump 快照之后通过 JProfiler 或 MAT 观察 Classes 的 Histogram (直方图) ，这个估计得深厚的功力才能看出来\narthas arthas也有很多的命令可以帮助排查，比如dashboard，可以看metaspace区的内存占用，vmtool可以查看具体的class\n如下是dashborad命令，可以看到metaspace的使用量\n可以使用vmtool，匹配指定包名的class\nvmtool --action getInstances --className sun.reflect.* --limit 100 可以使用transform，有类加载的时候就会触发\nwatch java.lang.instrument.ClassFileTransformer transform \u0026#39;{params,returnObj,throwExp}\u0026#39; -n 5 -x 3 也可以跟踪下class init\nstack sun.reflect.DelegatingClassLoader \u0026lt;init\u0026gt; -n 5 实际排查过程 前面介绍了一些关于metaspace的知识，也介绍了一些排查方向，接下来介绍下实际排查过程\n接到告警之后，查看进程，发现了metaspace oom的错误，于是开始往metaspace oom的方向开始排查\n经过一通google/baidu之后，发现了如上介绍的一些方向和手段\n首先是看了美团的文章场景三：MetaSpace 区 OOM\n发现可以使用jcmd命令进行排查，看下哪个包的class比较多，执行以下命令，得到如下的结果\njcmd 5311 GC.class_stats|awk \u0026#39;{print$13}\u0026#39;|sed \u0026#39;s/\\(.*\\)\\.\\(.*\\)/\\1/g\u0026#39;|sort |uniq -c|sort -nrk1|head -n 10 2294 sun.reflect 416 com.xx.impl 316 java.lang.invoke 316 com.sun.proxy 275 reactor.core.publisher 268 java.util 198 com.google.common.collect 189 com.google.protobuf 181 io.netty.channel 174 java.lang 多次执行jcmd之后，发现sun.reflect包下的class比较多，且有增长，于是把目光放在了sun.reflect上。\n以为是反射用的不当导致的，然后使用arthas，分析了dashboard以及使用了vmtool查看sun.reflect包的instance。\n当时使用dashboard分析，metaspace上涨的非常的快，然后使用vmtool命令查看sun.reflect\nvmtool --action getInstances --className sun.reflect.* --limit 100 执行结果类似下图\n分析发现里面有mytabis，也有自己调用产生的反射，但是不足以导致metaspace oom\n后来想到了加上如下2个参数,用于打印类加载、卸载日志\n-XX:+TraceClassLoading -XX:+TraceClassUnloading 由于发布系统默认没打nohup日志，所以在这里走了点弯路，类加载、卸载信息没打到日志里，后来上机器手动用nohup java -jar xx.jar \u0026amp;之后，发现了端倪\n可以看到启动之后，打了比较多的类似下面的这些日志，可以初步判断是com.googlecode.aviator.Expression使用不当造成的\n[Loaded Script_1691559755244_2757/2021240514 from com.googlecode.aviator.Expression] [Loaded Script_1691559755339_2758/6228193 from com.googlecode.aviator.Expression] [Loaded Script_1691559755492_2759/419920034 from com.googlecode.aviator.Expression] [Loaded Script_1691559756493_2760/1460748148 from com.googlecode.aviator.Expression] [Loaded Script_1691559756500_2761/520805009 from com.googlecode.aviator.Expression] [Loaded Script_1691559756506_2762/398664510 from com.googlecode.aviator.Expression] [Loaded Script_1691559756573_2763/306461935 from com.googlecode.aviator.Expression] [Loaded Script_1691559756577_2764/1116508142 from com.googlecode.aviator.Expression] [Loaded Script_1691559756791_2765/870354750 from com.googlecode.aviator.Expression] [Loaded Script_1691559756799_2766/1661127610 from com.googlecode.aviator.Expression] [Loaded Script_1691559756812_2767/1883979577 from com.googlecode.aviator.Expression] [Loaded Script_1691559757019_2768/1281538781 from com.googlecode.aviator.Expression] [Loaded Script_1691559757332_2769/589742334 from com.googlecode.aviator.Expression] [Loaded Script_1691559757338_2770/1560860126 from com.googlecode.aviator.Expression] [Loaded Script_1691559757977_2771/213218340 from com.googlecode.aviator.Expression] [Loaded Script_1691559758313_2772/505164301 from com.googlecode.aviator.Expression] [Loaded Script_1691559758318_2773/601453331 from com.googlecode.aviator.Expression] [Loaded Script_1691559759007_2774/1011764766 from com.googlecode.aviator.Expression] [Loaded Script_1691559759014_2775/338373159 from com.googlecode.aviator.Expression] [Loaded Script_1691559759146_2776/1714310047 from com.googlecode.aviator.Expression] [Loaded Script_1691559759154_2777/1663245165 from com.googlecode.aviator.Expression] [Loaded Script_1691559759227_2778/797537408 from com.googlecode.aviator.Expression] [Loaded Script_1691559759234_2779/551097430 from com.googlecode.aviator.Expression] [Loaded Script_1691559759553_2780/594411270 from com.googlecode.aviator.Expression] [Loaded Script_1691559759559_2781/1720465741 from com.googlecode.aviator.Expression] [Loaded Script_1691559759586_2782/215181464 from com.googlecode.aviator.Expression] [Loaded Script_1691559759601_2783/2036721542 from com.googlecode.aviator.Expression] [Loaded Script_1691559759797_2784/1723282218 from com.googlecode.aviator.Expression] [Loaded Script_1691559759802_2785/953430028 from com.googlecode.aviator.Expression] [Loaded Script_1691559759942_2786/847216521 from com.googlecode.aviator.Expression] [Loaded Script_1691559759949_2787/1763495463 from com.googlecode.aviator.Expression] [Loaded Script_1691559760350_2788/47562916 from com.googlecode.aviator.Expression] 跟着com.googlecode.aviator.Expression这个类，发现可能造成异常的代码如下\nExpression expression = AviatorEvaluator.compile(ruleExpressProcessed); 这个还有一个重载方法,是否缓存\npublic static Expression compile(String expression, boolean cached) { return getInstance().compile(expression, cached); } 跟踪代码，最后会发现cached字段会影响classloader的获取，如果cached=true,则会使用已缓存的classloader，如果false每次都会new 一个新的classloader\ncom.googlecode.aviator.AviatorEvaluatorInstance#newCodeGenerator(java.lang.String, boolean) 问题修复 将cached设置为true,metaspace使用率就很平稳了，不会出现高频的类加载和卸载情况。\n问题复现 本打算在本地复现下这个问题的，但是本地能gc掉，生产环境由于每次2-3天才会发生oom，所以没有发现oom的时候，metaspace里有哪些元素，可以看下本地验证过程和现象，帮助理解\n测试代码 maven依赖\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.googlecode.aviator\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;aviator\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;5.2.5\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; jvm参数\n堆设置的比较大,metaspace只设置了128m\n-Xmx4096M -Xms4096M -Xmn2048M -XX:MaxMetaspaceSize=128M -XX:MetaspaceSize=128M -XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 -XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses -XX:+CMSClassUnloadingEnabled -XX:+ParallelRefProcEnabled -XX:+CMSScavengeBeforeRemark -XX:+HeapDumpOnOutOfMemoryError -XX:ErrorFile=/data/logs/hs_err_pid%p.log -Xloggc:/dev/shm/gc.log -XX:HeapDumpPath=/data/logs/ -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintClassHistogramBeforeFullGC -XX:+PrintClassHistogramAfterFullGC -XX:+PrintCommandLineFlags -XX:+PrintGCApplicationConcurrentTime -XX:+PrintGCApplicationStoppedTime -XX:+PrintTenuringDistribution -XX:+PrintHeapAtGC -Ddubbo.reference.check=false -XX:+UnlockDiagnosticVMOptions -XX:NativeMemoryTracking=detail //class loading unloading -XX:+TraceClassLoading -XX:+TraceClassUnloading 使用多线程去并发访问\npublic static void main(String[] args) { ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat(\u0026#34;test-pool-%d\u0026#34;).build(); ThreadPoolExecutor executor = new ThreadPoolExecutor(50, 50, 1, TimeUnit.SECONDS, new LinkedBlockingQueue\u0026lt;\u0026gt;(50), threadFactory); for (int i = 0; i \u0026lt; 32; i++) { executor.execute(() -\u0026gt; { while (true) { try { String rule = \u0026#34;field01+ field02\u0026#34;; Map\u0026lt;String, Object\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); int random1 = new Random().nextInt(); int random2 = new Random().nextInt(); map.put(\u0026#34;field01\u0026#34;, random1); map.put(\u0026#34;field02\u0026#34;, random2); Expression compiledExp = AviatorEvaluator.compile(rule); Object obj = compiledExp.execute(map); System.out.println(obj); } catch (Exception e) { e.printStackTrace(); } } }); } } 控制台也输出了同样的日志\n然后使用jconsole连到jvm上观察内存使用情况\n首先是metaspace的使用情况，最高是到50m，然后gc掉，持续这一过程，说明metaspace使用量在上升，但是能gc的掉，而且不会触发阈值。\n生产上发生oom，可能有流量因素，访问量比本地模拟的大。\n在看下类的加载卸载情况，程序运行了1个半小时，加载和卸载数量差不多持平，大概6529万次，可以发现类是一直在加载，但是本地模拟的情况下，卸载的也快，生产上的具体细节由于网络隔离问题，无法模拟出，仅能根据加载数量看出类加载数量异常了，这块代码是有问题的\n概览里可以看到已加载的类的数量，在一个区间范围内波动，一边加载一边卸载\n修复验证 代码修改如下，将cached设置为true\nExpression compiledExp = AviatorEvaluator.compile(rule,true); 概览数据如下，可以发现类只加载了2000多个就平稳了，不会加载新的class\nmetaspace使用量稳定在13m,不会波动\n类在加载了2274个之后保持稳定，没有新增\n根据修改之后的现象判断，造成问题的原因就是每次都会new classloader，导致类频繁加载卸载，叠加生产流量不可控，极端情况可能就会导致oom\n总结 由于未设置metaspace区监控，具体的原因暂未发现，比如Metaspace里的class数量占比，分类等。\n修复之后再上线，使用arthas观察metaspace使用量，发现metaspace区域内存使用量。\n关于metaspace的可用资料，相比于堆内存的oom来说，比较少，所以排查下来也没有那么顺利，不过经过这次问题排查，对metaspace有了一定的了解，下次再排查问题时，可以有更好的切入方向了\n参考资料 场景三：MetaSpace 区 OOM 深入理解堆外内存metaspace ","permalink":"https://blog.thend03.com/posts/metaspace-oom/","summary":"\u003ch2 id=\"问题背景\"\u003e问题背景\u003c/h2\u003e\n\u003cp\u003e生产环境有机器产生了oom，一开始怀疑是heap oom，因为之前配置了发生oom，自动进行dump，所以分析了dump文件之后，发现4g的heap，最终dump只有300多m，没有分析出有用的内容。\u003c/p\u003e\n\u003cp\u003e后来又一次oom之后，终于在容器控制台发现了错误根因，是Metaspace发生了oom。\u003c/p\u003e","title":"metaspace-oom"},{"content":"SPI spi的全称是service provider interface，是一种服务发现机制，动态选择接口的实现类。\nJava中的spi是在META-INF/services提供一个名称为接口class的文件，里面配置具体的接口实现类。使用ServiceLoader加载spi。\nDubbo的spi是自己实现的，没有使用jdk自带的.Dubbo SPI扩展了很多的能力，包括kv配置，按需加载class和instance并且缓存了class和instance不会重复加载，也提供了更多高级的功能，包括扩展点自适应，扩展点自动激活，扩展点自动装配，扩展点包装等。可以说dubbo的spi功能还是非常丰富的，在dubbo源码里有很重要的地位。\nJava SPI JDK提供的SPI,有一个亿点点的小缺点，就是每次都要遍历所有的实现，返回所有实现类的实例，无法按需加载，无法查找指定的实现类。每次想用的话只能进行遍历。\n下面使用示例代码进行演示。\n物料 一个简单的接口\npackage com.fc.se.spi; public interface Animal { void cout(); } 2个接口的实现类\npackage com.fc.se.spi; public class Cat implements Animal { @Override public void cout() { System.out.println(\u0026#34;miao miao smh\u0026#34;); } } package com.fc.se.spi; public class Dog implements Comparable\u0026lt;Dog\u0026gt;{ int size; public Dog(int s) { size = s; } public String toString() { return size + \u0026#34;\u0026#34;; } @Override public int compareTo(Dog o) { return size - o.size; } } 一个测试类\npublic class SpiMain { public static void main(String[] args) { ServiceLoader\u0026lt;Animal\u0026gt; animals = ServiceLoader.load(Animal.class); for (Animal animal:animals) { animal.cout(); System.out.println(animal.getClass()); System.out.println(animal.hashCode()); } ServiceLoader\u0026lt;Animal\u0026gt; load = ServiceLoader.load(Animal.class); for (Animal animal:load) { animal.cout(); System.out.println(animal.getClass()); System.out.println(animal.hashCode()); } } } Resources下的spi配置文件\n文件名为接口全限定名com.fc.se.spi.Animal，文件内容为所有的实现类的接口全限定名\ncom.fc.se.spi.Cat 测试过程 首先执行下main方法\n根据输出结果可以看到，每次调用ServiceLoader#load方法每次得到的都是新的实例，而且没有任何根据指定字段获取指定实例的方法。如果有的实例在实例化的时候存在比较耗时的操作，或者spi的实现非常多，会非常的消耗资源。\nJDK的SPI方法比较简单，不看源码大概猜一下就是去指定目录读取实现类的class，然后反射创建对应的实例。\nDubbo SPI Dubbo自己实现了一套spi，解决了jdk spi的一些缺点，并且加上了很多的扩展功能，非常的强大。\n读取如下几个目录的配置文件\nMETA-INF/dubbo/internal/ META-INF/dubbo/external/ META-INF/dubbo/ META-INF/services/ dubbo兼容了jdk spi的目录，并扩展了自身的spi目录，其中internal和external是dubbo自己的扩展文件目录，META-INF/dubbo/这个目录可以放置我们的自定义扩展配置。\n物料 添加dubbo依赖，我测试用的是dubbo-3.2.0-beta4，spi机制基本上一样，看的时候对应下自己的版本，可能会有差异。\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.dubbo\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;dubbo\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.2.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 一个添加了@SPI注解的接口，指定了默认的spi实现,有几个方法添加了@Adaptive注解，用于测试自适应扩展点。\npackage com.fc.rpc.dubbo; import org.apache.dubbo.common.URL; import org.apache.dubbo.common.extension.Adaptive; import org.apache.dubbo.common.extension.SPI; @SPI(\u0026#34;dog\u0026#34;) public interface SimpleExt { /** * yell * * @param url url * @param s s * @return s */ @Adaptive({\u0026#34;key1\u0026#34;, \u0026#34;key2\u0026#34;}) String yell(URL url, String s); /** * echo * * @param url url * @param s s * @return s */ @Adaptive String echo(URL url, String s); /** * no adaptive * * @param url url * @param i i * @return i */ String bang(URL url, int i); } 2个实现了接口的普普通通实现类\npackage com.fc.rpc.dubbo; import org.apache.dubbo.common.URL; public class CatExt implements SimpleExt { @Override public String yell(URL url, String s) { return \u0026#34;yell catExt: \u0026#34; + s; } @Override public String echo(URL url, String s) { return \u0026#34;echo catExt: \u0026#34; + s; } @Override public String bang(URL url, int i) { return \u0026#34;bang catExt: \u0026#34; + i; } package com.fc.rpc.dubbo; import org.apache.dubbo.common.URL; public class DogExt implements SimpleExt { @Override public String yell(URL url, String s) { return \u0026#34;yell dogExt: \u0026#34; + s; } @Override public String echo(URL url, String s) { return \u0026#34;echo dogExt: \u0026#34; + s; } @Override public String bang(URL url, int i) { return \u0026#34;bang dogExt: \u0026#34; + i; } } 一个普通的测试类\npackage com.fc.rpc.dubbo; import org.apache.dubbo.common.URL; import org.apache.dubbo.common.extension.ExtensionLoader; import org.apache.dubbo.common.url.component.URLAddress; import org.apache.dubbo.common.url.component.URLParam; import java.util.HashMap; public class DubboSpi { public static void main(String[] args) { ExtensionLoader\u0026lt;SimpleExt\u0026gt; extensionLoader = ExtensionLoader.getExtensionLoader(SimpleExt.class); SimpleExt dog = extensionLoader.getExtension(\u0026#34;dog\u0026#34;); SimpleExt adaptiveExtension = extensionLoader.getAdaptiveExtension(); dog.yell(null, \u0026#34;dogdog\u0026#34;); URLAddress urlAddress = new URLAddress(\u0026#34;127.0.0.1\u0026#34;, 20880); URLParam parse = URLParam.parse(new HashMap\u0026lt;\u0026gt;()); adaptiveExtension.echo(new URL(urlAddress, parse), \u0026#34;dogs\u0026#34;); SimpleExt dog1 = extensionLoader.getExtension(\u0026#34;dog\u0026#34;); dog1.yell(null, \u0026#34;dog1\u0026#34;); } } resources下在META-INF/dubbo下的spi配置文件，文件名为接口的全限定名com.fc.rpc.dubbo.SimpleExt，文件内容是kv配置，指定哪个key对应哪个实现类\ndog=com.fc.rpc.dubbo.DogExt cat=com.fc.rpc.dubbo.CatExt 基本的准备工作做好了，下面先根据DubboSpi的main方法做一下测试\nExtensionLoader 每一个接口类对应唯一一个ExtensionLoader实例\npublic static void main(String[] args) { ExtensionLoader\u0026lt;SimpleExt\u0026gt; extensionLoader = ExtensionLoader.getExtensionLoader(SimpleExt.class); ExtensionLoader\u0026lt;SimpleExt\u0026gt; extensionLoader1 = ExtensionLoader.getExtensionLoader(SimpleExt.class); System.out.println(System.identityHashCode(extensionLoader)); System.out.println(System.identityHashCode(extensionLoader1)); } 控制台输出\n1208203046 1208203046 根据debug和控制台输出，可以看出多次获取的是同一个extensinonLoader实例\nExtension 配置文件里配置了如下2个kv\ndog=com.fc.rpc.dubbo.DogExt cat=com.fc.rpc.dubbo.CatExt 我们获取spi实现的时候，可以指定key去获取\n获取extension有如下几个api\ngetExtension(String name) getExtension(String name, boolean wrap) getDefaultExtension() 第一个是获取指定key的扩展实现，示例中是dog\n第二个是获取包装类，这个是dubbo中的自动包装的实现，使用warp实现了类似aop的功能，包装类持有spi扩展的实例\n第三个是获取默认的扩展类，在spi注解上标记了默认扩展实现，类似@SPI(\u0026ldquo;dog\u0026rdquo;)，默认的扩展实现就是dog\n接下来试验下这3个方法\npublic static void main(String[] args) { ExtensionLoader\u0026lt;SimpleExt\u0026gt; extensionLoader = ExtensionLoader.getExtensionLoader(SimpleExt.class); SimpleExt defaultExtension = extensionLoader.getDefaultExtension(); SimpleExt dog = extensionLoader.getExtension(\u0026#34;dog\u0026#34;); SimpleExt dog2 = extensionLoader.getExtension(\u0026#34;dog\u0026#34;, true); SimpleExt cat = extensionLoader.getExtension(\u0026#34;cat\u0026#34;); } 根据结果可以看到defaultExtension/dog/dog2都是同一个实例，类型为com.fc.rpc.dubbo.DogExt\n另一个是类型为com.fc.rpc.dubbo.CatExt的实例，同一个key只会生成唯一一个对应实现类的实例。\nAdaptive Extension 上面一小节讲的是普通的SPI的扩展实现，得到的就是对应的接口实现类的实例，dubbo还提供了另外一种扩展实现，叫做自适应扩展。\n先看一下官网的描述:\n先说明下自适应扩展类的使用场景。比如我们有需求，在调用某一个方法时，基于参数选择调用到不同的实现类。和工厂方法有些类似，基于不同的参数，构造出不同的实例对象。 在 Dubbo 中实现的思路和这个差不多，不过 Dubbo 的实现更加灵活，它的实现和策略模式有些类似。每一种扩展类相当于一种策略，基于 URL 消息总线，将参数传递给 ExtensionLoader，通过 ExtensionLoader 基于参数加载对应的扩展类，实现运行时动态调用到目标实例上。\n实际上就是根据url的参数动态选择具体的实现类\n使用自适应扩展，需要在接口或者方法上添加@Adaptive注解\n看下示例\nimport org.apache.dubbo.common.URL; import org.apache.dubbo.common.extension.Adaptive; import org.apache.dubbo.common.extension.SPI; /** * simle ext * * @author since * @date 2023-07-10 10:03 **/ @SPI(\u0026#34;dog\u0026#34;) public interface SimpleExt { /** * yell * * @param url url * @param s s * @return s */ @Adaptive({\u0026#34;key1\u0026#34;, \u0026#34;key2\u0026#34;}) String yell(URL url, String s); /** * echo * * @param url url * @param s s * @return s */ @Adaptive String echo(URL url, String s); /** * no adaptive * * @param url url * @param i i * @return i */ String bang(URL url, int i); } 有2种用法，一种是取默认值的，默认的@Adaptive取的是spi的默认扩展实现，本例是dog，一种是根据key的值来获取对应扩展的，根据url中取到的extName获取对应的扩展实现。\n获取adaptive extension使用的是org.apache.dubbo.common.extension.ExtensionLoader#getAdaptiveExtension，这个方法的得到的是一个interface$Adaptive的class实例,本例中的adaptive extension的class的com.fc.rpc.dubbo.SimpleExt$Adaptive\n看下示例代码\npublic static void main(String[] args) { ExtensionLoader\u0026lt;SimpleExt\u0026gt; extensionLoader = ExtensionLoader.getExtensionLoader(SimpleExt.class); SimpleExt adaptiveExtension = extensionLoader.getAdaptiveExtension(); dog.yell(null, \u0026#34;dogdog\u0026#34;); URLAddress urlAddress = new URLAddress(\u0026#34;127.0.0.1\u0026#34;, 20880); URLParam parse = URLParam.parse(new HashMap\u0026lt;\u0026gt;()); adaptiveExtension.echo(new URL(urlAddress, parse), \u0026#34;dogs\u0026#34;); SimpleExt dog1 = extensionLoader.getExtension(\u0026#34;dog\u0026#34;); dog1.yell(null, \u0026#34;dog1\u0026#34;); } echo方法使用的是默认的参数，所以会执行到spi的默认扩展dog，可以看一下下一步\n在来看一下SimpleExt$Adaptive的class文件，这个是通过javaassist直接拼接出来的class文件，控制台会输出这个class文件\n完整的class文件如下\npackage com.fc.rpc.dubbo; import org.apache.dubbo.rpc.model.ScopeModel; import org.apache.dubbo.rpc.model.ScopeModelUtil; /** * @author * @date 2023-07-10 13:11 */ public class SimpleExt$Adaptive implements com.fc.rpc.dubbo.SimpleExt { public java.lang.String yell(org.apache.dubbo.common.URL arg0, java.lang.String arg1) { if (arg0 == null) { throw new IllegalArgumentException(\u0026#34;url == null\u0026#34;); } org.apache.dubbo.common.URL url = arg0; String extName = url.getParameter(\u0026#34;key1\u0026#34;, url.getParameter(\u0026#34;key2\u0026#34;, \u0026#34;dog\u0026#34;)); if (extName == null) { throw new IllegalStateException(\u0026#34;Failed to get extension (com.fc.rpc.dubbo.SimpleExt) name from url (\u0026#34; + url.toString() + \u0026#34;) use keys([key1, key2])\u0026#34;); } ScopeModel scopeModel = ScopeModelUtil.getOrDefault(url.getScopeModel(), com.fc.rpc.dubbo.SimpleExt.class); com.fc.rpc.dubbo.SimpleExt extension = (com.fc.rpc.dubbo.SimpleExt) scopeModel.getExtensionLoader(com.fc.rpc.dubbo.SimpleExt.class).getExtension(extName); return extension.yell(arg0, arg1); } public java.lang.String echo(org.apache.dubbo.common.URL arg0, java.lang.String arg1) { if (arg0 == null) { throw new IllegalArgumentException(\u0026#34;url == null\u0026#34;); } org.apache.dubbo.common.URL url = arg0; String extName = url.getParameter(\u0026#34;simple.ext\u0026#34;, \u0026#34;dog\u0026#34;); if (extName == null) { throw new IllegalStateException(\u0026#34;Failed to get extension (com.fc.rpc.dubbo.SimpleExt) name from url (\u0026#34; + url.toString() + \u0026#34;) use keys([simple.ext])\u0026#34;); } ScopeModel scopeModel = ScopeModelUtil.getOrDefault(url.getScopeModel(), com.fc.rpc.dubbo.SimpleExt.class); com.fc.rpc.dubbo.SimpleExt extension = (com.fc.rpc.dubbo.SimpleExt) scopeModel.getExtensionLoader(com.fc.rpc.dubbo.SimpleExt.class).getExtension(extName); return extension.echo(arg0, arg1); } public java.lang.String bang(org.apache.dubbo.common.URL arg0, int arg1) { throw new UnsupportedOperationException(\u0026#34;The method public abstract java.lang.String com.fc.rpc.dubbo.SimpleExt.bang(org.apache.dubbo.common.URL,int) of interface com.fc.rpc.dubbo.SimpleExt is not adaptive method!\u0026#34;); } } 看下生成的class，接口里一共定义了3个方法，2个方法打上了@Adaptive注解，其中由于bang()没有打注解，所以通过代理类访问bang访问会直接报错\necho方法由于使用的是默认的值，不需要根据url里的取值去动态获取ext，所以是会走到默认的扩展点dog里，这个上面debug已经说明了。\n具体获取ext是这行代码,@Adaptive没有设置具体的参数，会将接口类拆成simple.ext这样去获取extName,取不到的话会取默认值dog\nString extName = url.getParameter(\u0026#34;simple.ext\u0026#34;, \u0026#34;dog\u0026#34;); yell方法由于配置了参数，所以实际获取extName的行为是这样\nString extName = url.getParameter(\u0026#34;key1\u0026#34;, url.getParameter(\u0026#34;key2\u0026#34;, \u0026#34;dog\u0026#34;)); 根据extName获取最终的扩展实现\n自适应扩展先写到这，后面的案例再补充\nwarpper dubbo还有一种warper的用法，就是有一个spi的扩展类，有一个参数的构造函数，然后类型是扩展类的类型，就会实现warpper的效果，类似aop的功能，这么说可能有点晦涩，写代码看下效果吧\n物料 配置文件，照例我们还是先写配置文件，再META-INF/dubbo下新建一个文件命名为com.fc.rpc.dubbo.WrapperExt的配置文件，这个名称就是我们测试wrapper的接口全路径\n配置文件里定义kv，前2行是目标实现，类似于我们上个例子的dogExt和catExt，后2行是包装实现，调用一个扩展，会按顺序执行tortoiseWrapper和rabbitWrapper，执行完扩展之后，会执行目标实现，比如tortoise和rabbit。\ntortoise=com.fc.rpc.dubbo.TortoiseExt rabbit=com.fc.rpc.dubbo.RabbitExt tortoiseWrapper=com.fc.rpc.dubbo.TortoiseWrapperExt rabbitWrapper=com.fc.rpc.dubbo.RabbitWrapperExt SPI接口类\n定义了一个WrapperExt接口，打上@SPI注解，这个和上面的SimpleExt一样\npackage com.fc.rpc.dubbo; import org.apache.dubbo.common.extension.SPI; /** * warper ext * * @author since * @date 2023-08-03 08:37 */ @SPI public interface WrapperExt { /** * wrapper * * @param wrapper wrapper */ void wrapper(String wrapper); } 原始实现\n有2个原始实现类，实现了WrapperExt,这2个和上面的DogExt和CatExt含义一样\npackage com.fc.rpc.dubbo; /** * @author * @date 2023-08-03 08:48 */ public class TortoiseExt implements WrapperExt { @Override public void wrapper(String wrapper) { System.out.println(\u0026#34;tortoise self: \u0026#34; + wrapper); } } package com.fc.rpc.dubbo; /** * @author * @date 2023-08-03 08:48 */ public class RabbitExt implements WrapperExt { @Override public void wrapper(String wrapper) { System.out.println(\u0026#34;rabbit self: {}\u0026#34;); } } 有2个包装实现类，这个和原始实现类不同的是里面有个类型为WrapperExt的成员变量，有一个含参构造函数，用于初始化成员变量\npackage com.fc.rpc.dubbo; /** * @author since * @date 2023-08-03 08:55 */ public class TortoiseWrapperExt implements WrapperExt { private final WrapperExt wrapperExt; public TortoiseWrapperExt(WrapperExt wrapperExt) { this.wrapperExt = wrapperExt; } @Override public void wrapper(String wrapper) { System.out.println(\u0026#34;tortoise wrapper: \u0026#34; + wrapper); wrapperExt.wrapper(wrapper); } } package com.fc.rpc.dubbo; /** * @author since * @date 2023-08-03 08:55 */ public class RabbitWrapperExt implements WrapperExt { private final WrapperExt wrapperExt; public RabbitWrapperExt(WrapperExt wrapperExt) { this.wrapperExt = wrapperExt; } @Override public void wrapper(String wrapper) { System.out.println(\u0026#34;rabbit wrapper: \u0026#34;+wrapper); wrapperExt.wrapper(wrapper); } } 一个测试类，用于执行测试方法\npackage com.fc.rpc.dubbo; import org.apache.dubbo.common.extension.ExtensionLoader; /** * spi wrapper * @author since * @date 2023-08-05 08:50 */ public class SpiWrapper { public static void main(String[] args) { ExtensionLoader\u0026lt;WrapperExt\u0026gt; extensionLoader = ExtensionLoader.getExtensionLoader(WrapperExt.class); WrapperExt tortoise = extensionLoader.getExtension(\u0026#34;tortoise\u0026#34;); tortoise.wrapper(\u0026#34;abandon\u0026#34;); System.out.println(\u0026#34;###################\u0026#34;); WrapperExt rabbit = extensionLoader.getExtension(\u0026#34;rabbit\u0026#34;); rabbit.wrapper(\u0026#34;give up\u0026#34;); } } 测试 先简单跑一下main函数,执行结果如下\nrabbit wrapper: abandon tortoise wrapper: abandon tortoise self: abandon ################### rabbit wrapper: give up tortoise wrapper: give up rabbit self: give up 可以看到先是按顺序执行了2个wrapper包装类，然后在执行到了自身实现类。\n这个就是静态代理的用法，通过有参构造函数，反射构造包装类，先执行包装类，最终调用到的就是目标类。\n代码实现 通过org.apache.dubbo.common.extension.ExtensionLoader#getExtension(java.lang.String)进行调用，wrapper默认是true，所以获取到的构造参数都是会进行包装判断的，具体看下面的代码\nprivate T createExtension(String name, boolean wrap) { Class\u0026lt;?\u0026gt; clazz = getExtensionClasses().get(name); if (clazz == null || unacceptableExceptions.contains(name)) { throw findException(name); } try { T instance = (T) extensionInstances.get(clazz); if (instance == null) { extensionInstances.putIfAbsent(clazz, createExtensionInstance(clazz)); instance = (T) extensionInstances.get(clazz); instance = postProcessBeforeInitialization(instance, name); injectExtension(instance); instance = postProcessAfterInitialization(instance, name); } //看这里 if (wrap) { List\u0026lt;Class\u0026lt;?\u0026gt;\u0026gt; wrapperClassesList = new ArrayList\u0026lt;\u0026gt;(); if (cachedWrapperClasses != null) { wrapperClassesList.addAll(cachedWrapperClasses); wrapperClassesList.sort(WrapperComparator.COMPARATOR); Collections.reverse(wrapperClassesList); } if (CollectionUtils.isNotEmpty(wrapperClassesList)) { for (Class\u0026lt;?\u0026gt; wrapperClass : wrapperClassesList) { Wrapper wrapper = wrapperClass.getAnnotation(Wrapper.class); boolean match = (wrapper == null) || ((ArrayUtils.isEmpty( wrapper.matches()) || ArrayUtils.contains(wrapper.matches(), name)) \u0026amp;\u0026amp; !ArrayUtils.contains(wrapper.mismatches(), name)); if (match) { instance = injectExtension( (T) wrapperClass.getConstructor(type).newInstance(instance)); instance = postProcessAfterInitialization(instance, name); } } } } // Warning: After an instance of Lifecycle is wrapped by cachedWrapperClasses, it may not still be Lifecycle instance, this application may not invoke the lifecycle.initialize hook. initExtension(instance); return instance; } catch (Throwable t) { throw new IllegalStateException( \u0026#34;Extension instance (name: \u0026#34; + name + \u0026#34;, class: \u0026#34; + type + \u0026#34;) couldn\u0026#39;t be instantiated: \u0026#34; + t.getMessage(), t); } } 重点看if(wrap)这里，如果需要包装的话，会获取到对应的包装类的class列表，如果有对应的包装类class，则判断是否可以根据构造器创建对应类型的实例。\n这一段代码会生成包装类，并将target设置进成员变量里\nif (match) { instance = injectExtension( (T) wrapperClass.getConstructor(type).newInstance(instance) ); nstance = postProcessAfterInitialization(instance, name); } 来看一下debug过程，以tortoise为例，断点断在tortoise实例上\n可以看到tortoise实例的类型的RabbitWrapperExt，持有了一个TortoiseWrapperExt类型的成员变量，而TortoiseWrapperExt最终持有了我们的目标TortoiseExt类型的成员变量.\nIOC dubbo的spi实现了ioc的功能，具体来说如果有个成员变量里实现了set方法，就会尝试为这个成员变量注入一个bean，以达到自动注入的目的。\n本次没有提供spring环境，所以使用adaptiveExtension获取实例进行注入\n物料 配置文件，在META-INF/dubbo/下新增一个配置文件com.fc.rpc.dubbo.IocExt,文件内容如下\naudi=com.fc.rpc.dubbo.AudiIocExt 以及之前测试用过的spi配额com.fc.rpc.dubbo.SimpleExt，拿过来用一下\ndog=com.fc.rpc.dubbo.DogExt cat=com.fc.rpc.dubbo.CatExt SPI接口类\npackage com.fc.rpc.dubbo; import org.apache.dubbo.common.extension.SPI; /** * ioc ext * * @author since * @date 2023-08-05 10:52 **/ @SPI public interface IocExt { /** * 汽车的价格 */ void carPrice(); } SPI接口实现类\npackage com.fc.rpc.dubbo; import org.apache.dubbo.common.URL; import org.apache.dubbo.common.url.component.URLAddress; import org.apache.dubbo.common.url.component.URLParam; import java.util.HashMap; /** * audi ioc ext * * @author since * @date 2023-08-05 10:53 */ public class AudiIocExt implements IocExt { private SimpleExt simpleExt; public void setSimpleExt(SimpleExt simpleExt) { this.simpleExt = simpleExt; } @Override public void carPrice() { System.out.println(\u0026#34;audi\u0026#39;s price is 299999\u0026#34;); URLAddress urlAddress = new URLAddress(\u0026#34;127.0.0.1\u0026#34;, 20880); URLParam parse = URLParam.parse(new HashMap\u0026lt;\u0026gt;()); String audi = simpleExt.echo(new URL(urlAddress, parse), \u0026#34;audi\u0026#34;); System.out.println(\u0026#34;ioc execute: \u0026#34; + audi); } } SPI实现里定义了一个成员变量SimpleExt，这个是我们本篇文章第一个测试类\n一个测试类\npackage com.fc.rpc.dubbo; import org.apache.dubbo.common.extension.ExtensionLoader; /** * @author * @date 2023-08-05 10:58 */ public class SpiIoc { public static void main(String[] args) { ExtensionLoader\u0026lt;IocExt\u0026gt; extensionLoader = ExtensionLoader.getExtensionLoader(IocExt.class); IocExt audi = extensionLoader.getExtension(\u0026#34;audi\u0026#34;); audi.carPrice(); } } 测试 看下执行结果,可以看到确实执行到了成员变量的方法，成员变量确实注入了一个实例\n看下debug过程,simpleExt的类型是动态代理生成的一个类的实例，这个之前分析自适应扩展的时候件过，最终会执行到SimpleExt默认的spi实现那。\n代码实现 实现这个主要是在获取扩展时，做了一个依赖注入的功能，一共有3种类型的injector，本次测试用例用的是AdaptiveExtensionInjector\n看下具体的代码\norg.apache.dubbo.common.extension.ExtensionLoader#createExtension这里是创建扩展入口\nprivate T createExtension(String name, boolean wrap) { Class\u0026lt;?\u0026gt; clazz = getExtensionClasses().get(name); if (clazz == null || unacceptableExceptions.contains(name)) { throw findException(name); } try { T instance = (T) extensionInstances.get(clazz); if (instance == null) { extensionInstances.putIfAbsent(clazz, createExtensionInstance(clazz)); instance = (T) extensionInstances.get(clazz); instance = postProcessBeforeInitialization(instance, name); //主要看这里 injectExtension(instance); instance = postProcessAfterInitialization(instance, name); } if (wrap) { List\u0026lt;Class\u0026lt;?\u0026gt;\u0026gt; wrapperClassesList = new ArrayList\u0026lt;\u0026gt;(); if (cachedWrapperClasses != null) { wrapperClassesList.addAll(cachedWrapperClasses); wrapperClassesList.sort(WrapperComparator.COMPARATOR); Collections.reverse(wrapperClassesList); } if (CollectionUtils.isNotEmpty(wrapperClassesList)) { for (Class\u0026lt;?\u0026gt; wrapperClass : wrapperClassesList) { Wrapper wrapper = wrapperClass.getAnnotation(Wrapper.class); boolean match = (wrapper == null) || ((ArrayUtils.isEmpty( wrapper.matches()) || ArrayUtils.contains(wrapper.matches(), name)) \u0026amp;\u0026amp; !ArrayUtils.contains(wrapper.mismatches(), name)); if (match) { instance = injectExtension( (T) wrapperClass.getConstructor(type).newInstance(instance)); instance = postProcessAfterInitialization(instance, name); } } } } // Warning: After an instance of Lifecycle is wrapped by cachedWrapperClasses, it may not still be Lifecycle instance, this application may not invoke the lifecycle.initialize hook. initExtension(instance); return instance; } catch (Throwable t) { throw new IllegalStateException( \u0026#34;Extension instance (name: \u0026#34; + name + \u0026#34;, class: \u0026#34; + type + \u0026#34;) couldn\u0026#39;t be instantiated: \u0026#34; + t.getMessage(), t); } } org.apache.dubbo.common.extension.ExtensionLoader#injectExtension这里是依赖注入实现,使用org.apache.dubbo.common.extension.ExtensionInjector#getInstance获取需要注入的实例\nprivate T injectExtension(T instance) { if (injector == null) { return instance; } try { for (Method method : instance.getClass().getMethods()) { if (!isSetter(method)) { continue; } /** * Check {@link DisableInject} to see if we need auto-injection for this property */ if (method.isAnnotationPresent(DisableInject.class)) { continue; } // When spiXXX implements ScopeModelAware, ExtensionAccessorAware, // the setXXX of ScopeModelAware and ExtensionAccessorAware does not need to be injected if (method.getDeclaringClass() == ScopeModelAware.class) { continue; } if (instance instanceof ScopeModelAware || instance instanceof ExtensionAccessorAware) { if (ignoredInjectMethodsDesc.contains(ReflectUtils.getDesc(method))) { continue; } } Class\u0026lt;?\u0026gt; pt = method.getParameterTypes()[0]; if (ReflectUtils.isPrimitives(pt)) { continue; } try { String property = getSetterProperty(method); //主要看这里 Object object = injector.getInstance(pt, property); if (object != null) { method.invoke(instance, object); } } catch (Exception e) { logger.error(COMMON_ERROR_LOAD_EXTENSION, \u0026#34;\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;Failed to inject via method \u0026#34; + method.getName() + \u0026#34; of interface \u0026#34; + type.getName() + \u0026#34;: \u0026#34; + e.getMessage(), e); } } } catch (Exception e) { logger.error(COMMON_ERROR_LOAD_EXTENSION, \u0026#34;\u0026#34;, \u0026#34;\u0026#34;, e.getMessage(), e); } return instance; } 使用反射调用set方法将获取到实例设置到对象的成员变量里\n看下debug过程，org.apache.dubbo.common.extension.ExtensionLoader#injectExtension执行到获取instance时，injector类型是AdaptiveExtensionInjector,持有一个injector list，会遍历list获取实例\n遍历3种类型的injector获取要注入的实例，找到一个就返回\n其他 断断续续终于写完了，第一次写这种分析源码的文章，7月12号动笔的，8月12号才写完，真的墨迹。\n中间也看了其他博客的文章，自己也动手Debug了代码，对dubbo的spi有了比较深入的了解了，也算学到了不少知识。\n之前一阵子对dubbo的源码比较好奇，陆续看了dubbo consumer的超时重试策略，spi设计等模块，后续如果有机会的话会陆续写出来。\n参考链接 dubbo spi官网介绍\nvivo互联网技术dubbo spi介绍\n","permalink":"https://blog.thend03.com/posts/dubbo-spi/","summary":"\u003ch2 id=\"spi\"\u003eSPI\u003c/h2\u003e\n\u003cp\u003espi的全称是service provider interface，是一种服务发现机制，动态选择接口的实现类。\u003c/p\u003e\n\u003cp\u003eJava中的spi是在META-INF/services提供一个名称为接口class的文件，里面配置具体的接口实现类。使用ServiceLoader加载spi。\u003c/p\u003e\n\u003cp\u003eDubbo的spi是自己实现的，没有使用jdk自带的.Dubbo SPI扩展了很多的能力，包括kv配置，按需加载class和instance并且缓存了class和instance不会重复加载，也提供了更多高级的功能，包括扩展点自适应，扩展点自动激活，扩展点自动装配，扩展点包装等。可以说dubbo的spi功能还是非常丰富的，在dubbo源码里有很重要的地位。\u003c/p\u003e","title":"dubbo spi"},{"content":"背景 我这边使用gohangout消费kafka，写入clickhouse，每次来新的需求，需要根据不同的evn，不同的日志来源，配置不同的topic/consumer/broker/password/table/fields等，所以想使用shell更新模板文件，根据不同的条件生成不同的yml配置文件\n生成过程 交互式输入 使用shell，我就想着使用交互式输入，每需要一个变量，就终端输入一个，然后赋值到变量里，使用sed去替换，基本上topic/consumer/password等都能实现，但是在host列表那出现了问题。\n交互式输入的简单栗子\n#!/bin/bash # 提示用户输入 echo \u0026#34;请输入env: \u0026#34; read env if [ ! -n \u0026#34;$env\u0026#34; ] ;then echo \u0026#34;请输入环境参数，可选参数列表如下: dev,fat,pro,pro-eco-cluster,pro-new-cluster\u0026#34; exit 1 fi envValue=$env #模拟的sed命令，按照实际情况替换 sed -i .bak \u0026#34;s/env_template/$envValue/g\u0026#34; \u0026#34;abc.txt\u0026#34; 列表的问题 yml中列表大概如下所示\noutputs: - Clickhouse: database: \u0026#34;default\u0026#34; hosts: - 192.168.10.11:9000 - 192.168.10.12:9000 如果模板文件如下\noutputs: - Clickhouse: database: \u0026#34;default\u0026#34; hosts: #要替换的占位符 host_list_template 如果按照上面的方式，host_list=\u0026quot;- 192.168.10.10\\n- 192.168.10.11\u0026quot;,将host_list使用sed替换掉模板文件里的host_list_template，则最终生成的文件格式如下\noutputs: - Clickhouse: database: \u0026#34;default\u0026#34; hosts: #要替换的占位符 - 192.168.10.10 - 192.168.10.11 实际只有第一行会保持缩进，下面所有行缩进就乱了，这样的话yml格式会报错，需要人工去format一下。\n由于一开始其他的普通字符串我都是用的sed，所以陷入了思维误区，满脑子都是想着怎么生成一个能保持缩进的字符串，然后替换掉占位符，再经过我一上午和chatgpt反复拉扯，无意义的对话之后，终于还是没能生成保持缩进的字符串，chatgpt误我啊。\n下午继续战斗的时候，发现了一个yml命令行工具y1，这个命令可以读取/修改yml文件\n使用brew install yq，即可使用\n使用yq可以给指定的key赋值，这样就避免自己手动去保持缩进格式了，遍历list，给key赋值即可解决，那么理论上上面所有的普通字符串都可以使用yq去赋值，而不用写占位符去sed替换了。\n一个更新示例如下\n模板文件file.yml\noutputs: - Clickhouse: database: \u0026#34;default\u0026#34; hosts: user: \u0026#34;default\u0026#34; password: \u0026#34;a\u0026#34; table: \u0026#34;a\u0026#34; bulk_actions: 100000 flush_interval: 8 concurrent: 4 fields: [\u0026#39;appname\u0026#39;, \u0026#39;className\u0026#39;] 更新脚本test.sh\n#!/bin/bash # 定义多个列表元素 list1=(\u0026#34;element1\u0026#34; \u0026#34;element2\u0026#34;) list2=(\u0026#34;element3\u0026#34; \u0026#34;element4\u0026#34; \u0026#34;element5\u0026#34;) list3=(\u0026#34;element6\u0026#34;) # 根据条件选择不同的列表元素 if [[ \u0026#34;$1\u0026#34; == \u0026#34;dev\u0026#34; ]]; then selected_list=(\u0026#34;${list1[@]}\u0026#34;) elif [[ \u0026#34;$1\u0026#34; == \u0026#34;fat\u0026#34; ]]; then selected_list=(\u0026#34;${list2[@]}\u0026#34;) else selected_list=(\u0026#34;${list3[@]}\u0026#34;) fi # 输出结果 echo \u0026#34;(${selected_list[*]})\u0026#34; # 逐个添加列表元素 for element in \u0026#34;${selected_list[@]}\u0026#34;; do yq eval --inplace \u0026#39;.outputs[0].Clickhouse.hosts += [\u0026#34;\u0026#39;\u0026#34;$element\u0026#34;\u0026#39;\u0026#34;]\u0026#39; file.yml done 最终生成的结果如下\n传入fat\noutputs: - Clickhouse: database: \u0026#34;default\u0026#34; hosts: - element3 - element4 - element5 user: \u0026#34;default\u0026#34; password: \u0026#34;a\u0026#34; table: \u0026#34;a\u0026#34; bulk_actions: 100000 flush_interval: 8 concurrent: 4 fields: [\u0026#39;appname\u0026#39;, \u0026#39;className\u0026#39;] 总结 shell中修改yml，还得是包装好的工具省事，强烈推荐yq,配合文档和chatgpt熟悉用法\n","permalink":"https://blog.thend03.com/posts/generate-yml-based-on-template/","summary":"\u003ch2 id=\"背景\"\u003e背景\u003c/h2\u003e\n\u003cp\u003e我这边使用gohangout消费kafka，写入clickhouse，每次来新的需求，需要根据不同的evn，不同的日志来源，配置不同的topic/consumer/broker/password/table/fields等，所以想使用shell更新模板文件，根据不同的条件生成不同的yml配置文件\u003c/p\u003e","title":"基于模板文件生成yml"},{"content":"从博客平台到放弃 折腾博客也有不少年了，从最开始的csdn，到博客园，简书，以及开源的hexo，hugo，最终稳定在了Hugo上，也算是不少时间的折腾吧。\n国内的一些博客平台吧，现在问题都挺多的，csdn就不说了，各种垃圾转发文章，还贴各种广告，贴广告能理解，到处都是广告，严重影响阅读体验，而且垃圾文章特别的多，有时候就一句话一个链接就结束了，特别的恼火。\n博客园倒挺好的，没有广告，而且很多文章的质量还行，但是我感觉编辑器有点老旧，不大喜欢在上面写文章，但是博客园用来看还是挺好的，另外说一句，用爱发电果然不靠谱，博客园都能倒闭的，太难了。\n简书倒是挺好的，广告适中，文章样式也符合我的审美，而且编辑器也挺好使的，不过里面有些限制也挺严重的，被判违规之后，文章就被锁了，而且不能贴公众号图片去倒流，想蹭点流量的路又被堵死了。\n自建个人博客 上述平台都有各种各样的问题，那么一个符合自己审美和心意的个人博客，就非常的有必要了。\n我也看过不少的开源博客工具，首先是barretlee，我非常的喜欢他的样式，但是博客的安装介绍没有太多，就放弃了，这个博客是真的好看呀。\n后来又看了一些开源的博客系统，比如halo,wordpress等，但是这些需要额外安装进程，对于我这种不想买机器的人来说，有点费劲。\n最终把目光放在了基于github pages的静态博客系统上面，文章的源文件和发布页都通过github实现，静态博客网站比较出名的有hexo和hugo。\n我一开始在少数派上冲浪，发现了有个作者基于github pages自己折腾了一个博客出来，我也照着折腾了一下，不得不说，真的折腾出来了，但是可能作者自己也放弃了维护，我折腾完之后也没有后续了，也搁置了，git地址如下:Blog-With-GitHub-Boilerplate\n一段时间之后，又开始手痒，重新折腾博客，试过Hexo，后来也放弃了，在最后一回，终于确定用github action+github pages+hugo搭建我的静态资源博客了。\n稳定的博客版本-Hugo 可能是累了，也可能是想稳定的写点东西，肯定是要用静态资源博客的，所以选了个比较有知名度的hugo。\n另外为了不用买机器，所以选择了使用github仓库作为文件存储和发布工具\n不得不说，搞定了用哪种博客系统之后，博客更新也稳定了，可以写点自己想写的东西了，纯粹作为自己的碎碎念保留在互联网上吧。\n最终的最终，经过了2，3次主题的切换，从zozo到coder到even，最终主题定在了even，其他的主题稍后有空再试吧。\n目前我的博客，使用hugo+github pages+github action,主题用even，目前已经稳定的在更新和运行了。\nhugo折腾记 安装Hugo 首先是hugo的安装，我的电脑是mac，用的是brew安装的，具体安装的过程比较简单，可以搜索一下。\n在本地新建一个hugo项目，然后和github仓库关联。\ngithub actions 我使用的是使用github actions自动构建部署和发布博客。\n可以在提交文章的时候，自动触发构建，可以指定监听哪个分支的变化，构建出静态资源之后选择另外一个分支进行部署。\n参考如下文章实现的自动部署 github actions实现hugo自动部署\n为了解决每次部署都会丢失自定义域名的问题，需要在static目录新增一个CNAME文件, 里面添加自己的自定义域名\n贴一下我的构建脚本，从别的博客看到然后改成了自己的github配置。\nname: GitHub Pages on: push: branches: - main # Set a branch name to trigger deployment pull_request: schedule: # Runs everyday at 8:00 AM - cron: \u0026#34;0 0 * * *\u0026#34; jobs: deploy: runs-on: ubuntu-latest permissions: contents: write concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v3 with: submodules: recursive # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy on Github uses: peaceiris/actions-gh-pages@v3 # If you\u0026#39;re changing the branch from main, # also change the `main` in `refs/heads/main` # below accordingly. if: ${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }} with: personal_token: ${{ secrets.PERSONAL_TOKEN }} publish_branch: gh-pages publish_dir: ./public commit_message: ${{ github.event.head_commit.message }} 主要是监听的分支和发布的分支需要改一下，其他的涉及权限，需要在github上配置一下，需要添加一个PERSONAL_TOKEN的key-value，具体路径如下，打开你的repo,点击settings,然后选择左侧的security-\u0026gt;security and variables-\u0026gt;actions-\u0026gt;new respository secret新增一个PERSONAL_TOKEN即可\n![image-20230711222017528](/Users/since/Library/Application Support/typora-user-images/image-20230711222017528.png)\n主题 博客可能最重要的就是主题了，hugo社区有大量免费好用的主题，我一开始冲浪的时候，发现了一个叫coder的主题，感觉逼格满满的\n不过用了一阵之后，发现没有tag功能，而且实际相比说明少了一条黑白分明的线，自己折腾tag又折腾不明白，所以又换了主题。\n挺喜欢，但可惜，coder地址如下:hugo-coder\n换成了中文的主题even，even相比之前的多了标签分类的功能，虽然整体上感觉少了些什么，不过现在也能将就用着，后面有需求再换吧。\n主题的说明都是中文的，使用体验好了不少。\nhugo的even主题地址如下:\nhugo-even\n为博客添加评论 使用了even之后，想着为我的博客添加评论系统，刚好也支持评论，然后就接了一下，用的工具是utteranc\n使用的是github仓库存储博客信息，在utteranc上关联github账号，在config.toml里配置一下owener和repo名称即可接入\n[params.utterances] # https://utteranc.es/ owner = \u0026#34;\u0026#34; # Your GitHub ID repo = \u0026#34;\u0026#34; # The repo to store comments 为博客添加访问统计 使用的是google analytics服务，需要在config.toml里配置googleAnalytics =\u0026quot;\u0026quot;，value是在google统计中获得的一个唯一key\n然后需要添加一个html页面layouts/_internal/google_analytics_async.html，这个页面粘贴从google统计那获取到的脚本，\n最后将这个页面编译进所有的文章页面，even应该是对这个做了支持\nconfig.toml里设置如下值\ngoogleAnalytics = \u0026#34;G-GZV-XX\u0026#34; # G-XXXXXXXX-X layouts/_internal/google_analytics_async.html页面内容\n\u0026lt;!-- Google tag (gtag.js) --\u0026gt; \u0026lt;script async src=\u0026#34;https://www.googletagmanager.com/gtag/js?id=G-GZV-XX\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag(\u0026#39;js\u0026#39;, new Date()); gtag(\u0026#39;config\u0026#39;, \u0026#39;G-GZV-XX\u0026#39;); \u0026lt;/script\u0026gt; even中处理analysis的地方\nthemes/even/layouts/partials/scripts.html \u0026lt;!-- Analytics --\u0026gt; {{- if (in (slice (getenv \u0026#34;HUGO_ENV\u0026#34;) hugo.Environment) \u0026#34;production\u0026#34;) | and .Site.GoogleAnalytics -}} {{ template \u0026#34;_internal/google_analytics_async.html\u0026#34; . }} {{- end -}} 后记 博客更新说明先到这里，后续再补充\n","permalink":"https://blog.thend03.com/posts/history-of-my-blog/","summary":"\u003ch2 id=\"从博客平台到放弃\"\u003e从博客平台到放弃\u003c/h2\u003e\n\u003cp\u003e折腾博客也有不少年了，从最开始的csdn，到博客园，简书，以及开源的hexo，hugo，最终稳定在了Hugo上，也算是不少时间的折腾吧。\u003c/p\u003e\n\u003cp\u003e国内的一些博客平台吧，现在问题都挺多的，csdn就不说了，各种垃圾转发文章，还贴各种广告，贴广告能理解，到处都是广告，严重影响阅读体验，而且垃圾文章特别的多，有时候就一句话一个链接就结束了，特别的恼火。\u003c/p\u003e","title":"我的博客之旅"},{"content":"这就7月了，没想到2023年就这么过去一半了，记录下上半年发生的事，等老了回来回顾一下\nJanuary 东山\u0026amp;西山 22年圣诞左右阳的，恢复了一周，刚好赶上元旦，然后就打算去下苏州的东山和西山岛。\n有一说一，从湖东过去是真的远，倒腾地铁加打车，五号线坐穿了。\n到太湖香山再去打车上东山岛，这会来的不是时候，在东山随便逛了一会，3个人有2个可以免门票，只有我这个大冤种买了60还是70的票。\n冬天也比较冷，而且当地人都阳了没恢复，也没人坐生意，那场面，相当寡淡，景区也没啥好看的，寡淡加寡淡。\n可惜没钱买小car，不然的话自驾估计嘎嘎爽。\n为了赶下午3点的车，饭都没吃几口就走了老长的路去准备坐船了，但是没想到信息有误，3点钟就开船了，痛失坐船的机会。\n然后打车从东山绕路去西山，太难搞了，坐车坐了大概1个半小时才到西山岛，接单过来都要5公里的，搁平时超过2公里都得直接取消了。\n到西山岛都晚上了，更加的寡淡，6点多饭店就没菜了，最后吃了大饭店边上的小菜馆，味道还行吧，就是卫生有点不大好，只能说来都来了，有的吃就不错了。\n不过那个民宿是真的好看啊，如果是春天或者夏天去，应该会更加的好看，落地窗外面就是一个大湖，还有桌椅，可惜冬天太冷了。\n第二天去那个明月湾看了一下，只能说还可以，走路过去的，沿着太湖一直走，虽然有雾，但也很怡然自得，还有一只狗子一直跟着我们一起走，可惜的是没走到明月湾小狗子就掉头回去了。\n在回来的路上吃了还算正经的菜吧，一个网红小馆子，吃了一只土鸡煲，略甜。\n民宿的人说4，5月的时候来比较好，可以摘枇杷之类的，虽然来的不是季节，但也算是上岛上看了一下，差强人意说的就是我们吧。\n吴江温泉 从西山坐船到东山(可算坐上船了)，然后打车去公交站，坐公交回吴江，我们可真的强啊，还中途在越溪下了车，那块有个大学城配套的小商业，去年11月去那边考试的时候，去里面逛过一次。这次故地重游，喝了蜜雪冰城，逛了服装店，好像又去那家美甲店修了指甲，\n怎么着也是相当充实了。\n然后好像是在太湖边上住了一晚吧，打车时滴滴司机说跨年那天晚上人挤人的，非常多的人，吴江这地方真的是难得的出现这么多人，要是选择先在吴江跨年，再去东西山，那估计又是不一样的体验了。\n第二天在吴江逛了一下，下午才去的温泉，不得不说，温泉实在是太舒适了，各个池子里乱窜，就是天太冷了，出来得饱受寒风冲击，尤其考验意志力。\n不过泡温泉终究是舒服的，看，下方有美人鱼出没，在水里游来游去的，可真好看啊。\n彩云之南 一月那另一个值得一提的就是去云南的甜蜜之旅了，在过年之前规划了6，7天的行程，勇闯彩云之南。\n此时，去有风的地方热度已经起来了，为了避免人挤人，所以选择了避开大理，西双版纳等地方。\n规划的行程路线如下\nday1-落地丽江，在丽江住一晚，逛一逛古城 day2-从丽江出发，去走虎跳峡徒步路线，纳西雅阁-半山居徒步，宿半山居 day3-半山居-中虎跳徒步，中虎跳-香格里拉，宿古城附近 day4-上午逛香格里拉，然后下午香格里拉-德钦飞来寺，宿飞来寺 day5-飞来寺看完日出，飞来寺-丽江，丽江-大理地热国，住地热国的帐篷 day6-地热国-大理-昆明，昆明海埂公园看海鸥 day7-昆明-回家 安排了7天的行程，满满当当的，老婆突发奇想，想要去徒步，经过不那么严谨的攻略，选择了纳西雅阁到中虎跳的这一段徒步路线，走完了发现这一段路其实还行，路不算难走，距离适当，而且沿路的风景非常的美，不愧是脑瓜子灵活的老婆，做攻略一等一的棒。\n就是徒步有点费钱，买包买登山鞋登山裤登上外套等装备，2个人花了3400，就这还是收着的情况下，爱好可真费钱啊。\n从飞机往外看，飞机置身于云雾中，非常的美丽，看着下面蜿蜒的金沙江，磅礴大气。\n先看看丽江古城，还是挺好看的，环境优美，而且还大，晚上各种灯光照着，非常的好看。\n第二天就开始高强度的徒步了，前方美图来袭\n![image-20230703220517163](/Users/since/Library/Application Support/typora-user-images/image-20230703220517163.png)\n行走在海拔2200米的悬崖上，下面就是咆哮的金沙江，一边往前看，一边往下看，风景非常的好，而且是好天，光线美丽。第一天的徒步可以说是相当的完美了，背着包走了七个小时，充实，到住的地方，有热水，有热饭，还有电热毯，卧槽，那更幸福了，再对比下半年后的武功山发云界，真的，半山居的条件我哭死。\n我们在半山居墙上留下了我们的痕迹，然后继续出发了。\n第二天从半山居出发到中虎跳，走了4，5个小时，这一段的路风景也不错，路上偶尔会有溪流，还需要翻坡下坡的，挑战极佳。\n唯一不好的事，下午3点的车去香格里拉，不能迟，我俩误判了，下一线天，没想到走了一个多小时，后来又爬天梯上去赶车，最后体力不支，还是花了80块钱被马驮上来的，麻了麻了，小马儿先把我老婆驮上去，到路上之后，再下来驮我，我累的只能手脚并用了，虽然最终赶上了，不过也太累了。\n然后就是坐着中巴到香格里拉，快过年了，冬天，路上也没有多少人，到那6，7点，天都要黑了，香格里拉的海拔是3400米左右，已到我极限，我在那边心脏疯狂跳动，缺氧倒还好，还得是我老婆强，只是稍微缺了点氧。\n在古城附近随便找了家牦牛火锅，120/斤，那肉真的是疯狂的往上招呼，这顿吃的可爽了，吃完又有力气和氧气，走到酒店了。\n这家酒店是在云南住的最好的一次，新酒店，装修非常的好，比较明亮有色彩，设施也都是新的，看着投影仪，喝着送的酥油茶，也很爽了。\n第二天上午去逛了松赞林寺，素有小布达拉宫的美名，在海拔3400米建了那么雄伟的寺，真的厉害，不知道耗费了多少人力物力。\n逛完了松赞林寺，然后我们在独克宗古城里吃了一顿饭，那小鸡火锅和青稞饼真的好吃，青稞饼甜甜的，入口贼香，吃完还想吃的那种。\n下面就是坐车去飞来寺了，一路上在盘山公路上开，弯弯绕绕的，外面就是悬崖峭壁，真的是山路难走，相当危险，行路难。\n在飞来寺住下之后，在饭馆吃了饭，味道还挺好的，重要的是，在海拔3500左右的高原，有热水，有电视，有地暖，真的我哭死，某海拔不到2000米的发云界啥情况啊。。。。\n可惜第二天没能看到日照金山，不过也满足了，毕竟上到了海拔3500米的地方，也是对自己的一次挑战。不过我的极限估计也就在这了，心脏疼的厉害，香格里拉的时候还好，到飞来寺越来越疼，去高海拔的地方要慎重啊姐妹们。\n下山的时候还下雪了，山路艰难，好在司机师傅技术高超，平安把我们带到了丽江，开过了一条又一条险路，穿过了一条又一条隧道，历时8小时到了丽江。\n在丽江吃了一顿下午饭，可惜整体不大行，没有第一天落地时那么好吃。\n至于选择从丽江去地热国，而没有去大理看洱海，那就是此次唯一的失误了，不过没办法，不至于什么都尽善尽美。\n地热国主打温泉和蒙古包，蒙古包还行吧，没那么离谱，不过温泉是真的垃圾，在汤池边上开自助烧烤，看着也不大卫生，池子也不多，水温也不高，真的哪哪都不行啊。\n不过晚上看到了星星，星星真的好多好亮\n最后一天我们从大理来到了昆明，只在小路上看到过一下苍山和洱海，苍山连绵不绝的，虽然不高，但是连绵悠远，也挺好的。\n可惜的是没看上洱海，不过看滇池也是不错的。\n在滇池看到了漫天飞舞，数不清的红嘴海鸥，拿着面包逗弄小鸥子，他们会尝试出其不意的准备从你手里抢食，场面相当的欢乐，沿着骑行步道，上面都是各种游客，沿路都是各种鸥子陪着你。\n夕阳逐渐西下之后，我们打算换一个地方，去斗南花市逛一逛，里面是各种各样的花卉和绿植，二楼是多肉和其他的一些东西。\n不得不感叹，我俩在花市是真的不干任何和花有关的事，在一楼买了鲜花皂，在二楼买了鲜花饼和白茶，真的纯纯大冤种了属于是。\n在住的酒店附近吃了路边的米线，那个米线配麻辣鸡，绝了，真的好吃，我俩忍不住采购了20盒麻辣鸡，临走的时候，还在水果店采购了一箱车厘子回去，真的是满载而归。\n最后一天，迎着夕阳，坐上了昆明回家的飞机，云南下次见。\nFebruary 兔年 二月就正式进入了兔年，到了属于我俩的年份，龟兔永流传。兔子你好，我是龟龟，听到请回答。\n心脏哎呦 由于新冠没好利索，在云南高海拔地区又缺氧，回来之后总觉得心脏疼，于是二月的周末就在去医院看心脏中过去了，太难了。\n科二 中间还穿插着练科二，科二真是老大难了。\n情人节 情人节感谢老婆送的花，我的slogan是:只要老婆敢送花，天天都是情人节\n优雅\n佘山 月末去爬了海拔72米的佘山，不愧是上海第一高山，给我俩累的不要不要的，在佘山附近吃的三黄鸡不错，真的好吃\nMarch 三四五 三月一起听了老男人的巡演，三四五为主题的演唱会，三四五是指三四五线小城市，为了听老男人的巡演，我和她专门去了安庆，在某个练完车的周日，我和老婆一起到了安庆，在安庆一通乱逛，然后发现了安庆出租车比乘客多，不愧是安庆。\n老男人的体力是真的好，连唱2个小时都不带歇的，相当佩服，新裤子2个小时，中间还至少划水了2个小时呢。\n莫愁湖 第二天去南京看牙，在南京那么多年，都没逛过莫愁湖，趁着这次机会顺到逛了，万万没想到啊，提前预留了几个小时，都能整的改签的，我俩这磨蹭的，服了。\n驾照到手 3月最值得开心的就是老婆历经N次补考科二之后，终于拿到驾照了，为老婆鼓掌。\n马拉松高手 而且老婆参加了2次苏州马拉松，一次是3月12日10.5公里的，一次是3月26号21公里的，2次都完整的跑下来了，平时不怎么跑步的人，能有这份体力和毅力，老婆真棒，佩服的紧。\n樱花\u0026amp;植物园与摩天轮 三月还一起去南京看了樱花，逛了植物园，进城到百家湖喝了酒，坐了摩天轮，3月也充满了奔波和喜悦哦，虽然在植物园闹的不愉快，不过老婆要原谅我哦，是我能力不够又控制不好情绪哦，爱你摸摸大。\nApril 陪着找工作 四月相对来说比较寡淡，不过也还可以了，四月初陪着老婆到处考试，去参加了汾湖管委会的考试，中新的考试，汾湖是真的远啊，从湖东过去得开40多公里，还好有周哥，不然都不知道怎么办了，阿门。\n中新那可就太牛逼了，独墅湖一枝花，俯瞰独墅湖，毗邻独墅湖医院，高教区核心中的核心，非常之羡慕，四月因为鼻炎去了几趟医院，严重怀疑新冠导致我雪上加霜，阿门。\n五子棋高手 夹杂着2个五子棋高手的战斗\n东沙湖 然后去了一次东沙湖，不得不说，东沙湖这个景确实的美，景美人更美噢\n徒步灵白线 4月另一个徒步活动进行时，徒步灵白线，从灵岩山到白马涧，路程也不长，大概7，8个小时的路程吧，这次3个人出发。\n灵岩山光秃秃的，不过到白马涧的路段还可以，不长，尤其是白马涧，那个景真的非常的好看，藏在深山之下，包裹在绿树之中，湖边温度略低，为热天吸收了很多热量。\n在白马涧偶遇我本家:龟仙人\n白马涧风景确实好看的很，走到最后苦尽甘来的感觉。\n灌篮高手 下面就是去看了灌篮高手，不得不说，确实热血和好看，后面又补了动漫，高中生打篮球的热血喷涌而出，教练我想打篮球。\n如果早20年能看到这个动漫，我会不会爱上打篮球呢，这个确实说不好，不过打篮球的，5个有4个挂科挂完了，真的离谱。\n另外好的作品会穿越时间，比如灌篮高手，20年经久不息。\n四月就如此寡淡的过去了，其他的周末没啥可做的了\nMay 回家 时间来到了五月，五月阴差阳错就回家了，本来没打算回家的，结果各种机缘巧合，必须得回家去了，缘分呐。\n到家吃上了丈母娘做的饭，徐瑞长胖是有原因的，顿顿这样吃是真的顶不住。\n家里绿油油的小麦，和小猫咪，门口2，3只小鸡，果然离工作越远，精神就越放松\n上课 然后五月的其他时间就是奔波在2个培训班上了，周六顺达上烹饪课，周日去相城上收纳课，五月周末拉满，搞笑的是，这俩课一个取消了，一个没时间去考试，真真是累了自己，幸福他人。\n奥莱 有一次去打卡了苏州的奥莱，挺大的，但是人也不大多\n高级的法式公主裙\n看看这霸气的骑车姿势，服了。\n骑行 有一个周末逃课去参加了社区组织的骑行活动，活动挺有意义的，就是那个车不大行，太破了，骑着费劲。\n六月 happy birthday 时间来到了六月，今年宝子过了阳历的生日，虽然今年没有准备丰盛的礼物，但是也给宝子准备了相当的浪漫，一起喝酒吃提拉米苏，一起吃面，买了一支花送给了宝子，一起实现了国金上看金鸡湖的愿望，虽然有点费钱，但是也算是不一样的，别样的体验了。\n感谢宝子带我住高档酒店哦，虽然高档酒店的酒吧真的垃圾，只有白开水最好喝。\n看，美丽的天使出没\n酒量不行却强行喝的酒醉的蝴蝶\n真是美好充实的生日啊，下年再和宝子一起过难忘的生日\n音乐节 2个月之前订的音乐节，在6月也兑现了，虽然这次体验不大好，全程下雨，但是也算是一种别样的体验了，穿着一次性雨衣，伞被没收了，然后在雨中听着歌，老刺激了，而且人还挺多的，真的牛。\n不得不说，朴树不仅歌唱的好，人还暖，还内向，爱了爱了\n不得不说，jmq真的是骚里骚气的\n过夏准备 为了过夏，买了一个小电风扇，还自己组装了一下。\n徒步武功山 六月的重头戏就是去武功山徒步了，感受端午，又买不到票，只能特种兵一下了，高强度出行，真的费劲啊，感谢老婆的全程陪伴，一起拿下武功山。\n详情请看:徒步武功山\n下半年 然后回来修整一下，上半年就结束了，总的来说，上半年还是经历了不少事的，虽然也有争吵，但是整体感情逐步向好，生活上努力，但是工作上进展不大，下半年主要突破下工作吧，换个新环境，或者自己能研究点内容出来，阿门。\n下半年见。\n2023年7月4日23点33分\n","permalink":"https://blog.thend03.com/posts/half-of-2023/","summary":"\u003cp\u003e这就7月了，没想到2023年就这么过去一半了，记录下上半年发生的事，等老了回来回顾一下\u003c/p\u003e\n\u003ch2 id=\"january\"\u003eJanuary\u003c/h2\u003e\n\u003ch3 id=\"东山西山\"\u003e东山\u0026amp;西山\u003c/h3\u003e\n\u003cp\u003e22年圣诞左右阳的，恢复了一周，刚好赶上元旦，然后就打算去下苏州的东山和西山岛。\u003c/p\u003e\n\u003cp\u003e有一说一，从湖东过去是真的远，倒腾地铁加打车，五号线坐穿了。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/thend03/mdPic/picGo/202307032139740.png\" alt=\"image-20230703213934709\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e到太湖香山再去打车上东山岛，这会来的不是时候，在东山随便逛了一会，3个人有2个可以免门票，只有我这个大冤种买了60还是70的票。\u003c/p\u003e","title":"2023年上半年"},{"content":"美好端午，美好出行，直奔武功山。\n很早之前不知道在哪看到了武功山，模糊的念头经过时间的洗礼之后，变成了线上，今年端午假期，准备去勇闯武功山。\n不过运气不大好，端午3天一直在下雨，不过来都来了，就这样吧。\n在6月22号凌晨2点，我带着我亲爱的老婆一起坐上了出发前往萍乡北的高铁。\n特种兵式出行 今年五一出现了一个词: 特种兵式出行，讲究一个折磨自己，我们的端午行程也是，第一天凌晨2点出发，6点到萍乡，然后9点就正式从反穿起点开始了武功山徒步之旅。\n然后2天冒雨徒步24公里，第3天23点到虹桥，凌晨2点睡觉，真的是一个精力充沛，活力无限，代价就是假期结束跟死猪一样，毫无精力了。\n真的之前从未有过如此行程紧张，强度如此之大的行程，快28的人了，带着娇小的老婆，背着登山包，一步一步迈向海拔2000米的金顶，罪过罪过。\n行程规划 武功山一共有4条徒步线路，本次我老婆选的是反穿路线，然后徒步安排了2天，山顶安排了半天，然后剩下半天收拾收拾准备回去。\n这次的不足是没有充分准备防雨设备，本来看天气预报有雨，但是没重视起来，防水准备做的不足，导致徒步的时候非常的艰难。\n反穿路线是从龙山村出发，经过发云界，然后好汉坡，绝望坡，吊马庄，金顶\n一般的攻略是第一天到好汉坡，第二天从好汉坡出发到金顶，不过我们的安排是第一天歇在发云界，第二天从发云界出发到金顶。\n龙山村-发云界 我们是从龙山村村口出发的，其实正式的起点应该是龙发山庄，可能少给了司机10块钱，然后就把我们丢到了村口，多走了2公里路。\n村头好多小狗子，也挺好看的。\n这一天还在下雨，几乎都是在雨中走的，虽然下雨，但是人还是很多，陆陆续续有很多的人在往山上走，雨也阻挡不了大家徒步的热情。\n再此吐槽一下，虽然每人收了10块钱卫生费，但是山上的环境还是令人担忧，到处都是水瓶子，不知道是为了创收，还是为了减少垃圾制造。\n有年轻的，也有10来岁的小娃子，还有头发花白的老大爷，我们俩互相扶着，顶着雨，一步步的往上走，披着在山下买的一次性雨衣，穿着一次性的鞋套，别说这鞋套虽然便宜，但是还挺防滑的，可惜就是买少了，我的鞋穿了几个小时就破了。\n我们一边走，一边淋这雨，从未有过的船新体验，每走一会，看到一个小木屋就会去躲躲雨，每个木屋的帘子下都挤满了人，上一波人走了立马挤进去躲一躲，开心的像个100斤的孩子。\n下雨泥路不大好走，不大一会我的鞋套就坏了，雪上加霜，后来就鞋上就是泥和水混合，彻底g了，相当艰难的第一天\n山上也有卖水卖吃的，不过都比较贵，没有路，都是人工抬上去的，没带好补给的话只能忍痛买一点了。\n第一天从龙山村到发云界，走了大概9公里。\n从早上9点正式出发，由于下雨，躲雨也比较多，到达发云界的时候差不多是下午4，5点了，发云界那边也没有公路，物资匮乏，洗澡水也不多，生活真的非常的艰难，好歹在山上吃上了一顿比较贵的饭之后，我们终于可以躺下休息了。\n好久没睡过这么早了，8:30就睡了，不过住宿环境是相当的差劲，在山里，有的住就不错了，就这样吧。\n然后我们就伴着雨声入睡了。\n发云界-金顶 第2天的路程相比第一天就更加的艰难了，第一天基本上是登山爬坡，大部分是石头路，小部分是泥路，全程是树木覆盖，这段路大概15公里。\n到了发云界就变了，已经到了相对海拔较高的地方了。然后就到了武功山的特色，高空草甸，全都是草，由于下雨，然后路非常的泥泞，还很滑，路就变的非常的不好走了，真的是艰难的一天。\n第2天从发云界出发，途径风车口，千丈岩，好汉坡，绝望坡，吊马庄，云之海(金顶下面)。\n今天白天的雨比较小，但是好汉坡那一块，一会上，一会下的，而且也是草甸+泥路，晴天的时候，被各个山头的绿草包裹着，会非常的养眼和舒适。但是下雨天就比较难顶了，上下的，泥路非常的滑，为了防滑，只能走草上，然后裤子就湿透了，一环扣一环的打击我俩，真的太难了。\n这段路程比较开心的是，在千丈岩兄弟客栈遇到了一个人很好的老板，我们在住的地方出发的时候比较晚了，客栈都没水了，他们也不烧了，然后我们就抱着碰运气的态度遇到一个客栈问一下，其他客栈都没水了，兄弟客栈的老板说热水免费加，怎么会热水收费，在这个泥泞的雨天，我俩瞬间被暖到了，然后准备在他家消费一下，一碗面20，而且还有个蛋，找老板说再加一个蛋，也没再收钱，真的，在山上吃的最香的一碗面了。\n对比下金羊客栈，早饭一碗粥20，其实就是水泡饭，根本不是熬出来的，一碗面20，清水面啥都没有，虽然山里条件苦，但是这也太让人难受了。\n在兄弟客栈还遇到了2个云南的姐妹，带的吃的太多了，给了我们好多吃的，鲜花饼和小面包，还给了我们100块现金，girls help girls，感谢姐妹的嗞疵。\n从发云界出发，走走停停歇歇，过了好汉坡都2点了，还有一个绝望坡等着我们攀，绝望坡落差360米，从1360到1710米，没什么支撑点，全程爬了低阶版峭壁，非常的难走，而且爬完峭壁之后还有顶要上，转过一个弯之后又是一个弯，而且还是泥路，只能说还好是上坡，不然这下雨天下坡，真的更加的绝望。\n我的宝子真的太强了，和我一起安全的爬过了绝望坡，一步一步的挑战了绝望坡，感谢我的宝子和我一起收获这段绝望的爬坡经历。\n然后绝望坡到吊马桩这段路，置身于云雾之中，包围在草甸之中，下着小雨，虽然感觉不大好，但也算是神奇的体验了。从路上往下面的山头看，云雾缭绕，偶尔雾散，看着若隐若现然后逐步清晰的松树，真的非常的美丽，一颗松数屹立在山头，非常的突出和坚韧不拔。\n绝望坡到吊马桩这段路算是反穿的精华路线，也算是弥补了一点点下雨天艰难困苦吧。\n这段路最后又是在雨中走的，那会都5点多了，2个小时得赶到金顶，然后冒雨下坡，往吊马桩去，雨逐渐下大了，然后身上又湿了。\n最后到吊马桩的时候，又开始了爬台阶了，虽然是一级级台阶，比泥路好走一点，但是完全看不到头，非常的绝望，那会体力已经很不好了，我只能鼓励我的宝子快到了，一级一级的上，走了一个多小时，到了一个头，然后又给你绝望一击，拐个弯又是看不到头的台阶，遇到下来的人就问一下还有多远，然后二十分钟复二十分钟，非常的绝望。\n最终在7点半左右到了住的地方，真的无奈和痛苦。\n好在住的地方可以好好的吃一顿饭，这是这2天最丰富的一顿饭，浑身湿透了，在那坐着吃饭，豆腐，汤，酸菜鱼，腐竹，吃的非常的香。\n住宿从180的小帐篷，升级成了星空帐篷，果然想要住的好，只有一个办法，加钱。\n然后洗了澡，睡了一个还算安稳的觉。第3天就是出发去金顶了，距离金顶还有20分钟的路要走，还好住宿定在了云之海。\n这是第2天早上在云之海拍的，也非常的好看，要是天气好一点，那会更加的美丽。\n然后收拾好行李，朝金顶进发，不好的是，走着走着又下雨了，而且越下越大，到金顶后，仍然无法看到更远的地方。\n不过好歹经过2天的努力，成功登顶了，路程大概24公里，第一天走了大概9公里，第2天走了大概15公里。\n金顶海拔1918.3米，比黄山顶还要高一些，也算是我和宝子一起爬的海拔最高的山了(虎跳峡不算，自带2200米的海拔)。\n匆匆在金顶逗留了一会，就准备下山了，下山我们准备坐索道下，武功山的索道分为2级，二级索道是金顶到中庵，一级索道是中庵到石鼓寺。从金顶到二级索道，要走20分钟，虽然都是台阶，但是下着雨，下山也比较伤膝盖，这段景色一般。\n下了二级索道之后，需要去中庵索道入口，这段景色比较好，一会台阶，一会栈道的，木质的栈道沿着山壁而建，悬浮在空中，对于我这种恐高症来说，真的是绝望。但是宝子这种不恐高的乐观分子，可以站在突出来的玻璃栈道远望，真的强。\n要去坐索道，还得过一个凌空的木桥，走在上面吓死我了，我只敢站在中间慢慢晃，桥外就是千米深空。这个桥叫幸运桥，走在上面整个人都幸运了呢。\n然后乘坐一级索道就到石鼓寺了，这里全部是以特种兵为主题的，特种兵能量补给，特种兵休息区，特种兵票务，想想我们这几天也真的是特种兵出行了。\n休息一会，坐接驳车去市区逛一逛，准备结束行程，晚23点落地虹桥，2点苏州睡觉，阿门，真的高强度出行。\n萍乡市区不大，为了吃午饭，就去了当地的润达广场，走过去的，不到1公里的路，餐馆很少见，随处可见的是足疗店，麻将机，成人用品店，萍乡人民的生活可真丰富呀。\n然后在润达广场逛了2个小时，买了椰子水，吃了花蝴蝶，对了，不要相信能吃辣地区的微辣，不然会很那个伤菊花和胃。\n这里便宜也是真的便宜，到哪都得来一杯蜜雪冰城，然后晚餐以一顿成都麻辣烫结束。\n其他 三天大雨中雨小雨，能坚持走完，我觉得首先是宝子的不屈的意志，支撑着她能走完这段路，其次是人手2根登山杖，可以说没有登山杖，在雨天爬武功山寸步难行，路本来就差，还下雨，最后是其他的徒步装备。\n有2个不足的是，由于我没假，所以行程安排的比较累也比较赶，感谢宝子的支持理解和陪伴，然后是防雨做的不够到位，低估了下雨的力量，开始之后就没一件干的，下次出门一定要做好防雨措施。\n虽然下雨天没有感受到晴天武功山的星空和一望千里的高空草甸，但也算是一种别样的体验吧。\n这次的武功山之旅就到这里，我们下次旅行再会。\nLove you, fayy!\n","permalink":"https://blog.thend03.com/posts/hiking-wugong-mountain/","summary":"\u003cp\u003e美好端午，美好出行，直奔武功山。\u003c/p\u003e\n\u003cp\u003e很早之前不知道在哪看到了武功山，模糊的念头经过时间的洗礼之后，变成了线上，今年端午假期，准备去勇闯武功山。\u003c/p\u003e\n\u003cp\u003e不过运气不大好，端午3天一直在下雨，不过来都来了，就这样吧。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.jsdelivr.net/gh/thend03/mdPic/picGo/202306252228674.png\" alt=\"image-20230625222827641\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e在6月22号凌晨2点，我带着我亲爱的老婆一起坐上了出发前往萍乡北的高铁。\u003c/p\u003e\n\u003ch2 id=\"特种兵式出行\"\u003e特种兵式出行\u003c/h2\u003e\n\u003cp\u003e今年五一出现了一个词: 特种兵式出行，讲究一个折磨自己，我们的端午行程也是，第一天凌晨2点出发，6点到萍乡，然后9点就正式从反穿起点开始了武功山徒步之旅。\u003c/p\u003e","title":"徒步武功山"},{"content":"前置条件 mac上使用brew安装rust\nbrew install rust 安装好之后使用命令查看rustc版本和cargo版本\nrustc --version 创建一个hello.rs\n// This is a comment // hello.rs // main function fn main() { // Print text to the console println!(\u0026#34;Hello World!\u0026#34;); } 使用rustc编译hello.rs\nrustc hello.rs 然后执行编译好的二进制文件\n./hello idea中使用rust 安装插件 首先需要安装1个插件Intelligent Rust,使用这个插件可以实现语法高亮，debug，内置测试模块等\n在插件市场搜索rust，安装之后重启idea\n项目结构 然后rust项目整体结构如下，需要注意的是src下需要有main.rs或者lib的rs，不然编译会报错\n我一开始的src下只有一个hello.rs，编译就报了如下错，需要在Cargo.toml里配置 [[bin]]或者[lib]才能编译运行\nsince@fengchuangdeMacBook-Pro rust-test % cargo build error: failed to parse manifest at `/Users/since/git/rust-test/Cargo.toml` Caused by: no targets specified in the manifest either src/lib.rs, src/main.rs, a [lib] section, or [[bin]] section must be present since@fengchuangdeMacBook-Pro rust-test % cargo build error: failed to parse manifest at `/Users/since/git/rust-test/Cargo.toml` Caused by: no targets specified in the manifest either src/lib.rs, src/main.rs, a [lib] section, or [[bin]] section must be present 运行 运行main函数，执行debug，如果没有debug库会提示先下载\n传入命令行参数 不加额外的参数, command是这样\nrun --package rust-test --bin rust-test 如果希望可以传入命令行参数的话，可以在command处设置arg，有一个注意点就是如果想传入命令行参数，需要加一个\u0026ndash;，然后在\u0026ndash;arg1或者-a这样传入参数\nrun --package rust-test --bin rust-test -- -a eat -b san 运行输出结果如下\n附录 贴一下对应的文件内容\nmain.rs\nuse clap::{Arg, Command}; fn main() { println!(\u0026#34;Hello World!\u0026#34;); let matches = Command::new(\u0026#34;rust-test程序\u0026#34;) .version(\u0026#34;0.1.0\u0026#34;) .author(\u0026#34;since\u0026#34;) .about(\u0026#34;rust-test程序\u0026#34;) .arg(Arg::new(\u0026#34;apple\u0026#34;) .short(\u0026#39;a\u0026#39;) .long(\u0026#34;apple\u0026#34;) .takes_value(true) .help(\u0026#34;apple\u0026#34;)) .arg(Arg::new(\u0026#34;bag\u0026#34;) .short(\u0026#39;b\u0026#39;) .long(\u0026#34;bag\u0026#34;) .takes_value(true) .help(\u0026#34;bag\u0026#34;)) .get_matches(); let apple = matches.value_of(\u0026#34;apple\u0026#34;).unwrap_or(\u0026#34;aaa\u0026#34;); let bag = matches.value_of(\u0026#34;bag\u0026#34;).unwrap_or(\u0026#34;bbb\u0026#34;); println!(\u0026#34;arg1: {}, arg2: {}\u0026#34;, apple, bag) } Cargo.toml\n[package] name = \u0026#34;rust-test\u0026#34; version = \u0026#34;0.1.0\u0026#34; edition = \u0026#34;2021\u0026#34; [dependencies] clap = { version = \u0026#34;3.0.13\u0026#34;, features = [\u0026#34;derive\u0026#34;] } [build] # 设定默认target # target = \u0026#34;x86_64-unknown-linux-musl\u0026#34; [target.x86_64-unknown-linux-musl] linker = \u0026#34;x86_64-linux-musl-gcc\u0026#34; rustflags = [\u0026#34;-C\u0026#34;, \u0026#34;link-arg=-Wl,-undefined,dynamic_lookup\u0026#34;] 参考链接 插件quick-start文档\nhttps://plugins.jetbrains.com/plugin/8182-rust/docs/rust-quick-start.html\n插件debug文档\nhttps://plugins.jetbrains.com/plugin/8182-rust/docs/rust-debugging.html\n","permalink":"https://blog.thend03.com/posts/idea%E4%B8%AD%E5%BC%80%E5%8F%91rust/","summary":"\u003ch2 id=\"前置条件\"\u003e前置条件\u003c/h2\u003e\n\u003cp\u003emac上使用brew安装rust\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebrew install rust\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e安装好之后使用命令查看rustc版本和cargo版本\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erustc --version\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e创建一个hello.rs\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e// This is a comment\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e// hello.rs\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e// main function\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efn main() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    // Print text to the console\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println!(\u0026#34;Hello World!\u0026#34;);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e使用rustc编译hello.rs\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erustc hello.rs\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然后执行编译好的二进制文件\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e./hello\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"idea中使用rust\"\u003eidea中使用rust\u003c/h2\u003e\n\u003ch3 id=\"安装插件\"\u003e安装插件\u003c/h3\u003e\n\u003cp\u003e首先需要安装1个插件Intelligent Rust,使用这个插件可以实现语法高亮，debug，内置测试模块等\u003c/p\u003e","title":"idea中开发rust"},{"content":"感想 一个新的东西出来，如何快速迭代，快速验证一些想法真的很重要。\n基于chatgpt做的尝试 chatgpt从去年开始开放注册以来，没人会想到给AI领域带来这么大的热潮。今年2，3月正式开放注册以后，短短1，2个月，注册用户就过亿了。问答式的聊天机器人，可以按照固定的模板和套路回答问题，对一些行业和领域带来了新的挑战。\n账号 首先要使用openai的服务(chatgpt基于openai账号)，由于一开始openai就限制大陆用户使用，所以要想用上chatgpt，得需要一个邮箱用于账号注册，一个国外的手机号用于短信接码认证，还要有一个稳定的vps，可以翻墙，代理节点最好是选美国。\n我自己由于怕麻烦，很久之后才尝试去注册openai账号，那会chatgpt热度正盛，接码平台的手机号都经常校验不通过，我也是试了好几个手机号才注册上了一个号，没多久，账号就被封了，申诉也无果，不知道触发了什么封控策略。\n后来只能又继续注册了一个，注册账号还是得用接码平台，注册过程中我试了2个接码平台，有一个可以稳定运行，另一个不行。\nhttps://sms-activate.org/ ，这个可以稳定接码，国家选择泰国 https://sms.qisms.com/index， 这个openai服务不可用了，后面等有其他的账号注册需求再试一下 实际使用下来，还是sms-active好使，这个一美元起充，一美元选择泰国的话可以接码2次，也就是可以用来注册2个账号。\n账号注册自动化 openai账号注册还是挺麻烦的，需要翻墙，需要cloudflare人机认证，需要国外的手机号接码。\n人工注册的话，速度太慢了，一个小时注册不了几个号，这样就没法起量。\n不知道早期那批卖账号的是怎么实现自动化注册账号的。\n套壳工具 由于chatgpt的网页端对于免费账号有各种限制，而且需要稳定的梯子，所以出现了很多的套壳项目，其中几个我用过的\nhttps://github.com/Chanzhaoyu/chatgpt-web , 基于access_token访问的模式，代理了官方页面，很好用，可惜很快这种模式就被禁掉了 https://github.com/lencx/ChatGPT ，chatgpt桌面客户端，我的是mac的，体验了一下不是那么丝滑，放弃 https://github.com/pengzhile/pandora ，命令行交互模式，支持web访问，我用了web模式，目前使用的主力 https://github.com/ConnectAI-E/Feishu-OpenAI ，飞书企业应用，可以在飞书上和chatgpt聊天，使用api https://github.com/ConnectAI-E/Dingtalk-OpenAI ，钉钉企业应用，可以在钉钉上和chatgpt聊天，使用api https://github.com/fanchunke/chatgpt-wecom ,接入企业微信，可以在企业微信上和chatgpt聊天，使用api 以上的套壳工具就是我这几个月来使用的一些套壳工具，钉钉/飞书/企业微信这些适合给没有翻墙和动手能力的人用，可以在日常办公软件中直接聊天，需要一定的动手能力。\n由于套壳需要一堆的前端知识，我对前端一窍不通，所以套壳开发放弃，不是我能做的。\n不过套壳工具究竟能产生多大的价值不大能理解，我感觉这些套壳工具对我最大的价值来说，就是session不会断，官网的会话，免费账号过一会就会断，需要重新刷新才行。\n另外尝试卖服务给别人，别人可以使用我的企业账号，在飞书/钉钉/企业微信里使用chatgpt，目前只建了星球，还没动手实操，这个能带来多少收益，也不可知。\n导航 另外一个够的着的就是导航网站，导航网站上线也慢慢腾腾的，在小北的文章里看到一些新的热点出现，有哪些机会\n文章里列举了4项\nAI相关的股票，这个受限于没有本金，也没有钱，放弃 AI导航网站，做AI相关网站的导航，当时文章贴了一个导航站，做的挺全面的，这个是能做的 直接卖货，这个不属于货物，没法交易 做周边的服务或者培训，风生水起的各种chagpt星球，以及各种chatgpt教程，工具，培训属于苦力活，需要持续服务 这4点，股票来说，依靠热点和风口，一些蹭概念的股票会涨一波，不过不要做韭菜，要及时出手\n导航是技术能力内可以做的，要开发的东西不多，可以基于github开源的，也可以使用wordpress的导航模板，就是付费的，不过付费的确实好使，不过导航在logo上花了太多时间了，要找到适配github开源导航的稳定的logo生成器。\n周边工具，将chatgpt集成，比如集成到飞书/钉钉/企业微信里，不过这个是个长久的服务，要保证服务稳定，受限于openai的政策\n培训的话，推广chatgpt星球，最终是一地鸡毛，不可持续，而且我自己没有那么多流量，没法割韭菜。\n成果 chatgpt方面自己折腾的比较多，唯一的成果是上线了自己的导航站，还不完善，需要再宣传\n还有接入了企业微信/飞书/钉钉，这个目前自己用着还行，不知道能不能把服务卖给别人\n未来的方向 未来还是要完善自己的导航网站，争取解决所有的问题，下面再要做导航的话，直接复用模板，往里填内容就好了。\n先解决logo问题，然后内容自己收集或者抄别人的内容\n服务去小红薯发帖看能不能引流一下。\n再尝试一下AI画图方面的内容\nmd和sd看看能不能吸一波流量\n完善导航网站 账号注册自动化 账号注册教程 ai画图 接入服务引流 研究下账号权限支付问题 附录 最后贴一下我自己的导航网站\nhttps://ai-nav.thend03.com/\n","permalink":"https://blog.thend03.com/posts/search-chatgpt/","summary":"\u003ch2 id=\"感想\"\u003e感想\u003c/h2\u003e\n\u003cp\u003e一个新的东西出来，如何快速迭代，快速验证一些想法真的很重要。\u003c/p\u003e\n\u003ch2 id=\"基于chatgpt做的尝试\"\u003e基于chatgpt做的尝试\u003c/h2\u003e\n\u003cp\u003echatgpt从去年开始开放注册以来，没人会想到给AI领域带来这么大的热潮。今年2，3月正式开放注册以后，短短1，2个月，注册用户就过亿了。问答式的聊天机器人，可以按照固定的模板和套路回答问题，对一些行业和领域带来了新的挑战。\u003c/p\u003e","title":"折腾chatgpt"},{"content":"clickhouse中有时候过期partition不能自动删除，需要人工干预，手动删除过期的partition,以释放磁盘。 由于partition不支持条件范围删除，所以写了一个shell脚本，循环删除clickhouse集群中的所有分片的过期partition。\n注意事项 删除partition的操作不可逆，即执行之后数据删除之后不可恢，执行脚本之前一定要验证好，不要误删数据以免造成故障。\n脚本 脚本内容如下\n#clickHouse 集群连接参数 password=\u0026#34;ck_pwd\u0026#34; cluster=\u0026#34;ck_cluster\u0026#34; # 数据库和表名称 database=\u0026#34;your_db\u0026#34; table=\u0026#34;your_table\u0026#34; # 要删除的分区的日期范围 end_date=\u0026#34;20230423\u0026#34; # 获取所有的host hosts=$(clickhouse-client --password=\u0026#34;$password\u0026#34; --query=\u0026#34;SELECT host_name FROM system.clusters WHERE cluster =\u0026#39;$cluster\u0026#39;\u0026#34;) # 循环遍历 ClickHouse 集群中的所有分片，并执行 SQL 语句 while read -r host; do echo \u0026#34;Executing SQL on host: $host\u0026#34; #clickhouse-client --host=\u0026#34;$host\u0026#34; --password=\u0026#34;$password\u0026#34; --query=\u0026#34;$sql\u0026#34; partitions=$(clickhouse-client --host=\u0026#34;$host\u0026#34; --password=\u0026#34;$password\u0026#34; --query \u0026#34;SELECT DISTINCT partition FROM system.parts WHERE database=\u0026#39;$database\u0026#39; AND table=\u0026#39;$table\u0026#39; AND partition \u0026lt; \u0026#39;$end_date\u0026#39;\u0026#34;) while read -r partition; do drop_sql=\u0026#34;ALTER TABLE $database.$table DROP PARTITION \u0026#39;$partition\u0026#39;\u0026#34; echo \u0026#34;executing drop, host:$host, partition:$partition, drop_sql:$drop_sql\u0026#34; if [[ -z \u0026#34;$partition\u0026#34; ]]; then echo \u0026#34;partitopn null, continue\u0026#34; continue fi clickhouse-client --host=\u0026#34;$host\u0026#34; --password=\u0026#34;$password\u0026#34; --query=\u0026#34;$drop_sql\u0026#34; done \u0026lt;\u0026lt;\u0026lt; \u0026#34;$partitions\u0026#34; done \u0026lt;\u0026lt;\u0026lt; \u0026#34;$hosts\u0026#34; echo \u0026#34;done.\u0026#34; 如上的脚本是删除指定数据库的指定表的过期partition,shell中的一些字段解释如下\npasssword: ck节点的密码，我的ck集群的所有分片/副本的密码是一致的 cluster: ck集群的名称，通过集群名称查询集群下的所有分片和副本的host database: 要删除的数据库 table: 要删除的具体的表 end_date: 删除end_date之前的partition，我的表的partition格式是yyyyMMdd 首先查询system.clusters表，获得集群里的所有节点的host 然后遍历所有的host，挨个删除本地表上的过期的partition,小于end_date的partition全部删除\n","permalink":"https://blog.thend03.com/posts/delete-clickhouse-partition/","summary":"\u003cp\u003eclickhouse中有时候过期partition不能自动删除，需要人工干预，手动删除过期的partition,以释放磁盘。\n由于partition不支持条件范围删除，所以写了一个shell脚本，循环删除clickhouse集群中的所有分片的过期partition。\u003c/p\u003e\n\u003ch2 id=\"注意事项\"\u003e注意事项\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e删除partition的操作不可逆，即执行之后数据删除之后不可恢，执行脚本之前一定要验证好，不要误删数据以免造成故障。\u003c/strong\u003e\u003c/p\u003e","title":"clickhouse删除partition"},{"content":"背景 推送业务需要，需要由后台将消息通过apns(苹果统一推送服务)下发到用户的手机上，推送系统通知给用户。\n后台架构 Java服务端使用了一个开源的库，使用这个开源的库将消息推送给apns。使用的p8证书，token鉴权方式。\n使用的ios推送库git地址如下: https://github.com/jchambers/pushy\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.eatthepath\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;pushy\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.14.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; apns client构建伪代码如下\n//伪代码，实际需要p8证书文件转byte数组 byte[] certBytes = new byte[]{}; //伪代码，自己的p8证书的 teamId String apnsTeamId = \u0026#34;teamId\u0026#34;; //伪代码, 自己的p8证书的keyId String apnsKeyId = \u0026#34;keyId\u0026#34; //event_loop_group自己按需构建 EventLoopGroup EVENT_LOOP_GROUP = new NioEventLoopGroup(8, ConsumerTreadFactoryUtil.createPushFactory(\u0026#34;default\u0026#34;, \u0026#34;all\u0026#34;)); ApnsClient apnsClient = new ApnsClientBuilder() .setApnsServer(apnsHost) .setSigningKey(ApnsSigningKey.loadFromInputStream(new ByteArrayInputStream(certBytes), apnsTeamId, apnsKeyId)) .setEventLoopGroup(EVENT_LOOP_GROUP).setConcurrentConnections(16) .build(); 问题 测试环境运行了一段时间之后，再次推送ios消息之后，报错了，错误信息就是InvalidProviderToken。\n先说结论，出现这个错误，就是teamId/keyId/bundleId/p8证书,这几个值对不上。 几个注意点\n客户端生成regId的时候，使用的bundleId要和服务端推送使用的bundleId一致 teamId和keyId不要填反了 证书要使用正确 我这边的问题是teamId/keyId/bundleId是正确的，就是证书选错了，我这边有2个证书，一个是Auth_xx.p8，一个是Auth_xx1.p8。我实际要用的是Auth_xx.p8，结果服务端上传的时候，用了Auth_xx1.p8证书。\n其中Auth_xx.p8，xx就是证书的keyId.\n搜索一番之后，发现我填的keyId和证书的文件名称对不上，修改之后就正常了。 参考 https://github.com/node-apn/node-apn/issues/477#issuecomment-263531121 https://github.com/jchambers/pushy/discussions/915\n","permalink":"https://blog.thend03.com/posts/apns-push-failed/","summary":"\u003ch2 id=\"背景\"\u003e背景\u003c/h2\u003e\n\u003cp\u003e推送业务需要，需要由后台将消息通过apns(苹果统一推送服务)下发到用户的手机上，推送系统通知给用户。\u003c/p\u003e\n\u003ch2 id=\"后台架构\"\u003e后台架构\u003c/h2\u003e\n\u003cp\u003eJava服务端使用了一个开源的库，使用这个开源的库将消息推送给apns。使用的p8证书，token鉴权方式。\u003c/p\u003e\n\u003cp\u003e使用的ios推送库git地址如下:\n\u003ca href=\"https://github.com/jchambers/pushy\"\u003ehttps://github.com/jchambers/pushy\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;dependency\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         \u0026lt;groupId\u0026gt;com.eatthepath\u0026lt;/groupId\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         \u0026lt;artifactId\u0026gt;pushy\u0026lt;/artifactId\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u0026lt;version\u0026gt;0.14.2\u0026lt;/version\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/dependency\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eapns client构建伪代码如下\u003c/p\u003e","title":"InvalidProviderToken"},{"content":"扫黑反腐的电视剧近几年，比较出彩的当属17年的《人民的名义》，火到没边了，不过今年开年，《狂飙》​带领大家新年飙了起来。 人民的名义确实拍的挺好的，非常的伟光正，具体的剧情记不清楚了，对几个人物还有点印象。\n侯亮平，男主，人生顺风顺水，正义的代表，一路高歌猛进，破获了贪腐，揪出了保护伞​，代表了人民。 祁同伟，省公安厅副厅长，反派，对他印象最深的就是胜天半子，最终​流传下来的就是胜天半子祁同伟。\n还有一个宇宙区区长孙连城，热衷于学习天文知识，搞笑人物代表。\n​高育良，政法委书记还是副书记来着，头号反派。\n人民的名义当年的火热，展示了党为了人民，保护人民利益，非常的高大上，确实非常的不错​，不过和《狂飙》比起来，看起来缺少了很多的烟火气。 2个主角的身份，一个是基层民警，一个是菜市场卖鱼的，很贴近底层的人，而人民的民义，是在大局上博弈，什么纪委的什么处长，公安厅厅长，省委书记，市长，政法委数据之类的，格局打开，但和我这种普通人level差的太远了​。\n看看这些黑道分子，非常地有气场。 安欣对一个警察职责的坚守，高启强有头脑，杀伐果断，一步步涉黑做大做强，大嫂的气场，疯批弟弟实力坑哥，李响想要靠自己的方式拿下赵立冬​。\n安欣从一个20多岁的充满年轻和力量与理想的刑警，到20年后熬出了白头发，虽然是高启强的第一任保护伞，也给我们展现了基层的富有理想和抱负与坚守的警察形象。 高启强最初只是一个菜市场的一个卖鱼的，为了供弟弟妹妹上学，为了生存，一步步的机缘巧合，阴差阳错的成了黑道大哥，冷静，有头脑，爱学习，爱看书(话说是孙子兵法有用，还是看的人很牛逼)，我觉得他在成为黑道大哥的路上，​疯批弟弟实力坑哥的作用也很大。\n疯批弟弟，自卑，报复心里强，在坑哥的路上越走越远。\n不是谁当了大哥的女人才能成为大嫂，而是大嫂选择了谁，谁才成为了大哥，​霸气大嫂实至名归。 李响亲自见证了师傅死在自己的面前，无能为力，过的非常的痛苦，每天的日子过的也不够安心，天天的非常的痛苦和挣扎，想自己靠近赵立冬，把他拿下，但是其实根本没有一丁点的机会，响是个痛苦的悲剧​面。\n丰富多采的群像成就了这部剧，虽然26集之后因为审核的原因改的稀碎，但是前半部分确实值得，一部好剧，就是在你不知道的时候，一集集的推进故事，把故事讲好，把该传递的传递到，没有废话和注水的内容​。 一个个鲜活的、情感丰富的人物和角色，演员的倾情演绎，成就了《狂飙》的火热，让我们看到了不是那么干枯的反腐、反黑的故事。​\n​不过涉黑终究是犯法的，我们还是要在法律的框架下谋生存，求发展，共勉。 期待出现更多的类似《狂飙》这样的好的电视剧，一飙就停不下来的那种。\n","permalink":"https://blog.thend03.com/posts/%E7%8B%82%E9%A3%99/","summary":"\u003cp\u003e扫黑反腐的电视剧近几年，比较出彩的当属17年的《人民的名义》，火到没边了，不过今年开年，《狂飙》​带领大家新年飙了起来。\n人民的名义确实拍的挺好的，非常的伟光正，具体的剧情记不清楚了，对几个人物还有点印象。\u003c/p\u003e\n\u003cp\u003e侯亮平，男主，人生顺风顺水，正义的代表，一路高歌猛进，破获了贪腐，揪出了保护伞​，代表了人民。\n祁同伟，省公安厅副厅长，反派，对他印象最深的就是胜天半子，最终​流传下来的就是胜天半子祁同伟。\u003c/p\u003e","title":"狂飙"},{"content":"22年没机会去远的地方，最远是国庆去了千岛湖和宏村西递。 趁着过年前有时间，在老婆有攻略且挺充分的情况下，一起来了场说走就走的旅行。\n我这个人比较粗心，对事情没啥好的规划，做方案也粗枝大叶，做出来的方案可用的部分虽然有但不多，再次感谢能力强大的老婆，把行程规划的好好的。\n整个旅程分为了7天，2天用来通勤，5天用来在云南逛玩吃逛玩吃，整体来说还是比较充实的。\n22年计划出去玩的时候，写过云南的旅游攻略，那会啥啥地方都想去，不过这次限于时间，去掉了一部分景点，以后有机会再约。 先来一张云南热门景点的大致分布图，各个景点还是隔的挺分散的，而且云南山多，火车比较少，出行可选的就大巴和打车，或者跟团。\n总体行程 第一天和第七天作为出发和返程，不做游览计划。\nDay1，飞机落地丽江，在丽江古城附近住一晚 Day2，从丽江坐大巴到虎跳峡，从纳西雅阁徒步到中虎跳，歇在半山居 Day3，继续从半山居徒步到中虎跳，逛一会，坐大巴到香格里拉，住独克宗古城附近 Day4，上午逛松赞林寺，下午坐大巴到飞来寺，晚上住在飞来寺附近 Day5，没看到日照金山，看了梅里雪山，坐大巴从德钦到丽江，从丽江去大理地热国 Day6，从地热国到大理坐动车去昆明，逛了滇池和斗南花市，住昆明市区 Day7，坐飞机返程回家过年 这个行程还是比较紧凑的，来回都是坐的飞机，然后有大巴的坐大巴，没大巴的就打车或者打顺风车。 年前的机票价格略贵，不过酒店民宿价格还可以，基本上是251-450左右可以住的不错，年后酒店价格至少是3倍翻，一晚上千了，太离谱了。\n丽江之约 出发的时候比较了一下目的地，可选的有大理，丽江，昆明之类的，最终选了丽江作为第一站。\n本来来之前因为过年、疫情结束、有风等因素，云南人会多，不过刚到丽江古城的时候，人虽然多了一点，还没到人挤人的时候，整体的体验还挺好，据说玉龙雪山的人比较多。\n丽江古城还是比较大的，尤其是刚到晚上，逛的有点深，热热闹闹的，店面的装饰都比较好看，水流也比较清澈。\n来2张丽江古城里的游客照，一个是有几个人在那唱歌，听了一会。一个是古城里的一家店。 纳西雅阁-半山居 第2天从丽江坐大巴出发，前往纳西雅阁。 今天安排了徒步的行程，以前走个100m都不想动的2个人，竟然筹划要在2200m海拔的山地上徒步，不得了🐶️。还好没去雨崩，雨崩不是我们2个菜鸡能掌握的。\n丽江到虎跳峡的这段徒步行程，完整路线是从桥头到中虎跳，我们是从纳西雅阁出发的，到纳西雅阁都12点了，在一家小客栈吃了午饭，那家的小孩子非常的勤快，跑来跑去的。而且饭菜也出奇的好吃，在云南吃的第3顿饭，非常的充实。\n吃完之后我俩就手拉着手，准备勇闯茶马古道28道拐，翻山越岭，拿下中虎跳。\n不过这段路是要走2天的，第一天要走一半，到中途那休整一夜。\n沿途的景色真的非常的美丽，沿着茶马古道28道拐，一直在上陡坡，非常的惊险刺激，翻过了28道拐之后，开始下山，边上是悬崖峭壁，脚底是海拔2200m的山地，下面就是垂直的岩壁，可以看到下面的金沙江。\n这个是在平原地区看不到的壮丽景色，我和我老婆那天从下午1点半出发，走了6个小时，大概晚上7:30左右才到中途。\n这是很值得回忆纪念的一次徒步旅程，2个完全没有山地徒步经验的人，走完了这一程。 就是低德地图导航的那句话:今天走过了所有的弯路，从此人生尽是坦途。\n下面一起欣赏下虎跳峡的美景吧\n晚上歇在了半山居，他家的饭菜也还不错，晚上还拍到了星星，在山上住宿条件也还不错了，给我们提供了一个不错的落脚点，休整好明日再战。\n半山居-中虎跳 歇息了一晚之后，吃完早饭，和老婆继续今天的徒步行程。今天要从客栈走到中虎跳那，那有一家中峡国际青年旅社，是我们今天徒步的终点。\n这里的时间安排需要注意，中峡提供去丽江和香格里拉的中巴车，下午3点半有一班，如果有去丽江和香格里拉行程计划的话，早上得提前一点出发。\n早上出发之前在墙上留下了和老婆到过这里的痕迹。 我们俩就是出发的有点晚，在中虎跳那边玩的有点赶，最后为了赶车真的是累的跟狗一样，最后坐了小马儿上来的，2个轮流坐，实现了坐马上山。\n这段路要走3个小时左右，我们9点半左右出发，12点多到达中点的。\n下半程前一段路比较平坦，中间有个上坡，有个小坡顶，非常的陡峭，风呼呼的，非常的吓人，而且有一段下坡，下坡非常的伤膝盖。\n这段路上风景好的地方不多，有个流水形成的小瀑布，一堆人搁那疯狂摆拍。\n12点在中峡吃了个午饭，还有2个半小时给我们去中虎跳，不过这次时间有点赶，没去成虎跳峡观景台。\n中途看到了虎跳峡一线天就下去了，这个也是个景点，别看看着不远，下去的路弯弯绕绕的，走了4，50分钟才下到最下面，最下面离金沙江非常的近，可以看到远处咆哮的金沙江。\n一线天和天梯是通的，从一线天的最底部，往右拐，可以去到天梯那，天梯那的水流最是湍急，不过由于时间比较紧，这一处没有下去看一下，略有些遗憾。\n爬天梯上去可以直接到公路，离中峡比较近，天梯只有一小段，到公路上总共得花40分钟到1个小时时间，赶3:30的车的话时间得规划好。\n这个梯子非常的陡，很直，恐高的我爬到一半腿都抖了，一次都没敢往下看过。\n爬完天梯还得走一段路，得走个30分钟到40分钟，我俩严重错估了这段路，爬的非常的艰难，最后2人都没力气了，还好快上去的时候，有个当地的人在那租马，2个人轮流坐马，赶上了3点半的车，真的太难了，最后那一段路我真的是用双手一步一步爬出来的。\n香格里拉 结束了虎跳峡的行程，我们就坐车去香格里拉了，这个季节的香格里拉有点冷，海拔3400米左右。 当天晚上一到，就恰了一顿牦牛火锅，120一斤，一锅都是牦牛肉，吃到爽了。\n我们住在了独克宗古城附近的一家民宿里，这家民宿是这7天里最好的一家了，装修的非常的简洁明亮，老板非常的热情，体验非常的好。\n第2天我们去看了有小布达拉宫之称的松赞林寺，这个寺庙是真的挺大的，浓浓的佛教风格，在海拔3400米的高原建造这么宏伟的一座寺庙，不知道前人付出了多少的努力和生命。\n逛完了松赞林寺之后，在古城里吃了一顿藏餐，味道好极了，尤其是那个青稞饼，非常的香甜，吃了还想吃，最后剩了一块饼我们打包带走了。\n据民宿老板说，4，5月份开的花比较多，而且那时候比较热闹，现在的天气比较冷，人也不多，在独克宗古城一边走一边逛，然后回民宿拿包走人，香格里拉下次再见。\n飞来寺 从香格里拉坐大巴去飞来寺，近距离感受梅里雪山的壮阔，车沿着盘山公路一直盘旋，弯弯绕绕的，走了4个小时的山路，对恐高人士来说，真的难搞，不过好在海拔没有提高多少，飞来寺的海拔也是3400米左右。\n这次远途跋涉到飞来寺，是冲着日照金山来的。不过运气不大好，天气不咋地，没有看到日出时的日照金山。\n到了飞来寺之后，吃了鲜鱼火锅，鱼挺鲜嫩的，不过就是味道比较淡，在小商店还买了橘子，苹果，石榴，苹果石榴8块一斤，在这么高海拔的地方，真的不贵，小橘子据说是从西藏运过来的，来自西藏的小橘子挺甜的。\n不过晚上睡觉是真的难受，地暖开着，非常的缺氧，大脑由于缺氧，一晚上翻来覆去的没有睡好觉，高原对我这种菜鸡来说有点超纲了，下次再上高海拔地区要慎重。\n第2天早上8点天亮，各家酒店的楼顶，以及飞来寺的观景台站满了想要捕获到日照金山这一幕的人，挺热闹的，虽然最后大家都没看到就是了，也算是一个小小的遗憾了，毕竟过来一趟要挺久的。\n期待和梅里雪山的再次相会，说不定下一次就是直接去雨崩，挑战非人的高难度徒步路线了。\n大理地热国 匆匆结束了在飞来寺的行程，从德钦出发，坐大巴到丽江，中途路上还有一段下雪了，白雪皑皑，6个多小时的大巴，下午3点多到的丽江，在丽江买了些橘子，然后这些橘子陪着我们从丽江到大理到昆明，小橘子辛苦了。\n打了顺风车去了大理地热国，没选择去大理古城看苍山洱海，我们选择了去大理地热国泡温泉。\n怎么说呢，大理地热国大是大，温泉是天然，便宜是便宜，但是体验是真的不好，没啥好说的，不值得夸赞的一个地方，不如在洱海边上的酒店看洱海。\n住了蒙古包，算是一次体验了，晚上满天的繁星，还是不错的，温泉就算了，不如去联丰广场澡堂子洗澡。\n这个88度的大池子放在这，壮观是真的壮观，危险是真的危险\n昆明 大理的体验不大好，从地热国去大理站的路上，看了连绵不绝的山，那是苍山，不过洱海在路上没看着。\n坐了动车去了昆明，住在了昆明站附近，中午午饭是路边的米线，不得不说，出去玩，还是得吃路边的小摊，正宗且好吃，麻辣鸡非常的好吃，又麻又辣又过瘾。\n吃完饭后，我们一起去了滇池，不得不说，论热闹，还得是滇池啊，洱海什么的都是弟弟。\n冬天是海鸥回归的季节，滇池挤满了从西伯利亚来的红嘴小鸥子，到处都是愚蠢的人类拿着鸥粮或者面包喂鸥子的画面，有些愚蠢的人类和小鸥子斗智斗勇，拿食物吸引小鸥子，总能被小鸥子找准时机把食物叼走，非常的欢乐。\n昆明这个下午带给了我们非常多的欢乐，阳光正好，温度和煦，海鸥乱飞，骑着自行车沿着滇池边走，感受风的吹拂，海鸥的啼叫，世界与我无瓜，世界是美好的。\n5点之后温度渐渐降低，风大了起来，我们离开了给我们带来了一下午欢乐的滇池，去往下一个地方。\n我们打算去花鸟市场转转，斗南花市是真的大，一楼是各种花，二楼是多肉。\n该说不说的，我们俩在斗南花市，干的事和鲜花/干花一点都不沾边。在一楼买了10块玫瑰花做的香皂。在二楼买了白茶，买了鲜花饼，愣是一束花都没买。\n热热闹闹的花市，真好，非常的有生活气息，晚上回来在酒店附近吃了东北大爷家的水饺，昆明行程结束。\n明天就返程该回家啦。\n后记 云南真的非常的美丽，地方也特大，当时计划的腾冲啊，玉溪啊，西双版纳之类的地方都没有时间去，不过这次已经很充实了，回忆满满。下次有机会再来云南继续探索美丽之旅。\n","permalink":"https://blog.thend03.com/posts/%E5%BD%A9%E4%BA%91%E4%B9%8B%E5%8D%97/","summary":"\u003cp\u003e22年没机会去远的地方，最远是国庆去了千岛湖和宏村西递。\n趁着过年前有时间，在老婆有攻略且挺充分的情况下，一起来了场说走就走的旅行。\u003c/p\u003e\n\u003cp\u003e我这个人比较粗心，对事情没啥好的规划，做方案也粗枝大叶，做出来的方案可用的部分虽然有但不多，再次感谢能力强大的老婆，把行程规划的好好的。\u003c/p\u003e\n\u003cp\u003e整个旅程分为了7天，2天用来通勤，5天用来在云南逛玩吃逛玩吃，整体来说还是比较充实的。\u003c/p\u003e","title":"彩云之南"},{"content":"2022已经结束，2023已经来了，今年过年来的早，现在2023年都过去了5天，元旦短暂出去远行了一下，先快乐了一下，虽然太湖边上四下无人，非常的空旷，不过人少有人少的好处，独享太湖的moment。\n工作 在这边2年了，衣食住行啥的都已经非常的熟悉，顺便工资也没涨，真是一个伤心的故事。\n22年下半年跑路尝试失败，先看看年底晋升的结果，希望可以晋升涨一波吧。\n如果晋升不了，或者涨薪比较少，还是得继续找找跑路的机会。\n23年工作上还是以挣钱为主，希望可以收入增加，多补贴点家用吧。\n另外还是要努力学习，不能荒废时间，每天下班后学习1-2小时，孜孜不倦，日拱一两卒。\n生活 2022年没有出过太远的门，一方面疫情不稳定，另一方面没有太多的时间。\n23年希望可以在保证自身安全、远离病毒的情况下，一起去远行一次，再看看祖国的大好风光。\n周末多做饭，多提炼厨艺，多打扫卫生，逐步改掉自身的小毛病，生活质量上再上一层楼。\n周末多出去晒太阳，吸日月之精华，共襄自然养生之盛举。\n双人 22年求婚/订婚已经甜蜜进行了，接下来就是该考虑和我的亲亲老婆结婚事宜了，不过我现在还是个低收入人群，承接第一条，努力挣钱，给我们的婚礼多挣点嫁妆吧，等着哦老婆。\n然后是婚纱照，承接第2条，出去玩的时候，顺便做做随手拍，记录我们的美好生活。伴着祖国河山，一起经历更多的事。\n等考完驾照，小车子也可以看一看，有个车以后，能蹦跶的方圆又变长了，随时随地蹦跶。\n然后再考虑在苏州看看小窝子，看看为房地产事业做点贡献，当然是要在力所能及的范围，尽力，努力有个小窝。\n然后就是异地的问题，有个小车或者合并到一个城市，也是23年努力的小目标。\n其他的就是日常两人生活小确幸，我拖地来我洗碗，你躺床上吃水果，美啊美啊\n其他 23年还是努力解决2人的实际问题，异地/收入提高优先级，其他的还是慢慢推进，希望23年可以和老婆一起度过又一个充实的一年。\n最后 今年还是有不少事要做的，不立flag，有个大致的目标，一起去努力解决问题，一起开心，一起快乐。\n","permalink":"https://blog.thend03.com/posts/2023%E5%B9%B4%E5%BA%A6%E8%A7%84%E5%88%92/","summary":"\u003cp\u003e2022已经结束，2023已经来了，今年过年来的早，现在2023年都过去了5天，元旦短暂出去远行了一下，先快乐了一下，虽然太湖边上四下无人，非常的空旷，不过人少有人少的好处，独享太湖的moment。\u003c/p\u003e\n\u003ch2 id=\"工作\"\u003e工作\u003c/h2\u003e\n\u003cp\u003e在这边2年了，衣食住行啥的都已经非常的熟悉，顺便工资也没涨，真是一个伤心的故事。\u003c/p\u003e\n\u003cp\u003e22年下半年跑路尝试失败，先看看年底晋升的结果，希望可以晋升涨一波吧。\u003c/p\u003e","title":"2023年度规划"},{"content":"2022年终总结\n波云诡谲的2022已经结束，现在已经2023年了，回顾下这个2022，有开心，有迷茫，也有快乐。\n简单回顾下这奇异的2022年。\n疫情 贯穿2022年一整年的主旋律，从年初的严防死守，到年末的应阳尽阳，生活从一个快车道切到了另一个快车道。\n2022年年初，还是管的挺严的，尤记得2月13号苏州疫情，然后跑回上海，被大数据精准识别为黄码，那个时候黄码仍如洪水猛兽，被封在上海2周，那是人生中第一次因为疫情隔离。\n后面几个月上海疫情愈演愈烈，然后从3月开始盼，从3月盼着3月18去太湖香山泡温泉开始，然后开始盼4月清明节，然后盼着五一，然后盼着六一，最终在上海6月解封之后，再过了一个月才能自由活动。\n上半年的封来封去是疫情3年最后一次绝唱，下半年还好，没有经过特别的封禁。\n2022年做的核酸，可绕地球3圈，真真无语子。\n然后开会结束之后，快速转向，无高中低风险，取消行程码，取消健康码，然后就是快速放开，应阳尽阳。\n三年的严防死守结束了，剩下的就是靠运气和抵抗力硬扛了，不过阳的感觉真的不好受，能不阳就不阳，得了也很难受，下面就是和重复感染做斗争了，不要养蛊，希望吧。\n在时代的洪流面前，个人的影响微乎其微，照顾好自己，不论如何，真的放开了，后面希望大家都健健康康的，远离病毒。\n工作 2年前跳槽来的上海，年初是工作一年整，因为工作的问题，也有过一些争吵，都有各自的立场，争吵呢在所难免，都是为了以后更好。\n虽然说吵吵感情更深，不过吵多了，火气大了，氛围有点不大好。\n今年疫情，叠加互联网行业制裁，好像工作也没那么好找，也有可能是我太菜了吧[旺柴]，在上海和苏州2个地方都找不到合适的工作。\n不过呢，就算不跳，多出去试试看看行情也是好的，行业衰退之际，趁着年轻多挣点，那也是好的。\n在这里已经2年了，虽然说我不自认劳奴，不过总归是在工作上投入了不少时间精力，当然了工资也没的涨。\n工作是个长期活，短期要看，看来中长期也要有过规划，为自己的未来的五年、十年做一做规划和计划。\n另外后面还是要在工作之余，多想想自己的事，多做做自己的事，探讨其他的可能性吧。\n对拼多多，小红书等重拳出击。\n生活 22年1月短暂的出去逛了一下，逛了姑苏的寒山寺和平江路，老城区的文化底蕴和风景还是挺好的。\n虽然那个评弹听不懂，不过好歹是装了一下子，高级。\n接下来就是疫情，封闭，封闭，封闭，核酸，核酸，核酸，等上海这一轮过去，已经7月了。只能说阿希吧一个字，封闭那么久，整个人都要郁闷了。\n7月行程 不过出来之后就好多了，虽然疫情也还有，不过断断续续的，没有上半年影响那么大了，出行虽然有影响，但不多，还是可以艰难着出去玩一玩的。\n下半年和我老婆一起，去过了很多地方，一起待的时间更久了，尤其是q4，因为疫情，居家的时间比较多，可以和她一起上下班。\n下半年从7月开始，去了昆山，周庄，太湖，海洋馆，把上半年缺的时间都补上了，7月真是相当的快乐，每个周末都外出。\n先和老婆大人去了昆山市区，每次坐高铁在苏州和上海之间穿梭，就会路过昆山，不过一直没下去过，这次终于补上了，昆山市中心不大，晚上随便找了个串串店吃了点，不大行，不过昆山整体环境还是挺好的。\n在昆山待了一个晚上加一个白天就跑路了，昆山下次再见[旺柴]。\n从昆山离开之后就去了周庄，只能说周庄风景美丽，但不多，那会上海疫情刚放开不久，周庄的人还不多，不过门票要100块才能进去，有点亏。\n不过还行吧，那个民宿二楼临窗，有古代的风格，民宿家的老阿姨热情要我们在她家吃饭，不过我们最终还是选择了出去走走。晚饭吃了个大猪蹄子，当地的特色，虽然味道挺好的，但是属实有点大。那个双桥是个景点，但是走近看就2个石板桥，不知道是不是我没文化，看不出啥美感。\n周庄晚上湖边走走，有个大湖，有灯光，晚上在湖边吹吹风，还是挺享受的，周庄总体还行吧，江南水乡该有的都有了。\n7月第2站和她去了太湖，当时只是为了去看看太湖，然后在太湖边上找了个酒店，在N层楼上，看向窗外的太湖，吃着外卖，开着投影仪，看着赘婿，这日子美极了。晚上和她去太湖边上散步，夏天的人还挺多的，天气虽热，吹着湖风，一阵惬意。\n7月第3站和她一起去了海昌海洋公园，这个夏天和她补上了没去过海洋馆的遗憾。我从青浦公交转地铁，单程要4个小时[狗头]，她从苏州到上海，再坐地铁，单趟2小时[旺柴]。我和她跨越千山万水，只为和她看一看那只威武雄壮的虎鲸啊[狗头]。\n从海洋馆出来，还趁机去了下滴水湖，滴水湖是个大圆湖，边上开发的还不是很多，而且湖边风景挺好的，两个人手牵手，在大圆盘上吹吹夏日的微风，好极了。\n后面还一起去听了新裤子的演唱会，整体还是不错的，现场的氛围确实挺好的，嘶哑的摇滚呐喊振奋人心。\n求婚初始 人生大事来了，时值七夕，经过我那么拙劣且毫无计划的准备，我带着我满满的诚意向我的老婆求婚了，在阳澄湖边上天黑的小灯氛围中，成功的向我老婆求婚成功，牵着她的小手，一起露出幸福的小笑容。\n虽然没啥艺术细胞，且没有计划，不过在老婆的悉心指挥下，完成了求婚计划的准备和实施，虽然少了点惊喜，不过最终效果挺好的，感谢强大的老婆。\n几封书信，几副手绘，几篇故事看起来只是开始，后面一切都会继续的，虽然画画已经停了，不过后面有机会会捡起来画的。\n人生大事第一程已启动，接下来开始第2程。\n订婚 9月金秋，顺着七夕求婚的势头，我和老婆成功举行了订婚仪式，相隔一个月，我们在家里举办了订婚仪式，双方父母和亲戚朋友参加了，那势头，虽然不大，但挺隆重的，挺好。\n鲜花配美老婆，美哉。\n离结婚又近了一步哦老婆。\n市内游 回苏州之后，一起去了虎丘塔赏秋，初秋的天气不冷，金黄色的秋叶，摇曳的灯光，精美的表演，一切都是那么的美好。\n看这个大王演员，坐姿如此妖娆\n又去独墅湖看了孤独的一棵树，配上上树的公鸡，非常喜感\n远行 国庆之后，开始了22年的第一次远行，之前都是就近玩的，国庆选择了去浙江安徽逛一逛。首站是千岛湖，不得不说，千岛湖是真的美丽，随便找一个岛屿，那个水光潋滟的，都很美丽，我和她在千岛湖沿着骑行步道骑车，那天沿着骑行步道骑了15公里，从下午艳阳高照，骑到了晚上夕阳西下。\n虽然终点网红桥Just soso，不过沿路的风景还是非常美丽的，地势起伏，湖景美丽，沿湖看了很多美丽的湖景。\n在千岛湖吃了当地特色鱼头，鱼头汤，剁椒鱼头，红烧鱼尾，把千岛湖的大鱼霍霍了一遍，不过味道确实是好。\n欣赏完千岛湖美景之后，我们去了黄山，当然没去爬山，去了宏村和西递，宏村的水相比千岛湖就差了一些，而且景点里面人挤人的，我们2人花了200块门票，进去买了小吃，酒酿，臭豆腐，仿佛纯纯大冤种一样。\n虽然赏秋早了一点，不过塔川的秋色还是极好的，叶子还未完全黄，初秋的风景，追着夕阳，非常的入镜。\n木坑竹海满满的竹子，沿着台阶拾级而上，在山顶点一杯咖啡，看着深深的竹坑，微风吹动，再去坐个缆车，享受一下高空刺激。\n然后再去西递看一下徽南建筑的高墙大院，西递的商业化气息比宏村低多了，晚11点走在小巷子里，摸索着漆黑的小路，虽然累了一天，但探索未知也非常的开心。\n晚上西递还有水灯光秀，各种灯光乱飞，喷泉飞舞，虽然门票也是100，不过比宏村好多了。\n在西递喝上了老母鸡汤，非常的鲜美。\n也看了西递的美丽清晨\n在假期的最后一天，在无锡一起看了脱口秀，假期完美收官。\n年末 下面几个月就回归平淡，周末一起生活，一起做饭，一起去周边逛一逛，一起出去考试，学车，生活归于平淡，不过这才是生活的大部分，平淡的日子，也不缺乏开心就是了。\n![image-20230104235844915](/Users/since/Library/Application Support/typora-user-images/image-20230104235844915.png)\n![image-20230105000105507](/Users/since/Library/Application Support/typora-user-images/image-20230105000105507.png)\n总结 2022年整体还是不错的，除开疫情和没涨工资，整体比较平稳，下半年做了不少事，求婚订婚推进，外出看湖看风景，吃好吃的，看演唱会，看脱口秀。\n小日子美滋滋的，平淡且美好。\n另外还🐏️了一波，这个过程太痛苦了，希望以后可以一直远离。\n回望2022，除了生活之外，自身上也要加强，工作尽量多开好省，应该开辟开辟副业，多挣些钱。\n2023以身体健康和搞钱为第一目标\n我们一起加油吧。\n祝我的朋友们身体健康，收入稳定且有增长，2023开心快乐。\n​\n","permalink":"https://blog.thend03.com/posts/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/","summary":"\u003cp\u003e2022年终总结\u003c/p\u003e\n\u003cp\u003e波云诡谲的2022已经结束，现在已经2023年了，回顾下这个2022，有开心，有迷茫，也有快乐。\u003c/p\u003e\n\u003cp\u003e简单回顾下这奇异的2022年。\u003c/p\u003e\n\u003ch2 id=\"疫情\"\u003e疫情\u003c/h2\u003e\n\u003cp\u003e贯穿2022年一整年的主旋律，从年初的严防死守，到年末的应阳尽阳，生活从一个快车道切到了另一个快车道。\u003c/p\u003e\n\u003cp\u003e2022年年初，还是管的挺严的，尤记得2月13号苏州疫情，然后跑回上海，被大数据精准识别为黄码，那个时候黄码仍如洪水猛兽，被封在上海2周，那是人生中第一次因为疫情隔离。\u003c/p\u003e","title":"2022年终总结"},{"content":"1. 介绍 scan命令的作用和keys *的作用类似，主要用于查找redis中的键，但是在正式的生产环境中一般不会直接使用keys *这个命令，因为他会返回所有的键，如果键的数量很多会导致查询时间很长，进而导致服务器阻塞，所以需要scan来进行更细致的查找\nscan总共有这几种命令：scan、sscan、hscan、zscan，分别用于迭代数据库中的：数据库中所有键、集合键、哈希键、有序集合键，命令具体结构如下：\nscan cursor [MATCH pattern] [COUNT count] [TYPE type] sscan key cursor [MATCH pattern] [COUNT count] hscan key cursor [MATCH pattern] [COUNT count] zscan key cursor [MATCH pattern] [COUNT count] 2. scan scan cursor [MATCH pattern] [COUNT count] [TYPE type]，cursor表示游标，指查询开始的位置，count默认为10，查询完后会返回下一个开始的游标，当返回0的时候表示所有键查询完了\n127.0.0.1:6379[2]\u0026gt; scan 0 1) \u0026#34;3\u0026#34; 2) 1) \u0026#34;mystring\u0026#34; 2) \u0026#34;myzadd\u0026#34; 3) \u0026#34;myhset\u0026#34; 4) \u0026#34;mylist\u0026#34; 5) \u0026#34;myset2\u0026#34; 6) \u0026#34;myset1\u0026#34; 7) \u0026#34;mystring1\u0026#34; 8) \u0026#34;mystring3\u0026#34; 9) \u0026#34;mystring4\u0026#34; 10) \u0026#34;myset\u0026#34; 127.0.0.1:6379[2]\u0026gt; scan 3 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;myzadd1\u0026#34; 2) \u0026#34;mystring2\u0026#34; 3) \u0026#34;mylist2\u0026#34; 4) \u0026#34;myhset1\u0026#34; 5) \u0026#34;mylist1\u0026#34; MATCH可以采用模糊匹配找出自己想要查找的键，这里的逻辑是先查出20个，再匹配，而不是先匹配再查询，这里加上count 20是因为默认查出的10个数中可能不能包含所有的相关项，所以把范围扩大到查20个，我这里测试的键总共有15个\n127.0.0.1:6379[2]\u0026gt; scan 0 match mylist* count 20 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;mylist\u0026#34; 2) \u0026#34;mylist2\u0026#34; 3) \u0026#34;mylist1\u0026#34; TYPE可以根据具体的结构类型来匹配该类型的键\n127.0.0.1:6379[2]\u0026gt; scan 0 count 20 type list 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;mylist\u0026#34; 2) \u0026#34;mylist2\u0026#34; 3) \u0026#34;mylist1\u0026#34; 3. sscan sscan key cursor [MATCH pattern] [COUNT count]，sscan的第一个参数总是集合类型的key\n127.0.0.1:6379[2]\u0026gt; sadd myset1 a b c d (integer) 4 127.0.0.1:6379[2]\u0026gt; smembers myset1 1) \u0026#34;d\u0026#34; 2) \u0026#34;a\u0026#34; 3) \u0026#34;c\u0026#34; 4) \u0026#34;b\u0026#34; 127.0.0.1:6379[2]\u0026gt; sscan myset1 0 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;d\u0026#34; 2) \u0026#34;c\u0026#34; 3) \u0026#34;b\u0026#34; 4) \u0026#34;a\u0026#34; 127.0.0.1:6379[2]\u0026gt; sscan myset1 0 match a 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;a\u0026#34; 4. hscan hscan key cursor [MATCH pattern] [COUNT count]，sscan的第一个参数总是哈希类型的key\n127.0.0.1:6379[2]\u0026gt; hset myhset1 kk1 vv1 kk2 vv2 kk3 vv3 (integer) 3 127.0.0.1:6379[2]\u0026gt; hgetall myhset1 1) \u0026#34;kk1\u0026#34; 2) \u0026#34;vv1\u0026#34; 3) \u0026#34;kk2\u0026#34; 4) \u0026#34;vv2\u0026#34; 5) \u0026#34;kk3\u0026#34; 6) \u0026#34;vv3\u0026#34; 127.0.0.1:6379[2]\u0026gt; hscan myhset1 0 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;kk1\u0026#34; 2) \u0026#34;vv1\u0026#34; 3) \u0026#34;kk2\u0026#34; 4) \u0026#34;vv2\u0026#34; 5) \u0026#34;kk3\u0026#34; 6) \u0026#34;vv3\u0026#34; 5. zscan zscan key cursor [MATCH pattern] [COUNT count]，sscan的第一个参数总是有序集合类型的key\n127.0.0.1:6379[2]\u0026gt; zadd myzadd1 1 zz1 2 zz2 3 zz3 (integer) 3 127.0.0.1:6379[2]\u0026gt; zrange myzadd1 0 -1 withscores 1) \u0026#34;zz1\u0026#34; 2) \u0026#34;1\u0026#34; 3) \u0026#34;zz2\u0026#34; 4) \u0026#34;2\u0026#34; 5) \u0026#34;zz3\u0026#34; 6) \u0026#34;3\u0026#34; 127.0.0.1:6379[2]\u0026gt; zscan myzadd1 0 1) \u0026#34;0\u0026#34; 2) 1) \u0026#34;zz1\u0026#34; 2) \u0026#34;1\u0026#34; 3) \u0026#34;zz2\u0026#34; 4) \u0026#34;2\u0026#34; 5) \u0026#34;zz3\u0026#34; 6) \u0026#34;3\u0026#34; ","permalink":"https://blog.thend03.com/posts/tech/tech1/","summary":"\u003ch2 id=\"1-介绍\"\u003e1. 介绍\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003escan\u003c/code\u003e命令的作用和\u003ccode\u003ekeys *\u003c/code\u003e的作用类似，主要用于查找redis中的键，但是在正式的生产环境中一般不会直接使用\u003ccode\u003ekeys *\u003c/code\u003e这个命令，因为他会返回所有的键，如果键的数量很多会导致查询时间很长，进而导致服务器阻塞，所以需要scan来进行更细致的查找\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003escan\u003c/code\u003e总共有这几种命令：\u003ccode\u003escan\u003c/code\u003e、\u003ccode\u003esscan\u003c/code\u003e、\u003ccode\u003ehscan\u003c/code\u003e、\u003ccode\u003ezscan\u003c/code\u003e，分别用于迭代数据库中的：数据库中所有键、集合键、哈希键、有序集合键，命令具体结构如下：\u003c/p\u003e","title":"Redis scan命令学习"},{"content":"\u0026lt;div\u0026gt; 科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 \u0026lt;/div\u0026gt; ","permalink":"https://blog.thend03.com/posts/tech/tech/","summary":"\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    科技代码\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Tech"},{"content":" Sulv\u0026#39;s Blog 一个记录技术、阅读、生活的博客 👉友链格式 名称： Sulv\u0026rsquo;s Blog 网址： https://www.sulvblog.cn 图标： https://www.sulvblog.cn/img/Q.gif 描述： 一个记录技术、阅读、生活的博客 👉友链申请要求 秉承互换友链原则、文章定期更新、不能有太多广告、个人描述字数控制在15字内\n👉Hugo博客交流群 787018782\n","permalink":"https://blog.thend03.com/links/","summary":"\u003cdiv class=\"friend\"\u003e\n\u003ca target=\"_blank\" href=https://www.sulvblog.cn title=Sulv\u0026#39;s\u0026#32;Blog class=\"friendurl\"\u003e\n  \u003cdiv class=\"frienddiv\"\u003e\n    \u003cdiv class=\"frienddivleft\"\u003e\n      \u003cimg class=\"myfriend\" src=https://www.sulvblog.cn/img/Q.gif /\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"frienddivright\"\u003e\n      \u003cdiv class=\"friendname\"\u003eSulv\u0026#39;s Blog\u003c/div\u003e\n      \u003cdiv class=\"friendinfo\"\u003e一个记录技术、阅读、生活的博客\u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\u003c/a\u003e\n\n\u003c/div\u003e\n\u003cbr/\u003e\n\u003cbr/\u003e\n\u003cbr/\u003e\n\u003cbr/\u003e\n\u003cbr/\u003e\n\u003cdiv style=\"font-size: 20px;\" class=\"youlian\"\u003e👉友链格式\u003c/div\u003e\n\u003cdiv style=\"font-size: 16px;\"\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e名称：\u003c/td\u003e\n          \u003ctd\u003eSulv\u0026rsquo;s Blog\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e网址：\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://www.sulvblog.cn\"\u003ehttps://www.sulvblog.cn\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e图标：\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://www.sulvblog.cn/img/Q.gif\"\u003ehttps://www.sulvblog.cn/img/Q.gif\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e描述：\u003c/td\u003e\n          \u003ctd\u003e一个记录技术、阅读、生活的博客\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\u003cbr/\u003e\n\u003cdiv style=\"font-size: 20px;\"\u003e👉友链申请要求\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003e秉承互换友链原则、文章定期更新\u003c!-- 、网站在工信部备案 --\u003e、不能有太多广告、个人描述字数控制在15字内\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cbr/\u003e\n\u003cdiv style=\"font-size: 20px;\"\u003e👉Hugo博客交流群\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003e787018782\u003c/p\u003e\n\u003c/blockquote\u003e","title":"🤝友链"},{"content":"关于我\n英文名: since 职业: 程序员 运动: 徒步、爬山、羽毛球 ","permalink":"https://blog.thend03.com/about/","summary":"\u003cp style=\"font-size: 25px;\"\u003e关于我\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e英文名:\u003c/td\u003e\n          \u003ctd\u003esince\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e职业:\u003c/td\u003e\n          \u003ctd\u003e程序员\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e运动:\u003c/td\u003e\n          \u003ctd\u003e徒步、爬山、羽毛球\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"🙋🏻‍♂️关于"}]